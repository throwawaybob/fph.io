{"version":3,"sources":["aramk:tinycolor/tinycolor.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA,mB;AACA,sC;AACA,+B;;AAEA,c;;AAEA,kD;AACA,oB;;AAEA,kC;;AAEA,gF;AACA,qB;AACA,gF;;AAEA,0B;AACA,uB;AACA,oB;AACA,gB;AACA,2B;AACA,uB;AACA,uB;AACA,6B;;AAEA,kD;;AAEA,iC;AACA,uB;;AAEA,qD;AACA,qC;AACA,oB;AACA,K;AACA,6D;AACA,uC;AACA,0C;AACA,K;;AAEA,gC;AACA,gC;AACA,oB;AACA,oB;AACA,oB;AACA,oB;AACA,gD;AACA,6C;AACA,2C;;AAEA,yD;AACA,iF;AACA,qE;AACA,mF;AACA,sD;AACA,sD;AACA,sD;;AAEA,sB;AACA,gC;AACA,E;;AAEA,uB;AACA,wB;AACA,0C;AACA,M;AACA,yB;AACA,8B;AACA,M;AACA,yB;AACA,wB;AACA,M;AACA,kC;AACA,iC;AACA,M;AACA,2B;AACA,4B;AACA,M;AACA,0B;AACA,uB;AACA,M;AACA,+B;AACA,+B;AACA,gE;AACA,M;AACA,+B;AACA,oC;AACA,oD;AACA,oB;AACA,M;AACA,uB;AACA,sD;AACA,kE;AACA,M;AACA,6B;AACA,sD;AACA,+F;AACA,+B;AACA,qD;AACA,yE;AACA,M;AACA,uB;AACA,sD;AACA,kE;AACA,M;AACA,6B;AACA,sD;AACA,+F;AACA,+B;AACA,qD;AACA,yE;AACA,M;AACA,iC;AACA,+D;AACA,M;AACA,uC;AACA,4C;AACA,M;AACA,wB;AACA,6D;AACA,M;AACA,8B;AACA,mC;AACA,M;AACA,uB;AACA,mG;AACA,M;AACA,6B;AACA,+B;AACA,sG;AACA,2H;AACA,M;AACA,iC;AACA,iL;AACA,M;AACA,uC;AACA,+B;AACA,qK;AACA,0L;AACA,M;AACA,wB;AACA,4B;AACA,iC;AACA,S;;AAEA,0B;AACA,yB;AACA,S;;AAEA,4E;AACA,M;AACA,qC;AACA,6E;AACA,0C;AACA,0E;;AAEA,0B;AACA,2C;AACA,gD;AACA,S;;AAEA,2I;AACA,M;AACA,gC;AACA,iC;AACA,wC;;AAEA,oC;AACA,mD;AACA,2I;;AAEA,+B;AACA,0E;AACA,2D;AACA,qD;AACA,qC;AACA,a;AACA,sC;AACA,S;AACA,+B;AACA,iD;AACA,S;AACA,gC;AACA,2D;AACA,S;AACA,oD;AACA,iD;AACA,S;AACA,gC;AACA,qD;AACA,S;AACA,gC;AACA,kD;AACA,S;AACA,gC;AACA,4C;AACA,S;AACA,+B;AACA,iD;AACA,S;AACA,+B;AACA,iD;AACA,S;;AAEA,qD;AACA,M;;AAEA,4C;AACA,uE;AACA,2B;AACA,2B;AACA,2B;AACA,gC;AACA,oB;AACA,M;AACA,yB;AACA,2D;AACA,M;AACA,0B;AACA,4D;AACA,M;AACA,wB;AACA,0D;AACA,M;AACA,4B;AACA,8D;AACA,M;AACA,0B;AACA,4D;AACA,M;AACA,2B;AACA,6D;AACA,M;AACA,sB;AACA,wD;AACA,M;;AAEA,2C;AACA,kE;AACA,M;AACA,2B;AACA,4D;AACA,M;AACA,4B;AACA,6D;AACA,M;AACA,+B;AACA,gE;AACA,M;AACA,iC;AACA,kE;AACA,M;AACA,uB;AACA,wD;AACA,M;AACA,wB;AACA,yD;AACA,K;AACA,E;;AAEA,sE;AACA,kE;AACA,6C;AACA,mC;AACA,0B;AACA,8B;AACA,0C;AACA,gC;AACA,2C;AACA,iB;AACA,sB;AACA,gE;AACA,iB;AACA,a;AACA,S;AACA,yB;AACA,K;;AAEA,kC;AACA,E;;AAEA,sD;AACA,0B;AACA,E;AACA,Y;AACA,sB;AACA,4B;AACA,gC;AACA,yC;AACA,uC;AACA,mD;AACA,mD;AACA,8C;AACA,sD;AACA,gD;AACA,E;AACA,4B;;AAEA,mC;AACA,c;AACA,mB;AACA,uB;;AAEA,mC;AACA,2C;AACA,K;;AAEA,mC;AACA,kG;AACA,sD;AACA,sB;AACA,yE;AACA,S;AACA,uG;AACA,mD;AACA,mD;AACA,sD;AACA,sB;AACA,2B;AACA,S;AACA,uG;AACA,mD;AACA,mD;AACA,sD;AACA,sB;AACA,2B;AACA,S;;AAEA,wC;AACA,wB;AACA,S;AACA,K;;AAEA,sB;;AAEA,Y;AACA,e;AACA,uC;AACA,2C;AACA,2C;AACA,2C;AACA,Y;AACA,M;AACA,C;;;AAGA,uB;AACA,uB;;AAEA,gE;AACA,4G;;AAEA,a;AACA,mE;AACA,qC;AACA,2C;AACA,qC;AACA,2B;AACA,Y;AACA,iC;AACA,iC;AACA,gC;AACA,M;AACA,C;;AAEA,a;AACA,sC;AACA,6D;AACA,kC;AACA,4B;;AAEA,wB;AACA,wB;AACA,wB;;AAEA,uD;AACA,kC;;AAEA,oB;AACA,gC;AACA,K;AACA,U;AACA,0B;AACA,4D;AACA,qB;AACA,6D;AACA,+C;AACA,+C;AACA,S;;AAEA,e;AACA,K;;AAEA,gC;AACA,C;;AAEA,a;AACA,sC;AACA,+F;AACA,6C;AACA,4B;AACA,gB;;AAEA,wB;AACA,wB;AACA,wB;;AAEA,+B;AACA,yB;AACA,yB;AACA,+C;AACA,6B;AACA,uD;AACA,iB;AACA,K;;AAEA,iB;AACA,oC;AACA,K;AACA,U;AACA,sD;AACA,0B;AACA,mC;AACA,6B;AACA,mC;AACA,K;;AAEA,kD;AACA,C;;AAEA,a;AACA,qC;AACA,qE;AACA,kC;AACA,4B;;AAEA,wB;AACA,wB;AACA,wB;;AAEA,uD;AACA,sB;;AAEA,sB;AACA,gC;;AAEA,oB;AACA,4B;AACA,K;AACA,U;AACA,qB;AACA,6D;AACA,+C;AACA,+C;AACA,S;AACA,e;AACA,K;AACA,gC;AACA,C;;AAEA,a;AACA,sC;AACA,kG;AACA,6C;AACA,6B;;AAEA,4B;AACA,wB;AACA,wB;;AAEA,0B;AACA,kB;AACA,wB;AACA,4B;AACA,kC;AACA,oB;AACA,oC;AACA,oC;AACA,oC;;AAEA,kD;AACA,C;;AAEA,a;AACA,+B;AACA,wD;AACA,iC;AACA,wC;;AAEA,e;AACA,wC;AACA,wC;AACA,uC;AACA,M;;AAEA,2C;AACA,6I;AACA,sE;AACA,K;;AAEA,wB;AACA,C;AACA,kB;AACA,4D;AACA,8D;AACA,iC;AACA,oC;;AAEA,mB;AACA,yC;AACA,4C;AACA,4C;AACA,2C;AACA,U;;AAEA,4B;AACA,K;;AAEA,W;AACA,yC;AACA,8C;AACA,6C;AACA,8E;AACA,E;AACA,+B;AACA,gC;AACA,wB;AACA,wB;AACA,uB;AACA,O;AACA,E;;;AAGA,yB;AACA,yB;AACA,gD;AACA,2E;;AAEA,oC;AACA,iD;AACA,uC;AACA,0B;AACA,2B;AACA,0B;AACA,C;;AAEA,kC;AACA,iD;AACA,uC;AACA,0B;AACA,2B;AACA,0B;AACA,C;;AAEA,2B;AACA,4C;AACA,C;;AAEA,kC;AACA,iD;AACA,uC;AACA,0B;AACA,2B;AACA,0B;AACA,C;;AAEA,kC;AACA,iD;AACA,uC;AACA,gF;AACA,gF;AACA,gF;AACA,0B;AACA,C;;AAEA,iC;AACA,iD;AACA,uC;AACA,0B;AACA,2B;AACA,0B;AACA,C;;AAEA,4F;AACA,gE;AACA,8B;AACA,uC;AACA,gD;AACA,sC;AACA,0B;AACA,C;;AAEA,wB;AACA,wB;AACA,6D;AACA,2E;;AAEA,4B;AACA,uC;AACA,gC;AACA,0B;AACA,C;;AAEA,uB;AACA,uC;AACA,kB;AACA,Y;AACA,yB;AACA,8D;AACA,6D;AACA,M;AACA,C;;AAEA,wB;AACA,uC;AACA,kB;AACA,Y;AACA,yB;AACA,6D;AACA,8D;AACA,6D;AACA,M;AACA,C;;AAEA,iC;AACA,uC;AACA,kB;AACA,Y;AACA,yB;AACA,4D;AACA,4D;AACA,M;AACA,C;;AAEA,4C;AACA,2B;AACA,0B;;AAEA,uC;AACA,4B;AACA,iC;;AAEA,8E;AACA,qC;AACA,iC;AACA,K;AACA,e;AACA,C;;AAEA,wC;AACA,2B;AACA,uC;AACA,wC;AACA,iB;AACA,mC;;AAEA,uB;AACA,iD;AACA,mC;AACA,K;;AAEA,e;AACA,C;;AAEA,oB;AACA,wB;;AAEA,kD;AACA,iD;;AAEA,yC;AACA,yC;;AAEA,yB;AACA,sB;AACA,4B;;AAEA,W;;AAEA,sB;AACA,e;AACA,Y;AACA,mC;AACA,K;;AAEA,sB;;AAEA,oB;;AAEA,gB;AACA,qC;AACA,qC;AACA,qC;AACA,yC;AACA,M;;AAEA,2B;AACA,E;;;AAGA,wB;AACA,wB;AACA,6C;;AAEA,gB;AACA,4E;AACA,mE;AACA,6D;AACA,kD;AACA,+B;AACA,+B;AACA,0B;AACA,0B;AACA,yC;AACA,yC;AACA,qB;AACA,6D;AACA,6D;AACA,2D;AACA,M;;AAEA,Y;AACA,wD;AACA,wB;AACA,M;AACA,E;;AAEA,a;AACA,2C;AACA,wF;AACA,Y;AACA,mD;AACA,iD;AACA,4D;AACA,mE;AACA,E;;AAEA,iB;AACA,qE;AACA,yD;AACA,Y;AACA,gE;AACA,yD;AACA,yB;AACA,sB;AACA,+B;AACA,8C;;AAEA,oE;AACA,yD;;AAEA,yE;AACA,+E;AACA,mF;;AAEA,6C;AACA,gE;AACA,wE;AACA,sC;AACA,8B;AACA,gD;AACA,S;AACA,K;AACA,qB;AACA,E;;;AAGA,qB;AACA,qB;AACA,+C;AACA,+B;AACA,wB;AACA,2B;AACA,gB;AACA,yB;AACA,oB;AACA,oB;AACA,qB;AACA,iB;AACA,6B;AACA,gB;AACA,yB;AACA,oB;AACA,wB;AACA,0B;AACA,wB;AACA,yB;AACA,wB;AACA,oB;AACA,6B;AACA,uB;AACA,sB;AACA,gB;AACA,uB;AACA,uB;AACA,4B;AACA,uB;AACA,wB;AACA,uB;AACA,wB;AACA,0B;AACA,6B;AACA,yB;AACA,yB;AACA,sB;AACA,yB;AACA,2B;AACA,4B;AACA,4B;AACA,4B;AACA,4B;AACA,yB;AACA,uB;AACA,0B;AACA,sB;AACA,sB;AACA,yB;AACA,wB;AACA,0B;AACA,0B;AACA,mB;AACA,wB;AACA,yB;AACA,mB;AACA,wB;AACA,mB;AACA,oB;AACA,0B;AACA,mB;AACA,uB;AACA,sB;AACA,wB;AACA,qB;AACA,oB;AACA,oB;AACA,uB;AACA,4B;AACA,wB;AACA,2B;AACA,wB;AACA,yB;AACA,wB;AACA,mC;AACA,wB;AACA,yB;AACA,wB;AACA,wB;AACA,0B;AACA,4B;AACA,2B;AACA,0B;AACA,0B;AACA,6B;AACA,0B;AACA,gB;AACA,wB;AACA,oB;AACA,mB;AACA,qB;AACA,+B;AACA,yB;AACA,2B;AACA,2B;AACA,6B;AACA,8B;AACA,gC;AACA,8B;AACA,8B;AACA,2B;AACA,wB;AACA,wB;AACA,uB;AACA,0B;AACA,mB;AACA,sB;AACA,oB;AACA,wB;AACA,qB;AACA,wB;AACA,qB;AACA,4B;AACA,wB;AACA,4B;AACA,4B;AACA,yB;AACA,wB;AACA,mB;AACA,mB;AACA,mB;AACA,yB;AACA,qB;AACA,e;AACA,wB;AACA,wB;AACA,0B;AACA,qB;AACA,yB;AACA,uB;AACA,uB;AACA,qB;AACA,qB;AACA,sB;AACA,wB;AACA,wB;AACA,wB;AACA,mB;AACA,0B;AACA,wB;AACA,kB;AACA,mB;AACA,sB;AACA,qB;AACA,wB;AACA,qB;AACA,oB;AACA,iB;AACA,yB;AACA,kB;AACA,yB;AACA,E;;AAEA,oD;AACA,gD;;;AAGA,Y;AACA,Y;;AAEA,sD;AACA,kB;AACA,sB;AACA,sB;AACA,kC;AACA,8B;AACA,S;AACA,K;AACA,mB;AACA,C;;AAEA,0E;AACA,wB;AACA,sB;;AAEA,qC;AACA,c;AACA,K;;AAEA,a;AACA,C;;AAEA,iD;AACA,0B;AACA,0C;;AAEA,yC;AACA,gD;;AAEA,mD;AACA,yB;AACA,wC;AACA,K;;AAEA,4C;AACA,yC;AACA,iB;AACA,K;;AAEA,oD;AACA,uC;AACA,C;;AAEA,iC;AACA,uB;AACA,uC;AACA,C;;AAEA,mD;AACA,+B;AACA,6B;AACA,C;;AAEA,iG;AACA,0G;AACA,4B;AACA,+E;AACA,C;;AAEA,mD;AACA,0B;AACA,yD;AACA,C;;AAEA,yC;AACA,kB;AACA,4C;AACA,C;;AAEA,+C;AACA,iC;AACA,iB;AACA,4B;AACA,K;;AAEA,a;AACA,C;;AAEA,oC;AACA,iC;AACA,wD;AACA,C;AACA,oC;AACA,iC;AACA,sC;AACA,C;;AAEA,4B;;AAEA,mD;AACA,sC;;AAEA,uD;AACA,4C;;AAEA,qG;AACA,oE;;AAEA,uB;AACA,6D;AACA,+D;AACA,uH;AACA,iJ;;AAEA,Y;AACA,mD;AACA,qD;AACA,mD;AACA,qD;AACA,mD;AACA,mE;AACA,mE;AACA,kF;AACA,M;AACA,K;;AAEA,wB;AACA,gF;AACA,oF;AACA,qC;;AAEA,4E;AACA,sB;AACA,uB;AACA,6B;AACA,qB;AACA,K;AACA,sC;AACA,0D;AACA,K;;AAEA,2D;AACA,4G;AACA,0E;AACA,uG;AACA,c;AACA,6C;AACA,yD;AACA,K;AACA,8C;AACA,sE;AACA,K;AACA,6C;AACA,yD;AACA,K;AACA,8C;AACA,sE;AACA,K;AACA,6C;AACA,yD;AACA,K;AACA,8C;AACA,gB;AACA,6C;AACA,yC;AACA,yC;AACA,yC;AACA,2C;AACA,U;AACA,K;AACA,8C;AACA,gB;AACA,yC;AACA,yC;AACA,yC;AACA,0C;AACA,U;AACA,K;AACA,8C;AACA,gB;AACA,yD;AACA,yD;AACA,yD;AACA,0C;AACA,U;AACA,K;;AAEA,iB;AACA,C;;AAEA,iB;;AAEA,gF;AACA,mB;AACA,gF;;AAEA,S;;AAEA,gF;AACA,U;AACA,oF;;AAEA,S;AACA,qC;AACA,2B;AACA,C;AACA,kB;AACA,uD;AACA,0B;AACA,wB;AACA,K;AACA,C;AACA,U;AACA,2D;AACA,8B;AACA,C;AACA,qC;AACA,M;AACA,8B;AACA,C;;AAEA,K","file":"/packages/aramk:tinycolor.js","sourcesContent":["// TinyColor v1.1.0\n// https://github.com/bgrins/TinyColor\n// Brian Grinstead, MIT License\n\n(function () {\n\n    // global on the server, window in the browser\n    var root = this;\n\n    var _tinycolor = (function() {\n\n////////////////////////////////////////////////////////////////////////////////\n// BEGIN LIBRARY CODE\n////////////////////////////////////////////////////////////////////////////////\n\nvar trimLeft = /^[\\s,#]+/,\n    trimRight = /\\s+$/,\n    tinyCounter = 0,\n    math = Math,\n    mathRound = math.round,\n    mathMin = math.min,\n    mathMax = math.max,\n    mathRandom = math.random;\n\nvar tinycolor = function tinycolor (color, opts) {\n\n    color = (color) ? color : '';\n    opts = opts || { };\n\n    // If input is already a tinycolor, return itself\n    if (color instanceof tinycolor) {\n       return color;\n    }\n    // If we are called as a function, call using new instead\n    if (!(this instanceof tinycolor)) {\n        return new tinycolor(color, opts);\n    }\n\n    var rgb = inputToRGB(color);\n    this._originalInput = color,\n    this._r = rgb.r,\n    this._g = rgb.g,\n    this._b = rgb.b,\n    this._a = rgb.a,\n    this._roundA = mathRound(100*this._a) / 100,\n    this._format = opts.format || rgb.format;\n    this._gradientType = opts.gradientType;\n\n    // Don't let the range of [0,255] come back in [0,1].\n    // Potentially lose a little bit of precision here, but will fix issues where\n    // .5 gets interpreted as half of the total, instead of half of 1\n    // If it was supposed to be 128, this was already taken care of by `inputToRgb`\n    if (this._r < 1) { this._r = mathRound(this._r); }\n    if (this._g < 1) { this._g = mathRound(this._g); }\n    if (this._b < 1) { this._b = mathRound(this._b); }\n\n    this._ok = rgb.ok;\n    this._tc_id = tinyCounter++;\n};\n\ntinycolor.prototype = {\n    isDark: function() {\n        return this.getBrightness() < 128;\n    },\n    isLight: function() {\n        return !this.isDark();\n    },\n    isValid: function() {\n        return this._ok;\n    },\n    getOriginalInput: function() {\n      return this._originalInput;\n    },\n    getFormat: function() {\n        return this._format;\n    },\n    getAlpha: function() {\n        return this._a;\n    },\n    getBrightness: function() {\n        var rgb = this.toRgb();\n        return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;\n    },\n    setAlpha: function(value) {\n        this._a = boundAlpha(value);\n        this._roundA = mathRound(100*this._a) / 100;\n        return this;\n    },\n    toHsv: function() {\n        var hsv = rgbToHsv(this._r, this._g, this._b);\n        return { h: hsv.h * 360, s: hsv.s, v: hsv.v, a: this._a };\n    },\n    toHsvString: function() {\n        var hsv = rgbToHsv(this._r, this._g, this._b);\n        var h = mathRound(hsv.h * 360), s = mathRound(hsv.s * 100), v = mathRound(hsv.v * 100);\n        return (this._a == 1) ?\n          \"hsv(\"  + h + \", \" + s + \"%, \" + v + \"%)\" :\n          \"hsva(\" + h + \", \" + s + \"%, \" + v + \"%, \"+ this._roundA + \")\";\n    },\n    toHsl: function() {\n        var hsl = rgbToHsl(this._r, this._g, this._b);\n        return { h: hsl.h * 360, s: hsl.s, l: hsl.l, a: this._a };\n    },\n    toHslString: function() {\n        var hsl = rgbToHsl(this._r, this._g, this._b);\n        var h = mathRound(hsl.h * 360), s = mathRound(hsl.s * 100), l = mathRound(hsl.l * 100);\n        return (this._a == 1) ?\n          \"hsl(\"  + h + \", \" + s + \"%, \" + l + \"%)\" :\n          \"hsla(\" + h + \", \" + s + \"%, \" + l + \"%, \"+ this._roundA + \")\";\n    },\n    toHex: function(allow3Char) {\n        return rgbToHex(this._r, this._g, this._b, allow3Char);\n    },\n    toHexString: function(allow3Char) {\n        return '#' + this.toHex(allow3Char);\n    },\n    toHex8: function() {\n        return rgbaToHex(this._r, this._g, this._b, this._a);\n    },\n    toHex8String: function() {\n        return '#' + this.toHex8();\n    },\n    toRgb: function() {\n        return { r: mathRound(this._r), g: mathRound(this._g), b: mathRound(this._b), a: this._a };\n    },\n    toRgbString: function() {\n        return (this._a == 1) ?\n          \"rgb(\"  + mathRound(this._r) + \", \" + mathRound(this._g) + \", \" + mathRound(this._b) + \")\" :\n          \"rgba(\" + mathRound(this._r) + \", \" + mathRound(this._g) + \", \" + mathRound(this._b) + \", \" + this._roundA + \")\";\n    },\n    toPercentageRgb: function() {\n        return { r: mathRound(bound01(this._r, 255) * 100) + \"%\", g: mathRound(bound01(this._g, 255) * 100) + \"%\", b: mathRound(bound01(this._b, 255) * 100) + \"%\", a: this._a };\n    },\n    toPercentageRgbString: function() {\n        return (this._a == 1) ?\n          \"rgb(\"  + mathRound(bound01(this._r, 255) * 100) + \"%, \" + mathRound(bound01(this._g, 255) * 100) + \"%, \" + mathRound(bound01(this._b, 255) * 100) + \"%)\" :\n          \"rgba(\" + mathRound(bound01(this._r, 255) * 100) + \"%, \" + mathRound(bound01(this._g, 255) * 100) + \"%, \" + mathRound(bound01(this._b, 255) * 100) + \"%, \" + this._roundA + \")\";\n    },\n    toName: function() {\n        if (this._a === 0) {\n            return \"transparent\";\n        }\n\n        if (this._a < 1) {\n            return false;\n        }\n\n        return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;\n    },\n    toFilter: function(secondColor) {\n        var hex8String = '#' + rgbaToHex(this._r, this._g, this._b, this._a);\n        var secondHex8String = hex8String;\n        var gradientType = this._gradientType ? \"GradientType = 1, \" : \"\";\n\n        if (secondColor) {\n            var s = tinycolor(secondColor);\n            secondHex8String = s.toHex8String();\n        }\n\n        return \"progid:DXImageTransform.Microsoft.gradient(\"+gradientType+\"startColorstr=\"+hex8String+\",endColorstr=\"+secondHex8String+\")\";\n    },\n    toString: function(format) {\n        var formatSet = !!format;\n        format = format || this._format;\n\n        var formattedString = false;\n        var hasAlpha = this._a < 1 && this._a >= 0;\n        var needsAlphaFormat = !formatSet && hasAlpha && (format === \"hex\" || format === \"hex6\" || format === \"hex3\" || format === \"name\");\n\n        if (needsAlphaFormat) {\n            // Special case for \"transparent\", all other non-alpha formats\n            // will return rgba when there is transparency.\n            if (format === \"name\" && this._a === 0) {\n                return this.toName();\n            }\n            return this.toRgbString();\n        }\n        if (format === \"rgb\") {\n            formattedString = this.toRgbString();\n        }\n        if (format === \"prgb\") {\n            formattedString = this.toPercentageRgbString();\n        }\n        if (format === \"hex\" || format === \"hex6\") {\n            formattedString = this.toHexString();\n        }\n        if (format === \"hex3\") {\n            formattedString = this.toHexString(true);\n        }\n        if (format === \"hex8\") {\n            formattedString = this.toHex8String();\n        }\n        if (format === \"name\") {\n            formattedString = this.toName();\n        }\n        if (format === \"hsl\") {\n            formattedString = this.toHslString();\n        }\n        if (format === \"hsv\") {\n            formattedString = this.toHsvString();\n        }\n\n        return formattedString || this.toHexString();\n    },\n\n    _applyModification: function(fn, args) {\n        var color = fn.apply(null, [this].concat([].slice.call(args)));\n        this._r = color._r;\n        this._g = color._g;\n        this._b = color._b;\n        this.setAlpha(color._a);\n        return this;\n    },\n    lighten: function() {\n        return this._applyModification(lighten, arguments);\n    },\n    brighten: function() {\n        return this._applyModification(brighten, arguments);\n    },\n    darken: function() {\n        return this._applyModification(darken, arguments);\n    },\n    desaturate: function() {\n        return this._applyModification(desaturate, arguments);\n    },\n    saturate: function() {\n        return this._applyModification(saturate, arguments);\n    },\n    greyscale: function() {\n        return this._applyModification(greyscale, arguments);\n    },\n    spin: function() {\n        return this._applyModification(spin, arguments);\n    },\n\n    _applyCombination: function(fn, args) {\n        return fn.apply(null, [this].concat([].slice.call(args)));\n    },\n    analogous: function() {\n        return this._applyCombination(analogous, arguments);\n    },\n    complement: function() {\n        return this._applyCombination(complement, arguments);\n    },\n    monochromatic: function() {\n        return this._applyCombination(monochromatic, arguments);\n    },\n    splitcomplement: function() {\n        return this._applyCombination(splitcomplement, arguments);\n    },\n    triad: function() {\n        return this._applyCombination(triad, arguments);\n    },\n    tetrad: function() {\n        return this._applyCombination(tetrad, arguments);\n    }\n};\n\n// If input is an object, force 1 into \"1.0\" to handle ratios properly\n// String input requires \"1.0\" as input, so 1 will be treated as 1\ntinycolor.fromRatio = function(color, opts) {\n    if (typeof color == \"object\") {\n        var newColor = {};\n        for (var i in color) {\n            if (color.hasOwnProperty(i)) {\n                if (i === \"a\") {\n                    newColor[i] = color[i];\n                }\n                else {\n                    newColor[i] = convertToPercentage(color[i]);\n                }\n            }\n        }\n        color = newColor;\n    }\n\n    return tinycolor(color, opts);\n};\n\n// Given a string or object, convert that input to RGB\n// Possible string inputs:\n//\n//     \"red\"\n//     \"#f00\" or \"f00\"\n//     \"#ff0000\" or \"ff0000\"\n//     \"#ff000000\" or \"ff000000\"\n//     \"rgb 255 0 0\" or \"rgb (255, 0, 0)\"\n//     \"rgb 1.0 0 0\" or \"rgb (1, 0, 0)\"\n//     \"rgba (255, 0, 0, 1)\" or \"rgba 255, 0, 0, 1\"\n//     \"rgba (1.0, 0, 0, 1)\" or \"rgba 1.0, 0, 0, 1\"\n//     \"hsl(0, 100%, 50%)\" or \"hsl 0 100% 50%\"\n//     \"hsla(0, 100%, 50%, 1)\" or \"hsla 0 100% 50%, 1\"\n//     \"hsv(0, 100%, 100%)\" or \"hsv 0 100% 100%\"\n//\nfunction inputToRGB(color) {\n\n    var rgb = { r: 0, g: 0, b: 0 };\n    var a = 1;\n    var ok = false;\n    var format = false;\n\n    if (typeof color == \"string\") {\n        color = stringInputToObject(color);\n    }\n\n    if (typeof color == \"object\") {\n        if (color.hasOwnProperty(\"r\") && color.hasOwnProperty(\"g\") && color.hasOwnProperty(\"b\")) {\n            rgb = rgbToRgb(color.r, color.g, color.b);\n            ok = true;\n            format = String(color.r).substr(-1) === \"%\" ? \"prgb\" : \"rgb\";\n        }\n        else if (color.hasOwnProperty(\"h\") && color.hasOwnProperty(\"s\") && color.hasOwnProperty(\"v\")) {\n            color.s = convertToPercentage(color.s);\n            color.v = convertToPercentage(color.v);\n            rgb = hsvToRgb(color.h, color.s, color.v);\n            ok = true;\n            format = \"hsv\";\n        }\n        else if (color.hasOwnProperty(\"h\") && color.hasOwnProperty(\"s\") && color.hasOwnProperty(\"l\")) {\n            color.s = convertToPercentage(color.s);\n            color.l = convertToPercentage(color.l);\n            rgb = hslToRgb(color.h, color.s, color.l);\n            ok = true;\n            format = \"hsl\";\n        }\n\n        if (color.hasOwnProperty(\"a\")) {\n            a = color.a;\n        }\n    }\n\n    a = boundAlpha(a);\n\n    return {\n        ok: ok,\n        format: color.format || format,\n        r: mathMin(255, mathMax(rgb.r, 0)),\n        g: mathMin(255, mathMax(rgb.g, 0)),\n        b: mathMin(255, mathMax(rgb.b, 0)),\n        a: a\n    };\n}\n\n\n// Conversion Functions\n// --------------------\n\n// `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:\n// <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>\n\n// `rgbToRgb`\n// Handle bounds / percentage checking to conform to CSS color spec\n// <http://www.w3.org/TR/css3-color/>\n// *Assumes:* r, g, b in [0, 255] or [0, 1]\n// *Returns:* { r, g, b } in [0, 255]\nfunction rgbToRgb(r, g, b){\n    return {\n        r: bound01(r, 255) * 255,\n        g: bound01(g, 255) * 255,\n        b: bound01(b, 255) * 255\n    };\n}\n\n// `rgbToHsl`\n// Converts an RGB color value to HSL.\n// *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]\n// *Returns:* { h, s, l } in [0,1]\nfunction rgbToHsl(r, g, b) {\n\n    r = bound01(r, 255);\n    g = bound01(g, 255);\n    b = bound01(b, 255);\n\n    var max = mathMax(r, g, b), min = mathMin(r, g, b);\n    var h, s, l = (max + min) / 2;\n\n    if(max == min) {\n        h = s = 0; // achromatic\n    }\n    else {\n        var d = max - min;\n        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n        switch(max) {\n            case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n            case g: h = (b - r) / d + 2; break;\n            case b: h = (r - g) / d + 4; break;\n        }\n\n        h /= 6;\n    }\n\n    return { h: h, s: s, l: l };\n}\n\n// `hslToRgb`\n// Converts an HSL color value to RGB.\n// *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]\n// *Returns:* { r, g, b } in the set [0, 255]\nfunction hslToRgb(h, s, l) {\n    var r, g, b;\n\n    h = bound01(h, 360);\n    s = bound01(s, 100);\n    l = bound01(l, 100);\n\n    function hue2rgb(p, q, t) {\n        if(t < 0) t += 1;\n        if(t > 1) t -= 1;\n        if(t < 1/6) return p + (q - p) * 6 * t;\n        if(t < 1/2) return q;\n        if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;\n        return p;\n    }\n\n    if(s === 0) {\n        r = g = b = l; // achromatic\n    }\n    else {\n        var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n        var p = 2 * l - q;\n        r = hue2rgb(p, q, h + 1/3);\n        g = hue2rgb(p, q, h);\n        b = hue2rgb(p, q, h - 1/3);\n    }\n\n    return { r: r * 255, g: g * 255, b: b * 255 };\n}\n\n// `rgbToHsv`\n// Converts an RGB color value to HSV\n// *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]\n// *Returns:* { h, s, v } in [0,1]\nfunction rgbToHsv(r, g, b) {\n\n    r = bound01(r, 255);\n    g = bound01(g, 255);\n    b = bound01(b, 255);\n\n    var max = mathMax(r, g, b), min = mathMin(r, g, b);\n    var h, s, v = max;\n\n    var d = max - min;\n    s = max === 0 ? 0 : d / max;\n\n    if(max == min) {\n        h = 0; // achromatic\n    }\n    else {\n        switch(max) {\n            case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n            case g: h = (b - r) / d + 2; break;\n            case b: h = (r - g) / d + 4; break;\n        }\n        h /= 6;\n    }\n    return { h: h, s: s, v: v };\n}\n\n// `hsvToRgb`\n// Converts an HSV color value to RGB.\n// *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]\n// *Returns:* { r, g, b } in the set [0, 255]\n function hsvToRgb(h, s, v) {\n\n    h = bound01(h, 360) * 6;\n    s = bound01(s, 100);\n    v = bound01(v, 100);\n\n    var i = math.floor(h),\n        f = h - i,\n        p = v * (1 - s),\n        q = v * (1 - f * s),\n        t = v * (1 - (1 - f) * s),\n        mod = i % 6,\n        r = [v, q, p, p, t, v][mod],\n        g = [t, v, v, q, p, p][mod],\n        b = [p, p, t, v, v, q][mod];\n\n    return { r: r * 255, g: g * 255, b: b * 255 };\n}\n\n// `rgbToHex`\n// Converts an RGB color to hex\n// Assumes r, g, and b are contained in the set [0, 255]\n// Returns a 3 or 6 character hex\nfunction rgbToHex(r, g, b, allow3Char) {\n\n    var hex = [\n        pad2(mathRound(r).toString(16)),\n        pad2(mathRound(g).toString(16)),\n        pad2(mathRound(b).toString(16))\n    ];\n\n    // Return a 3 character hex if possible\n    if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {\n        return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);\n    }\n\n    return hex.join(\"\");\n}\n    // `rgbaToHex`\n    // Converts an RGBA color plus alpha transparency to hex\n    // Assumes r, g, b and a are contained in the set [0, 255]\n    // Returns an 8 character hex\n    function rgbaToHex(r, g, b, a) {\n\n        var hex = [\n            pad2(convertDecimalToHex(a)),\n            pad2(mathRound(r).toString(16)),\n            pad2(mathRound(g).toString(16)),\n            pad2(mathRound(b).toString(16))\n        ];\n\n        return hex.join(\"\");\n    }\n\n// `equals`\n// Can be called with any tinycolor input\ntinycolor.equals = function (color1, color2) {\n    if (!color1 || !color2) { return false; }\n    return tinycolor(color1).toRgbString() == tinycolor(color2).toRgbString();\n};\ntinycolor.random = function() {\n    return tinycolor.fromRatio({\n        r: mathRandom(),\n        g: mathRandom(),\n        b: mathRandom()\n    });\n};\n\n\n// Modification Functions\n// ----------------------\n// Thanks to less.js for some of the basics here\n// <https://github.com/cloudhead/less.js/blob/master/lib/less/functions.js>\n\nfunction desaturate(color, amount) {\n    amount = (amount === 0) ? 0 : (amount || 10);\n    var hsl = tinycolor(color).toHsl();\n    hsl.s -= amount / 100;\n    hsl.s = clamp01(hsl.s);\n    return tinycolor(hsl);\n}\n\nfunction saturate(color, amount) {\n    amount = (amount === 0) ? 0 : (amount || 10);\n    var hsl = tinycolor(color).toHsl();\n    hsl.s += amount / 100;\n    hsl.s = clamp01(hsl.s);\n    return tinycolor(hsl);\n}\n\nfunction greyscale(color) {\n    return tinycolor(color).desaturate(100);\n}\n\nfunction lighten (color, amount) {\n    amount = (amount === 0) ? 0 : (amount || 10);\n    var hsl = tinycolor(color).toHsl();\n    hsl.l += amount / 100;\n    hsl.l = clamp01(hsl.l);\n    return tinycolor(hsl);\n}\n\nfunction brighten(color, amount) {\n    amount = (amount === 0) ? 0 : (amount || 10);\n    var rgb = tinycolor(color).toRgb();\n    rgb.r = mathMax(0, mathMin(255, rgb.r - mathRound(255 * - (amount / 100))));\n    rgb.g = mathMax(0, mathMin(255, rgb.g - mathRound(255 * - (amount / 100))));\n    rgb.b = mathMax(0, mathMin(255, rgb.b - mathRound(255 * - (amount / 100))));\n    return tinycolor(rgb);\n}\n\nfunction darken (color, amount) {\n    amount = (amount === 0) ? 0 : (amount || 10);\n    var hsl = tinycolor(color).toHsl();\n    hsl.l -= amount / 100;\n    hsl.l = clamp01(hsl.l);\n    return tinycolor(hsl);\n}\n\n// Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.\n// Values outside of this range will be wrapped into this range.\nfunction spin(color, amount) {\n    var hsl = tinycolor(color).toHsl();\n    var hue = (mathRound(hsl.h) + amount) % 360;\n    hsl.h = hue < 0 ? 360 + hue : hue;\n    return tinycolor(hsl);\n}\n\n// Combination Functions\n// ---------------------\n// Thanks to jQuery xColor for some of the ideas behind these\n// <https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js>\n\nfunction complement(color) {\n    var hsl = tinycolor(color).toHsl();\n    hsl.h = (hsl.h + 180) % 360;\n    return tinycolor(hsl);\n}\n\nfunction triad(color) {\n    var hsl = tinycolor(color).toHsl();\n    var h = hsl.h;\n    return [\n        tinycolor(color),\n        tinycolor({ h: (h + 120) % 360, s: hsl.s, l: hsl.l }),\n        tinycolor({ h: (h + 240) % 360, s: hsl.s, l: hsl.l })\n    ];\n}\n\nfunction tetrad(color) {\n    var hsl = tinycolor(color).toHsl();\n    var h = hsl.h;\n    return [\n        tinycolor(color),\n        tinycolor({ h: (h + 90) % 360, s: hsl.s, l: hsl.l }),\n        tinycolor({ h: (h + 180) % 360, s: hsl.s, l: hsl.l }),\n        tinycolor({ h: (h + 270) % 360, s: hsl.s, l: hsl.l })\n    ];\n}\n\nfunction splitcomplement(color) {\n    var hsl = tinycolor(color).toHsl();\n    var h = hsl.h;\n    return [\n        tinycolor(color),\n        tinycolor({ h: (h + 72) % 360, s: hsl.s, l: hsl.l}),\n        tinycolor({ h: (h + 216) % 360, s: hsl.s, l: hsl.l})\n    ];\n}\n\nfunction analogous(color, results, slices) {\n    results = results || 6;\n    slices = slices || 30;\n\n    var hsl = tinycolor(color).toHsl();\n    var part = 360 / slices;\n    var ret = [tinycolor(color)];\n\n    for (hsl.h = ((hsl.h - (part * results >> 1)) + 720) % 360; --results; ) {\n        hsl.h = (hsl.h + part) % 360;\n        ret.push(tinycolor(hsl));\n    }\n    return ret;\n}\n\nfunction monochromatic(color, results) {\n    results = results || 6;\n    var hsv = tinycolor(color).toHsv();\n    var h = hsv.h, s = hsv.s, v = hsv.v;\n    var ret = [];\n    var modification = 1 / results;\n\n    while (results--) {\n        ret.push(tinycolor({ h: h, s: s, v: v}));\n        v = (v + modification) % 1;\n    }\n\n    return ret;\n}\n\n// Utility Functions\n// ---------------------\n\ntinycolor.mix = function(color1, color2, amount) {\n    amount = (amount === 0) ? 0 : (amount || 50);\n\n    var rgb1 = tinycolor(color1).toRgb();\n    var rgb2 = tinycolor(color2).toRgb();\n\n    var p = amount / 100;\n    var w = p * 2 - 1;\n    var a = rgb2.a - rgb1.a;\n\n    var w1;\n\n    if (w * a == -1) {\n        w1 = w;\n    } else {\n        w1 = (w + a) / (1 + w * a);\n    }\n\n    w1 = (w1 + 1) / 2;\n\n    var w2 = 1 - w1;\n\n    var rgba = {\n        r: rgb2.r * w1 + rgb1.r * w2,\n        g: rgb2.g * w1 + rgb1.g * w2,\n        b: rgb2.b * w1 + rgb1.b * w2,\n        a: rgb2.a * p  + rgb1.a * (1 - p)\n    };\n\n    return tinycolor(rgba);\n};\n\n\n// Readability Functions\n// ---------------------\n// <http://www.w3.org/TR/AERT#color-contrast>\n\n// `readability`\n// Analyze the 2 colors and returns an object with the following properties:\n//    `brightness`: difference in brightness between the two colors\n//    `color`: difference in color/hue between the two colors\ntinycolor.readability = function(color1, color2) {\n    var c1 = tinycolor(color1);\n    var c2 = tinycolor(color2);\n    var rgb1 = c1.toRgb();\n    var rgb2 = c2.toRgb();\n    var brightnessA = c1.getBrightness();\n    var brightnessB = c2.getBrightness();\n    var colorDiff = (\n        Math.max(rgb1.r, rgb2.r) - Math.min(rgb1.r, rgb2.r) +\n        Math.max(rgb1.g, rgb2.g) - Math.min(rgb1.g, rgb2.g) +\n        Math.max(rgb1.b, rgb2.b) - Math.min(rgb1.b, rgb2.b)\n    );\n\n    return {\n        brightness: Math.abs(brightnessA - brightnessB),\n        color: colorDiff\n    };\n};\n\n// `readable`\n// http://www.w3.org/TR/AERT#color-contrast\n// Ensure that foreground and background color combinations provide sufficient contrast.\n// *Example*\n//    tinycolor.isReadable(\"#000\", \"#111\") => false\ntinycolor.isReadable = function(color1, color2) {\n    var readability = tinycolor.readability(color1, color2);\n    return readability.brightness > 125 && readability.color > 500;\n};\n\n// `mostReadable`\n// Given a base color and a list of possible foreground or background\n// colors for that base, returns the most readable color.\n// *Example*\n//    tinycolor.mostReadable(\"#123\", [\"#fff\", \"#000\"]) => \"#000\"\ntinycolor.mostReadable = function(baseColor, colorList) {\n    var bestColor = null;\n    var bestScore = 0;\n    var bestIsReadable = false;\n    for (var i=0; i < colorList.length; i++) {\n\n        // We normalize both around the \"acceptable\" breaking point,\n        // but rank brightness constrast higher than hue.\n\n        var readability = tinycolor.readability(baseColor, colorList[i]);\n        var readable = readability.brightness > 125 && readability.color > 500;\n        var score = 3 * (readability.brightness / 125) + (readability.color / 500);\n\n        if ((readable && ! bestIsReadable) ||\n            (readable && bestIsReadable && score > bestScore) ||\n            ((! readable) && (! bestIsReadable) && score > bestScore)) {\n            bestIsReadable = readable;\n            bestScore = score;\n            bestColor = tinycolor(colorList[i]);\n        }\n    }\n    return bestColor;\n};\n\n\n// Big List of Colors\n// ------------------\n// <http://www.w3.org/TR/css3-color/#svg-color>\nvar names = tinycolor.names = {\n    aliceblue: \"f0f8ff\",\n    antiquewhite: \"faebd7\",\n    aqua: \"0ff\",\n    aquamarine: \"7fffd4\",\n    azure: \"f0ffff\",\n    beige: \"f5f5dc\",\n    bisque: \"ffe4c4\",\n    black: \"000\",\n    blanchedalmond: \"ffebcd\",\n    blue: \"00f\",\n    blueviolet: \"8a2be2\",\n    brown: \"a52a2a\",\n    burlywood: \"deb887\",\n    burntsienna: \"ea7e5d\",\n    cadetblue: \"5f9ea0\",\n    chartreuse: \"7fff00\",\n    chocolate: \"d2691e\",\n    coral: \"ff7f50\",\n    cornflowerblue: \"6495ed\",\n    cornsilk: \"fff8dc\",\n    crimson: \"dc143c\",\n    cyan: \"0ff\",\n    darkblue: \"00008b\",\n    darkcyan: \"008b8b\",\n    darkgoldenrod: \"b8860b\",\n    darkgray: \"a9a9a9\",\n    darkgreen: \"006400\",\n    darkgrey: \"a9a9a9\",\n    darkkhaki: \"bdb76b\",\n    darkmagenta: \"8b008b\",\n    darkolivegreen: \"556b2f\",\n    darkorange: \"ff8c00\",\n    darkorchid: \"9932cc\",\n    darkred: \"8b0000\",\n    darksalmon: \"e9967a\",\n    darkseagreen: \"8fbc8f\",\n    darkslateblue: \"483d8b\",\n    darkslategray: \"2f4f4f\",\n    darkslategrey: \"2f4f4f\",\n    darkturquoise: \"00ced1\",\n    darkviolet: \"9400d3\",\n    deeppink: \"ff1493\",\n    deepskyblue: \"00bfff\",\n    dimgray: \"696969\",\n    dimgrey: \"696969\",\n    dodgerblue: \"1e90ff\",\n    firebrick: \"b22222\",\n    floralwhite: \"fffaf0\",\n    forestgreen: \"228b22\",\n    fuchsia: \"f0f\",\n    gainsboro: \"dcdcdc\",\n    ghostwhite: \"f8f8ff\",\n    gold: \"ffd700\",\n    goldenrod: \"daa520\",\n    gray: \"808080\",\n    green: \"008000\",\n    greenyellow: \"adff2f\",\n    grey: \"808080\",\n    honeydew: \"f0fff0\",\n    hotpink: \"ff69b4\",\n    indianred: \"cd5c5c\",\n    indigo: \"4b0082\",\n    ivory: \"fffff0\",\n    khaki: \"f0e68c\",\n    lavender: \"e6e6fa\",\n    lavenderblush: \"fff0f5\",\n    lawngreen: \"7cfc00\",\n    lemonchiffon: \"fffacd\",\n    lightblue: \"add8e6\",\n    lightcoral: \"f08080\",\n    lightcyan: \"e0ffff\",\n    lightgoldenrodyellow: \"fafad2\",\n    lightgray: \"d3d3d3\",\n    lightgreen: \"90ee90\",\n    lightgrey: \"d3d3d3\",\n    lightpink: \"ffb6c1\",\n    lightsalmon: \"ffa07a\",\n    lightseagreen: \"20b2aa\",\n    lightskyblue: \"87cefa\",\n    lightslategray: \"789\",\n    lightslategrey: \"789\",\n    lightsteelblue: \"b0c4de\",\n    lightyellow: \"ffffe0\",\n    lime: \"0f0\",\n    limegreen: \"32cd32\",\n    linen: \"faf0e6\",\n    magenta: \"f0f\",\n    maroon: \"800000\",\n    mediumaquamarine: \"66cdaa\",\n    mediumblue: \"0000cd\",\n    mediumorchid: \"ba55d3\",\n    mediumpurple: \"9370db\",\n    mediumseagreen: \"3cb371\",\n    mediumslateblue: \"7b68ee\",\n    mediumspringgreen: \"00fa9a\",\n    mediumturquoise: \"48d1cc\",\n    mediumvioletred: \"c71585\",\n    midnightblue: \"191970\",\n    mintcream: \"f5fffa\",\n    mistyrose: \"ffe4e1\",\n    moccasin: \"ffe4b5\",\n    navajowhite: \"ffdead\",\n    navy: \"000080\",\n    oldlace: \"fdf5e6\",\n    olive: \"808000\",\n    olivedrab: \"6b8e23\",\n    orange: \"ffa500\",\n    orangered: \"ff4500\",\n    orchid: \"da70d6\",\n    palegoldenrod: \"eee8aa\",\n    palegreen: \"98fb98\",\n    paleturquoise: \"afeeee\",\n    palevioletred: \"db7093\",\n    papayawhip: \"ffefd5\",\n    peachpuff: \"ffdab9\",\n    peru: \"cd853f\",\n    pink: \"ffc0cb\",\n    plum: \"dda0dd\",\n    powderblue: \"b0e0e6\",\n    purple: \"800080\",\n    red: \"f00\",\n    rosybrown: \"bc8f8f\",\n    royalblue: \"4169e1\",\n    saddlebrown: \"8b4513\",\n    salmon: \"fa8072\",\n    sandybrown: \"f4a460\",\n    seagreen: \"2e8b57\",\n    seashell: \"fff5ee\",\n    sienna: \"a0522d\",\n    silver: \"c0c0c0\",\n    skyblue: \"87ceeb\",\n    slateblue: \"6a5acd\",\n    slategray: \"708090\",\n    slategrey: \"708090\",\n    snow: \"fffafa\",\n    springgreen: \"00ff7f\",\n    steelblue: \"4682b4\",\n    tan: \"d2b48c\",\n    teal: \"008080\",\n    thistle: \"d8bfd8\",\n    tomato: \"ff6347\",\n    turquoise: \"40e0d0\",\n    violet: \"ee82ee\",\n    wheat: \"f5deb3\",\n    white: \"fff\",\n    whitesmoke: \"f5f5f5\",\n    yellow: \"ff0\",\n    yellowgreen: \"9acd32\"\n};\n\n// Make it easy to access colors via `hexNames[hex]`\nvar hexNames = tinycolor.hexNames = flip(names);\n\n\n// Utilities\n// ---------\n\n// `{ 'name1': 'val1' }` becomes `{ 'val1': 'name1' }`\nfunction flip(o) {\n    var flipped = { };\n    for (var i in o) {\n        if (o.hasOwnProperty(i)) {\n            flipped[o[i]] = i;\n        }\n    }\n    return flipped;\n}\n\n// Return a valid alpha value [0,1] with all invalid values being set to 1\nfunction boundAlpha(a) {\n    a = parseFloat(a);\n\n    if (isNaN(a) || a < 0 || a > 1) {\n        a = 1;\n    }\n\n    return a;\n}\n\n// Take input from [0, n] and return it as [0, 1]\nfunction bound01(n, max) {\n    if (isOnePointZero(n)) { n = \"100%\"; }\n\n    var processPercent = isPercentage(n);\n    n = mathMin(max, mathMax(0, parseFloat(n)));\n\n    // Automatically convert percentage into number\n    if (processPercent) {\n        n = parseInt(n * max, 10) / 100;\n    }\n\n    // Handle floating point rounding errors\n    if ((math.abs(n - max) < 0.000001)) {\n        return 1;\n    }\n\n    // Convert into [0, 1] range if it isn't already\n    return (n % max) / parseFloat(max);\n}\n\n// Force a number between 0 and 1\nfunction clamp01(val) {\n    return mathMin(1, mathMax(0, val));\n}\n\n// Parse a base-16 hex value into a base-10 integer\nfunction parseIntFromHex(val) {\n    return parseInt(val, 16);\n}\n\n// Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1\n// <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>\nfunction isOnePointZero(n) {\n    return typeof n == \"string\" && n.indexOf('.') != -1 && parseFloat(n) === 1;\n}\n\n// Check to see if string passed in is a percentage\nfunction isPercentage(n) {\n    return typeof n === \"string\" && n.indexOf('%') != -1;\n}\n\n// Force a hex value to have 2 characters\nfunction pad2(c) {\n    return c.length == 1 ? '0' + c : '' + c;\n}\n\n// Replace a decimal with it's percentage value\nfunction convertToPercentage(n) {\n    if (n <= 1) {\n        n = (n * 100) + \"%\";\n    }\n\n    return n;\n}\n\n// Converts a decimal to a hex value\nfunction convertDecimalToHex(d) {\n    return Math.round(parseFloat(d) * 255).toString(16);\n}\n// Converts a hex value to a decimal\nfunction convertHexToDecimal(h) {\n    return (parseIntFromHex(h) / 255);\n}\n\nvar matchers = (function() {\n\n    // <http://www.w3.org/TR/css3-values/#integers>\n    var CSS_INTEGER = \"[-\\\\+]?\\\\d+%?\";\n\n    // <http://www.w3.org/TR/css3-values/#number-value>\n    var CSS_NUMBER = \"[-\\\\+]?\\\\d*\\\\.\\\\d+%?\";\n\n    // Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.\n    var CSS_UNIT = \"(?:\" + CSS_NUMBER + \")|(?:\" + CSS_INTEGER + \")\";\n\n    // Actual matching.\n    // Parentheses and commas are optional, but not required.\n    // Whitespace can take the place of commas or opening paren\n    var PERMISSIVE_MATCH3 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\";\n    var PERMISSIVE_MATCH4 = \"[\\\\s|\\\\(]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")[,|\\\\s]+(\" + CSS_UNIT + \")\\\\s*\\\\)?\";\n\n    return {\n        rgb: new RegExp(\"rgb\" + PERMISSIVE_MATCH3),\n        rgba: new RegExp(\"rgba\" + PERMISSIVE_MATCH4),\n        hsl: new RegExp(\"hsl\" + PERMISSIVE_MATCH3),\n        hsla: new RegExp(\"hsla\" + PERMISSIVE_MATCH4),\n        hsv: new RegExp(\"hsv\" + PERMISSIVE_MATCH3),\n        hex3: /^([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n        hex6: /^([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\n        hex8: /^([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/\n    };\n})();\n\n// `stringInputToObject`\n// Permissive string parsing.  Take in a number of formats, and output an object\n// based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`\nfunction stringInputToObject(color) {\n\n    color = color.replace(trimLeft,'').replace(trimRight, '').toLowerCase();\n    var named = false;\n    if (names[color]) {\n        color = names[color];\n        named = true;\n    }\n    else if (color == 'transparent') {\n        return { r: 0, g: 0, b: 0, a: 0, format: \"name\" };\n    }\n\n    // Try to match string input using regular expressions.\n    // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]\n    // Just return an object and let the conversion functions handle that.\n    // This way the result will be the same whether the tinycolor is initialized with string or object.\n    var match;\n    if ((match = matchers.rgb.exec(color))) {\n        return { r: match[1], g: match[2], b: match[3] };\n    }\n    if ((match = matchers.rgba.exec(color))) {\n        return { r: match[1], g: match[2], b: match[3], a: match[4] };\n    }\n    if ((match = matchers.hsl.exec(color))) {\n        return { h: match[1], s: match[2], l: match[3] };\n    }\n    if ((match = matchers.hsla.exec(color))) {\n        return { h: match[1], s: match[2], l: match[3], a: match[4] };\n    }\n    if ((match = matchers.hsv.exec(color))) {\n        return { h: match[1], s: match[2], v: match[3] };\n    }\n    if ((match = matchers.hex8.exec(color))) {\n        return {\n            a: convertHexToDecimal(match[1]),\n            r: parseIntFromHex(match[2]),\n            g: parseIntFromHex(match[3]),\n            b: parseIntFromHex(match[4]),\n            format: named ? \"name\" : \"hex8\"\n        };\n    }\n    if ((match = matchers.hex6.exec(color))) {\n        return {\n            r: parseIntFromHex(match[1]),\n            g: parseIntFromHex(match[2]),\n            b: parseIntFromHex(match[3]),\n            format: named ? \"name\" : \"hex\"\n        };\n    }\n    if ((match = matchers.hex3.exec(color))) {\n        return {\n            r: parseIntFromHex(match[1] + '' + match[1]),\n            g: parseIntFromHex(match[2] + '' + match[2]),\n            b: parseIntFromHex(match[3] + '' + match[3]),\n            format: named ? \"name\" : \"hex\"\n        };\n    }\n\n    return false;\n}\n\nreturn tinycolor;\n\n////////////////////////////////////////////////////////////////////////////////\n// END LIBRARY CODE\n////////////////////////////////////////////////////////////////////////////////\n\n    })();\n\n////////////////////////////////////////////////////////////////////////////////\n// EXPORTS\n////////////////////////////////////////////////////////////////////////////////    \n\n// Meteor\nif (typeof Package !== 'undefined') {\n    tinycolor = _tinycolor;\n}\n// AMD / RequireJS\nelse if (typeof define !== 'undefined' && define.amd) {\n  define([], function () {\n      return _tinycolor;\n  });\n}\n// Node.js\nelse if (typeof module !== 'undefined' && module.exports) {\n  module.exports = _tinycolor;\n}\n// included directly via <script> tag\nelse {\n  root.tinycolor = _tinycolor;\n}\n\n})();\n"]}