{"version":3,"sources":["telescope:pages/lib/pages.js","telescope:pages/lib/server/publications.js","telescope:pages//Users/sacha/Dev/Telescope/packages/telescope-pages/i18n/en.i18n.json"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,sC;;AAEA,iC;AACA,U;AACA,gB;AACA,I;AACA,S;AACA,iB;AACA,kB;AACA,I;AACA,Y;AACA,iB;AACA,e;AACA,c;AACA,K;AACA,I;AACA,U;AACA,iB;AACA,kB;AACA,G;AACA,G;;;AAGA,gC;;AAEA,iC;;AAEA,4C;AACA,+C;AACA,gB;AACA,kD;AACA,G;;AAEA,qC;AACA,yB;AACA,U;AACA,G;;AAEA,oC;AACA,yB;AACA,U;AACA,G;;AAEA,4B;AACA,e;AACA,+B;AACA,+B;AACA,8B;AACA,K;;AAEA,kB;AACA,iD;AACA,oE;AACA,K;AACA,K;AACA,G;;;;;;;;;;;;;;;;;;;ACvDA,oC;AACA,wB;AACA,G;;;;;;;;;;;;;;;;;;;ACFA,6B;AACA,6B;AACA,0B;;AAEA,gC;AACA,yD;AACA,C;AACA,+G;AACA,sD;AACA,gD;AACA,kB;AACA,wE;AACA,gD","file":"/packages/telescope_pages.js","sourcesContent":["Pages = new Mongo.Collection('pages');\n\nPages.schema = new SimpleSchema({\n  title: {\n    type: String\n  },\n  slug: {\n    type: String,\n    optional: true\n  },\n  content: {\n    type: String,\n    autoform: {\n      rows: 10\n    }\n  },\n  order: {\n    type: Number,\n    optional: true\n  }\n});\n\n\nPages.schema.internationalize();\n\nPages.attachSchema(Pages.schema);\n\nPages.before.insert(function (userId, doc) {\n  // if no slug has been provided, generate one\n  if (!doc.slug)\n    doc.slug = Telescope.utils.slugify(doc.title);\n});\n\nTelescope.modules.add(\"primaryNav\", {\n  template: \"pages_menu\",\n  order: 5\n});\n\nTelescope.modules.add(\"mobileNav\", {\n  template: 'pages_menu',\n  order: 5\n});\n\nMeteor.startup(function () {\n  Pages.allow({\n    insert: Users.is.adminById,\n    update: Users.is.adminById,\n    remove: Users.is.adminById\n  });\n\n  Meteor.methods({\n    insertPage: function(pageTitle, pageContent){\n      return Feeds.insert({title: pageTitle, content: pageContent});\n    }\n  });\n});\n","Meteor.publish('pages', function() {\n  return Pages.find({});\n});\n","var _ = Package.underscore._,\n    package_name = \"project\",\n    namespace = \"project\";\n\nif (package_name != \"project\") {\n    namespace = TAPi18n.packages[package_name].namespace;\n}\nTAPi18n._enable({\"helper_name\":\"_\",\"supported_languages\":null,\"i18n_files_route\":\"/tap-i18n\",\"cdn_path\":null});\nTAPi18n.languages_names[\"en\"] = [\"English\",\"English\"];\n// integrate the fallback language translations \ntranslations = {};\ntranslations[namespace] = {\"manage_static_pages\":\"Manage static pages\"};\nTAPi18n._loadLangFileObject(\"en\", translations);\n"]}