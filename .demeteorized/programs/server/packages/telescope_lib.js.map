{"version":3,"sources":["telescope:lib/lib/core.js","telescope:lib/lib/utils.js","telescope:lib/lib/callbacks.js","telescope:lib/lib/collections.js","telescope:lib/lib/modules.js","telescope:lib/lib/config.js","telescope:lib/lib/deep.js","telescope:lib/lib/deep_extend.js","telescope:lib/lib/autolink.js","telescope:lib/lib/themes.js","telescope:lib/lib/menus.js","telescope:lib/lib/base.js","telescope:lib/lib/colors.js","telescope:lib/lib/icons.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,G;AACA,+C;AACA,uB;AACA,G;;AAEA,e;;AAEA,6B;;;;;;;;;;;;;;;;;;ACPA,G;AACA,4C;AACA,6B;AACA,G;AACA,qB;;AAEA,G;AACA,0D;AACA,G;AACA,yC;AACA,uD;AACA,E;;AAEA,G;AACA,sD;AACA,sB;AACA,G;AACA,6C;AACA,sF;AACA,E;;AAEA,G;AACA,kE;AACA,sB;AACA,G;AACA,kD;AACA,+B;AACA,E;;AAEA,G;AACA,gD;AACA,sB;AACA,G;AACA,6C;AACA,2F;AACA,E;;AAEA,G;AACA,mD;AACA,sB;AACA,G;AACA,8C;AACA,iD;AACA,E;;AAEA,G;AACA,yE;AACA,wC;AACA,kE;AACA,G;AACA,mD;AACA,0C;AACA,kC;AACA,mC;AACA,W;AACA,E;;AAEA,G;AACA,uB;AACA,sB;AACA,G;AACA,4C;AACA,oD;AACA,E;;AAEA,iD;AACA,mD;AACA,gD;AACA,uC;AACA,sB;AACA,U;AACA,oB;AACA,G;AACA,E;;AAEA,uC;AACA,qB;AACA,iG;AACA,E;;AAEA,uC;AACA,0B;AACA,mF;AACA,E;;AAEA,mD;AACA,gD;AACA,E;;AAEA,qD;AACA,+B;AACA,sD;AACA,e;AACA,sD;AACA,kD;AACA,iG;AACA,gG;AACA,e;AACA,E;;AAEA,0B;AACA,0B;AACA,0B;;AAEA,iE;AACA,mE;AACA,wC;AACA,oE;AACA,0B;AACA,yB;AACA,c;AACA,iB;AACA,W;AACA,I;AACA,e;AACA,E;;AAEA,2C;AACA,sC;AACA,E;AACA,2C;AACA,sC;AACA,E;AACA,2C;AACA,kD;AACA,E;AACA,+C;AACA,kD;AACA,E;;AAEA,8C;AACA,sD;AACA,E;;AAEA,iE;AACA,yC;AACA,gD;AACA,gB;AACA,wB;AACA,K;AACA,E;;AAEA,0C;AACA,W;AACA,qD;AACA,qC;AACA,8B;AACA,G;AACA,c;AACA,E;;AAEA,8C;AACA,mC;AACA,E;;AAEA,2C;AACA,qC;AACA,2D;AACA,E;;AAEA,6C;AACA,gF;AACA,E;;AAEA,6B;AACA,6B;AACA,6B;;AAEA,uC;AACA,2B;AACA,E;;AAEA,wC;AACA,2C;AACA,mB;AACA,sB;AACA,yB;AACA,oB;AACA,6D;AACA,6D;AACA,+D;AACA,+C;AACA,O;AACA,O;AACA,4C;AACA,qB;AACA,G;AACA,W;AACA,E;;AAEA,yC;AACA,yC;AACA,E;;AAEA,6C;AACA,4B;AACA,8B;AACA,E;;AAEA,gG;AACA,8E;AACA,mD;AACA,qB;;AAEA,yC;AACA,uC;AACA,mB;AACA,K;AACA,uB;AACA,G;AACA,c;AACA,E;;AAEA,8B;AACA,kC;AACA,mB;AACA,E;;AAEA,4G;AACA,oD;AACA,4B;AACA,gD;AACA,a;AACA,C;;;;;;;;;;;;;;;;;;;;AC/NA,G;AACA,+E;AACA,iC;AACA,G;AACA,yB;;AAEA,G;AACA,oC;AACA,8C;AACA,qD;AACA,G;AACA,qD;;AAEA,uD;AACA,yD;AACA,mC;AACA,G;;AAEA,2C;AACA,E;;AAEA,G;AACA,gC;AACA,8C;AACA,oE;AACA,G;AACA,gE;AACA,+F;AACA,0C;AACA,K;AACA,E;;AAEA,G;AACA,wD;AACA,8C;AACA,yF;AACA,+F;AACA,6F;AACA,G;AACA,2D;;AAEA,4C;;AAEA,oH;;AAEA,wD;AACA,oC;AACA,wC;AACA,a;;AAEA,kD;AACA,gB;AACA,G;AACA,E;;AAEA,G;AACA,8F;AACA,8C;AACA,yF;AACA,gG;AACA,G;AACA,gE;AACA,E;AACA,4C;;AAEA,kF;;AAEA,2C;AACA,8B;AACA,yE;AACA,4C;AACA,sC;AACA,iC;AACA,S;AACA,O;AACA,E;AACA,U;AACA,gB;AACA,G;AACA,E;;;;;;;;;;;;;;;;;;AC/EA,G;AACA,sB;AACA,0B;AACA,G;;AAEA,G;AACA,+D;AACA,iC;AACA,G;AACA,oE;;AAEA,wB;AACA,uB;;AAEA,8F;;AAEA,4C;AACA,uC;AACA,qD;AACA,K;;AAEA,0C;AACA,uC;AACA,E;;AAEA,G;AACA,gC;AACA,4B;AACA,G;AACA,+D;;AAEA,wB;AACA,oE;;AAEA,0C;AACA,mD;AACA,E;;AAEA,G;AACA,mC;AACA,4E;AACA,2E;AACA,yD;AACA,wE;AACA,0C;AACA,G;AACA,sF;;AAEA,yC;AACA,0C;AACA,qD;AACA,kB;;AAEA,gG;AACA,yC;AACA,8C;AACA,K;;AAEA,0B;AACA,4C;AACA,2E;AACA,6F;;AAEA,E;;AAEA,uE;AACA,4F;AACA,qE;AACA,E;;AAEA,G;AACA,mF;AACA,+B;AACA,G;AACA,uB;;AAEA,G;AACA,yC;AACA,0E;AACA,uE;AACA,G;AACA,4D;AACA,4B;AACA,uE;AACA,kC;AACA,4C;AACA,4B;AACA,kC;AACA,kD;AACA,K;AACA,gB;AACA,E;;AAEA,sD;AACA,4B;AACA,8D;AACA,kC;AACA,0B;AACA,K;AACA,gB;AACA,E;;AAEA,uD;AACA,4B;AACA,8D;AACA,kC;AACA,2B;AACA,K;AACA,gB;AACA,E;;;;;;;;;;;;;;;;;;AC7GA,G;AACA,oF;AACA,+B;AACA,G;;AAEA,uB;;AAEA,G;AACA,kC;AACA,8C;AACA,+E;AACA,4D;AACA,uE;AACA,E;AACA,W;AACA,kC;AACA,kC;AACA,c;AACA,M;AACA,G;AACA,iD;;AAEA,0D;AACA,uD;AACA,iC;AACA,G;;AAEA,8B;;AAEA,6E;AACA,wC;AACA,2C;AACA,O;;AAEA,U;;AAEA,yC;;AAEA,G;AACA,E;;AAEA,G;AACA,8B;AACA,8C;AACA,gE;AACA,G;AACA,sD;AACA,iF;AACA,wC;AACA,K;AACA,E;;AAEA,G;AACA,kC;AACA,8C;AACA,G;AACA,+C;AACA,+B;AACA,E;;AAEA,G;AACA,sD;AACA,8C;AACA,mE;AACA,G;AACA,yC;AACA,oD;AACA,E;;;;;;;;;;;;;;;;;;;ACnEA,G;AACA,oC;AACA,8B;AACA,G;AACA,sB;;AAEA,I;AACA,0B;AACA,qC;AACA,G;AACA,6B;;AAEA,G;AACA,qC;AACA,8D;AACA,G;AACA,2D;AACA,6C;AACA,E;;;;;;;;;;;;;;;;;;;;AClBA,2C;;AAEA,S;;AAEA,2C;AACA,oC;;AAEA,4F;AACA,a;AACA,c;AACA,wB;;AAEA,qB;AACA,+B;;AAEA,iB;AACA,U;;AAEA,qB;AACA,wB;AACA,8D;AACA,O;;AAEA,2B;;AAEA,mB;;AAEA,qB;AACA,Y;AACA,0D;AACA,mC;AACA,K;;AAEA,iB;AACA,G;;AAEA,G;;AAEA,S;AACA,E;AACA,c;AACA,S;AACA,W;AACA,a;AACA,6B;AACA,U;AACA,Q;AACA,M;AACA,K;AACA,E;AACA,iB;AACA,oC;AACA,E;AACA,iB;AACA,uC;AACA,E;AACA,yC;;;AAGA,S;AACA,kC;AACA,uE;AACA,G;AACA,G;;;AAGA,S;;AAEA,6E;AACA,0B;AACA,oB;AACA,uG;AACA,G;;AAEA,G;;;;;;;;;;;;;;;;;;;AC1EA,sF;AACA,0C;AACA,gF;AACA,Y;AACA,gC;AACA,mB;AACA,2C;AACA,+C;AACA,oB;AACA,sC;AACA,oC;AACA,oC;AACA,wC;AACA,kC;AACA,gC;AACA,oC;AACA,mC;AACA,Q;AACA,gB;AACA,oC;AACA,iD;AACA,U;AACA,iC;AACA,wB;AACA,8C;AACA,U;AACA,kC;AACA,oD;AACA,U;AACA,mC;AACA,0D;AACA,U;AACA,8B;AACA,yF;AACA,U;AACA,uC;AACA,sE;AACA,yB;AACA,W;AACA,e;AACA,kI;AACA,2B;AACA,a;AACA,uB;AACA,yB;AACA,W;AACA,kB;AACA,6B;AACA,4D;AACA,S;AACA,Q;AACA,sC;AACA,oB;AACA,kC;AACA,Y;AACA,K;AACA,mE;AACA,kB;AACA,K;AACA,uB;AACA,oB;AACA,U;AACA,K;AACA,8B;AACA,8C;AACA,+B;AACA,6B;AACA,+B;AACA,gC;AACA,qB;AACA,W;AACA,qG;AACA,8B;AACA,kC;AACA,4D;AACA,oB;AACA,kE;AACA,a;AACA,iC;AACA,yE;AACA,0C;AACA,gC;AACA,W;AACA,S;AACA,O;AACA,K;AACA,kB;AACA,I;;;;;;;;;;;;;;;;;;;ACvFA,2C;AACA,0hB;;;;;;;;;;;;;;;;;;;ACDA,G;AACA,wC;AACA,6B;AACA,G;AACA,qB;;AAEA,G;AACA,yC;AACA,iB;AACA,G;AACA,4B;AACA,gE;AACA,E;;AAEA,G;AACA,6B;AACA,0B;AACA,+B;AACA,G;AACA,+D;AACA,sD;AACA,kC;AACA,U;AACA,mE;AACA,G;AACA,E;;;;;;;;;;;;;;;;;;;ACzBA,G;AACA,kB;AACA,iC;AACA,G;AACA,yB;;AAEA,G;AACA,kC;AACA,8C;AACA,8E;AACA,E;AACA,kD;AACA,yC;AACA,yB;AACA,oB;AACA,mC;AACA,M;AACA,E;AACA,qD;AACA,wC;AACA,yB;AACA,qF;AACA,O;AACA,sB;AACA,qC;AACA,M;AACA,E;AACA,G;AACA,iD;;AAEA,yD;AACA,yD;AACA,mC;AACA,G;;AAEA,4B;;AAEA,yE;AACA,oC;AACA,2C;AACA,O;;AAEA,U;;AAEA,yC;;AAEA,G;AACA,E;;AAEA,G;AACA,6B;AACA,8C;AACA,0D;AACA,G;AACA,qD;AACA,mF;AACA,gC;AACA,K;AACA,E;;AAEA,G;AACA,oD;AACA,8C;AACA,G;AACA,2C;AACA,sD;AACA,E;;;;;;;;;;;;;;;;;;;AClEA,oF;;;AAGA,4B;AACA,mC;AACA,6G;AACA,8G;AACA,uC;AACA,wC;AACA,6G;AACA,sF;AACA,8F;AACA,wE;AACA,uC;AACA,G;;AAEA,qF;;AAEA,c;;AAEA,+D;AACA,+B;AACA,wD;AACA,qD;AACA,sD;;AAEA,6E;AACA,uD;AACA,E;;;AAGA,iF;;AAEA,yC;AACA,uC;;AAEA,gC;AACA,W;AACA,E;;;;;;;;;;;;;;;;;;;ACtCA,G;AACA,2D;AACA,G;;AAEA,6B;;AAEA,sC;AACA,kB;AACA,0B;AACA,qB;AACA,4B;AACA,E;;AAEA,G;AACA,4C;AACA,6D;AACA,gI;AACA,0H;AACA,G;AACA,oE;AACA,qC;;AAEA,sC;AACA,gC;;AAEA,0D;AACA,E;;AAEA,Y;AACA,kC;AACA,wC;AACA,0D;AACA,I;AACA,E;;AAEA,wC;AACA,wD;AACA,8C;AACA,8D;;AAEA,c;;AAEA,kB;AACA,wD;AACA,2C;AACA,+B;AACA,6C;AACA,iD;AACA,+B;AACA,6B;AACA,wB;AACA,sC;AACA,8B;AACA,kC;;AAEA,mD;AACA,qC;AACA,sC;AACA,4C;AACA,mF;AACA,2C;AACA,mD;AACA,wD;AACA,2D;AACA,qC;AACA,kD;AACA,+C;AACA,mD;;AAEA,uC;AACA,qC;;AAEA,sB;;AAEA,uC;AACA,yB;AACA,0B;AACA,gC;AACA,uE;AACA,+B;AACA,uC;AACA,4C;AACA,+C;AACA,yB;AACA,+C;AACA,kC;AACA,uC;;AAEA,iB;;AAEA,yC;;AAEA,yB;;AAEA,6B;AACA,qC;AACA,6C;;AAEA,iE;AACA,4E;;;;;;;;;;;;;;;;;;;ACnGA,iF;;AAEA,G;AACA,kF;AACA,kD;AACA,wE;AACA,G;AACA,0D;AACA,oC;AACA,gE;AACA,uE;AACA,2G;AACA,E;;AAEA,G;AACA,0C;AACA,G;AACA,yB;AACA,e;AACA,iB;AACA,uB;AACA,iB;AACA,2B;AACA,8B;AACA,qB;AACA,4B;AACA,8B;AACA,uB;AACA,0B;AACA,qB;AACA,e;AACA,0B;AACA,oB;AACA,iB;AACA,qB;AACA,kB;AACA,e;AACA,kB;AACA,E","file":"/packages/telescope_lib.js","sourcesContent":["/**\n * Kick off the global namespace for Telescope.\n * @namespace Telescope\n */\n\nTelescope = {};\n\nTelescope.VERSION = '0.20.5';","/**\n * The global namespace for Telescope utils.\n * @namespace Telescope.utils\n */\nTelescope.utils = {};\n\n/**\n * Returns the user defined site URL or Meteor.absoluteUrl\n */\nTelescope.utils.getSiteUrl = function() {\n  return Settings.get('siteUrl', Meteor.absoluteUrl());\n};\n\n/**\n * Convert a camelCase string to dash-separated string\n * @param {String} str\n */\nTelescope.utils.camelToDash = function(str) {\n  return str.replace(/\\W+/g, '-').replace(/([a-z\\d])([A-Z])/g, '$1-$2').toLowerCase();\n};\n\n/**\n * Convert an underscore-separated string to dash-separated string\n * @param {String} str\n */\nTelescope.utils.underscoreToDash = function(str) {\n  return str.replace('_', '-');\n};\n\n/**\n * Convert a dash separated string to camelCase.\n * @param {String} str\n */\nTelescope.utils.dashToCamel = function(str) {\n  return str.replace(/(\\-[a-z])/g, function($1){return $1.toUpperCase().replace('-','');});\n};\n\n/**\n * Convert a string to camelCase and remove spaces.\n * @param {String} str\n */\nTelescope.utils.camelCaseify = function(str) {\n  return this.dashToCamel(str.replace(' ', '-'));\n};\n\n/**\n * Trim a sentence to a specified amount of words and append an ellipsis.\n * @param {String} s - Sentence to trim.\n * @param {Number} numWords - Number of words to trim sentence to.\n */\nTelescope.utils.trimWords = function(s, numWords) {\n  var expString = s.split(/\\s+/,numWords);\n  if(expString.length >= numWords)\n    return expString.join(\" \")+\"â€¦\";\n  return s;\n};\n\n/**\n * Capitalize a string.\n * @param {String} str\n */\nTelescope.utils.capitalise = function(str) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n};\n\nTelescope.utils.getCurrentTemplate = function() {\n  var template = Router.current().lookupTemplate();\n  // on postsDaily route, template is a function\n  if (typeof template === \"function\") {\n    return template();\n  } else {\n    return template;\n  }\n};\n\nTelescope.utils.t = function(message) {\n  var d = new Date();\n  console.log(\"### \"+message+\" rendered at \"+d.getHours()+\":\"+d.getMinutes()+\":\"+d.getSeconds());\n};\n\nTelescope.utils.nl2br = function(str) {\n  var breakTag = '<br />';\n  return (str + '').replace(/([^>\\r\\n]?)(\\r\\n|\\n\\r|\\r|\\n)/g, '$1'+ breakTag +'$2');\n};\n\nTelescope.utils.scrollPageTo = function(selector) {\n  $('body').scrollTop($(selector).offset().top);\n};\n\nTelescope.utils.getDateRange = function(pageNumber) {\n  var now = moment(new Date());\n  var dayToDisplay=now.subtract(pageNumber-1, 'days');\n  var range={};\n  range.start = dayToDisplay.startOf('day').valueOf();\n  range.end = dayToDisplay.endOf('day').valueOf();\n  // console.log(\"after: \", dayToDisplay.startOf('day').format(\"dddd, MMMM Do YYYY, h:mm:ss a\"));\n  // console.log(\"before: \", dayToDisplay.endOf('day').format(\"dddd, MMMM Do YYYY, h:mm:ss a\"));\n  return range;\n};\n\n//////////////////////////\n// URL Helper Functions //\n//////////////////////////\n\n// This function should only ever really be necessary server side\n// Client side using .path() is a better option since it's relative\n// and shouldn't care about the siteUrl.\nTelescope.utils.getRouteUrl = function(routeName, params, options) {\n  options = options || {};\n  var route = Router.url(\n    routeName,\n    params || {},\n    options\n  );\n  return route;\n};\n\nTelescope.utils.getSignupUrl = function() {\n  return this.getRouteUrl('atSignUp');\n};\nTelescope.utils.getSigninUrl = function() {\n  return this.getRouteUrl('atSignIn');\n};\nTelescope.utils.getPostUrl = function(id) {\n  return this.getRouteUrl('post_page', {_id: id});\n};\nTelescope.utils.getPostEditUrl = function(id) {\n  return this.getRouteUrl('post_edit', {_id: id});\n};\n\nTelescope.utils.getCommentUrl = function(id) {\n  return this.getRouteUrl('comment_reply', {_id: id});\n};\n\nTelescope.utils.getPostCommentUrl = function(postId, commentId) {\n  // get link to a comment on a post page\n  return this.getRouteUrl('post_page_comment', {\n    _id: postId,\n    commentId: commentId\n  });\n};\n\nTelescope.utils.slugify = function(text) {\n  if(text){\n    text = text.replace(/[^-_a-zA-Z0-9,&\\s]+/ig, '');\n    text = text.replace(/\\s/gi, \"-\");\n    text = text.toLowerCase();\n  }\n  return text;\n};\n\nTelescope.utils.getShortUrl = function(post) {\n  return post.shortUrl || post.url;\n};\n\nTelescope.utils.getDomain = function(url) {\n  var urlObject = Npm.require('url');\n  return urlObject.parse(url).hostname.replace('www.', '');\n};\n\nTelescope.utils.invitesEnabled = function() {\n  return Settings.get(\"requireViewInvite\") || Settings.get(\"requirePostInvite\");\n};\n\n/////////////////////////////\n// String Helper Functions //\n/////////////////////////////\n\nTelescope.utils.cleanUp = function(s) {\n  return this.stripHTML(s);\n};\n\nTelescope.utils.sanitize = function(s) {\n  // console.log('// before sanitization:')\n  // console.log(s)\n  if(Meteor.isServer){\n    s = sanitizeHtml(s, {\n      allowedTags: [\n        'h3', 'h4', 'h5', 'h6', 'blockquote', 'p', 'a', 'ul',\n        'ol', 'nl', 'li', 'b', 'i', 'strong', 'em', 'strike',\n        'code', 'hr', 'br', 'div', 'table', 'thead', 'caption',\n        'tbody', 'tr', 'th', 'td', 'pre', 'img'\n      ]\n    });\n    // console.log('// after sanitization:')\n    // console.log(s)\n  }\n  return s;\n};\n\nTelescope.utils.stripHTML = function(s) {\n  return s.replace(/<(?:.|\\n)*?>/gm, '');\n};\n\nTelescope.utils.stripMarkdown = function(s) {\n  var html_body = marked(s);\n  return stripHTML(html_body);\n};\n\n// http://stackoverflow.com/questions/2631001/javascript-test-for-existence-of-nested-object-key\nTelescope.utils.checkNested = function(obj /*, level1, level2, ... levelN*/) {\n  var args = Array.prototype.slice.call(arguments);\n  obj = args.shift();\n\n  for (var i = 0; i < args.length; i++) {\n    if (!obj.hasOwnProperty(args[i])) {\n      return false;\n    }\n    obj = obj[args[i]];\n  }\n  return true;\n};\n\nTelescope.log = function (s) {\n  if(Settings.get('debug', false))\n    console.log(s);\n};\n\n// see http://stackoverflow.com/questions/8051975/access-object-child-properties-using-a-dot-notation-string\nTelescope.getNestedProperty = function (obj, desc) {\n  var arr = desc.split(\".\");\n  while(arr.length && (obj = obj[arr.shift()]));\n  return obj;\n}\n\n","/**\n * Callback hooks provide an easy way to add extra steps to common operations. \n * @namespace Telescope.callbacks\n */\nTelescope.callbacks = {};\n\n/**\n * Add a callback function to a hook\n * @param {String} hook - The name of the hook\n * @param {Function} callback - The callback function\n */\nTelescope.callbacks.add = function (hook, callback) {\n\n  // if callback array doesn't exist yet, initialize it\n  if (typeof Telescope.callbacks[hook] === \"undefined\") {\n    Telescope.callbacks[hook] = [];\n  }\n\n  Telescope.callbacks[hook].push(callback);\n};\n\n/**\n * Remove a callback from a hook\n * @param {string} hook - The name of the hook\n * @param {string} functionName - The name of the function to remove\n */\nTelescope.callbacks.remove = function (hookName, callbackName) {\n  Telescope.callbacks[hookName] = _.reject(Telescope.callbacks[hookName], function (callback) {\n    return callback.name === callbackName;\n  });\n};\n\n/**\n * Successively run all of a hook's callbacks on an item\n * @param {String} hook - The name of the hook\n * @param {Object} item - The post, comment, modifier, etc. on which to run the callbacks\n * @param {Object} [constant] - An optional constant that will be passed along to each callback\n * @returns {Object} Returns the item after it's been through all the callbacks for this hook\n */\nTelescope.callbacks.run = function (hook, item, constant) {\n\n  var callbacks = Telescope.callbacks[hook];\n\n  if (typeof callbacks !== \"undefined\" && !!callbacks.length) { // if the hook exists, and contains callbacks to run\n\n    return callbacks.reduce(function(result, callback) {\n      // console.log(callback.name);\n      return callback(result, constant);\n    }, item);\n\n  } else { // else, just return the item unchanged\n    return item;\n  }\n};\n\n/**\n * Successively run all of a hook's callbacks on an item, in async mode (only works on server)\n * @param {String} hook - The name of the hook\n * @param {Object} item - The post, comment, modifier, etc. on which to run the callbacks\n * @param {Object} [constant] - An optional constant that will be passed along to each callback \n */\nTelescope.callbacks.runAsync = function (hook, item, constant) {\n  \n  var callbacks = Telescope.callbacks[hook];\n\n  if (Meteor.isServer && typeof callbacks !== \"undefined\" && !!callbacks.length) {\n\n    // use defer to avoid holding up client\n    Meteor.defer(function () {\n      // run all post submit server callbacks on post object successively\n      callbacks.forEach(function(callback) {\n        // console.log(callback.name);\n        callback(item, constant);\n      });\n    });\n  \n  } else {\n    return item;\n  }\n};","/**\n * Meteor Collections.\n * @class Mongo.Collection\n */\n\n/**\n * Add an additional field (or an array of fields) to a schema.\n * @param {Object|Object[]} field\n */\nMongo.Collection.prototype.addField = function (fieldOrFieldArray) {\n\n  var collection = this;\n  var fieldSchema = {};\n\n  var fieldArray = Array.isArray(fieldOrFieldArray) ? fieldOrFieldArray : [fieldOrFieldArray];\n\n  // loop over fields and add them to schema\n  fieldArray.forEach(function (field) {\n    fieldSchema[field.fieldName] = field.fieldSchema;\n  });\n\n  // add field schema to collection schema\n  collection.attachSchema(fieldSchema);\n};\n\n/**\n * Remove a field from a schema.\n * @param {String} fieldName\n */\nMongo.Collection.prototype.removeField = function (fieldName) {\n\n  var collection = this;\n  var schema = _.omit(collection.simpleSchema()._schema, fieldName);\n\n  // add field schema to collection schema\n  collection.attachSchema(schema, {replace: true});\n};\n\n/**\n * Check if an operation is allowed\n * @param {Object} collection â€“ the collection to which the document belongs\n * @param {string} userId â€“ the userId of the user performing the operation\n * @param {Object} document â€“ the document being modified\n * @param {string[]} fieldNames â€“ the names of the fields being modified\n * @param {Object} modifier â€“ the modifier\n */\nTelescope.allowCheck = function (collection, userId, document, fieldNames, modifier) {\n\n  var schema = collection.simpleSchema();\n  var user = Meteor.users.findOne(userId);\n  var allowedFields = schema.getEditableFields(user);\n  var fields = [];\n\n  // fieldNames only contains top-level fields, so loop over modifier to get real list of fields\n  _.each(modifier, function (operation) {\n    fields = fields.concat(_.keys(operation));\n  });\n\n  // allow update only if:\n  // 1. user has rights to edit the document\n  // 2. there is no fields in fieldNames that are not also in allowedFields\n  return Users.can.edit(userId, document) && _.difference(fields, allowedFields).length == 0;\n\n};\n\n// Note: using the prototype doesn't work in allow/deny for some reason\nMeteor.Collection.prototype.allowCheck = function (userId, document, fieldNames, modifier) {\n  Telescope.allowCheck(this, userId, document, fieldNames, modifier);\n};\n\n/**\n * Global schemas object. Note: not reactive, won't be updated after initialization\n * @namespace Telescope.schemas\n */\nTelescope.schemas = {};\n\n/**\n * @method SimpleSchema.getEditableFields\n * Get a list of all fields editable by a specific user for a given schema\n * @param {Object} user â€“ the user for which to check field permissions\n */\nSimpleSchema.prototype.getEditableFields = function (user) {\n  var schema = this._schema;\n  var fields = _.sortBy(_.filter(_.keys(schema), function (fieldName) {\n    var field = schema[fieldName];\n    return Users.can.editField(user, field);\n  }), function (fieldName) {\n    var field = schema[fieldName];\n    return field.autoform && field.autoform.order;\n  });\n  return fields;\n};\n\nSimpleSchema.prototype.getPublicFields = function () {\n  var schema = this._schema;\n  var fields = _.filter(_.keys(schema), function (fieldName) {\n    var field = schema[fieldName];\n    return !!field.public;\n  });\n  return fields;\n};\n\nSimpleSchema.prototype.getProfileFields = function () {\n  var schema = this._schema;\n  var fields = _.filter(_.keys(schema), function (fieldName) {\n    var field = schema[fieldName];\n    return !!field.profile;\n  });\n  return fields;\n};","/**\n * Template modules let you insert templates in specific zones in the app's layout. \n * @namespace Telescope.modules\n */\n\nTelescope.modules = {};\n\n/**\n * Add a module to a template zone\n * @param {string} zone - The name of the zone\n * @param {Object|Object[]} module - The module object (or an array of modules)\n * @param {string} module.template - The template to include\n * @param {number} module.order - The order of the template in the zone\n *\n * @example\n * Telescope.modules.add(\"hero\", {\n *   template: \"newsletterBanner\",\n *   order: 10\n * });\n */\nTelescope.modules.add = function (zone, module) {\n\n  // if module zone array doesn't exist yet, initialize it\n  if (typeof Telescope.modules[zone] === \"undefined\") {\n    Telescope.modules[zone] = [];\n  }\n\n  if (Array.isArray(module)) {\n\n    var modules = module; // we're dealing with an Array, so let's add an \"s\"\n    modules.forEach( function (module) {\n      Telescope.modules[zone].push(module);\n    });\n\n  } else {\n\n    Telescope.modules[zone].push(module);\n\n  }\n};\n\n/**\n * Remove a module from a zone\n * @param {string} zone - The name of the zone\n * @param {string} template - The name of the template to remove\n */\nTelescope.modules.remove = function (zone, template) {\n  Telescope.modules[zone] = _.reject(Telescope.modules[zone], function (module) {\n    return module.template === template;\n  });\n};\n\n/**\n * Removes all modules from a zone\n * @param {string} zone - The name of the zone\n */\nTelescope.modules.removeAll = function (zone) {\n  Telescope.modules[zone] = [];\n};\n\n/**\n * Retrieve an array containing all modules for a zone\n * @param {string} zone - The name of the zone\n * @returns {Object[]} Returns a sorted array of the zone's modules\n */\nTelescope.modules.get = function (zone) {\n  return _.sortBy(Telescope.modules[zone], \"order\");\n};\n","/**\n * Telescope configuration namespace\n * @namespace Telescope.config\n */\nTelescope.config = {};\n\n /**\n * Subscriptions namespace\n * @namespace Telescope.subscriptions\n */\nTelescope.subscriptions = [];\n\n/**\n * Add a subscription to be preloaded\n * @param {string} subscription - The name of the subscription\n */\nTelescope.subscriptions.preload = function (subscription) {\n  Telescope.subscriptions.push(subscription);\n};\n\n","// see https://gist.github.com/furf/3208381\n\n_.mixin({\n\n  // Get/set the value of a nested property\n  deep: function (obj, key, value) {\n\n    var keys = key.replace(/\\[([\"']?)([^\\1]+?)\\1?\\]/g, '.$2').replace(/^\\./, '').split('.'),\n        root,\n        i = 0,\n        n = keys.length;\n\n    // Set deep value\n    if (arguments.length > 2) {\n\n      root = obj;\n      n--;\n\n      while (i < n) {\n        key = keys[i++];\n        obj = obj[key] = _.isObject(obj[key]) ? obj[key] : {};\n      }\n\n      obj[keys[i]] = value;\n\n      value = root;\n\n    // Get deep value\n    } else {\n      while ((obj = obj[keys[i++]]) !== null && i < n) {};\n      value = i < n ? void 0 : obj;\n    }\n\n    return value;\n  }\n\n});\n\n// Usage:\n//\n// var obj = {\n//   a: {\n//     b: {\n//       c: {\n//         d: ['e', 'f', 'g']\n//       }\n//     }\n//   }\n// };\n//\n// Get deep value\n// _.deep(obj, 'a.b.c.d[2]'); // 'g'\n//\n// Set deep value\n// _.deep(obj, 'a.b.c.d[2]', 'george');\n//\n// _.deep(obj, 'a.b.c.d[2]'); // 'george'\n\n\n_.mixin({\n  pluckDeep: function (obj, key) {\n    return _.map(obj, function (value) { return _.deep(value, key); });\n  }\n});\n\n\n_.mixin({\n\n // Return a copy of an object containing all but the blacklisted properties.\n  unpick: function (obj) {\n    obj = obj || {};\n    return _.pick(obj, _.difference(_.keys(obj), _.flatten(Array.prototype.slice.call(arguments, 1))));\n  }\n\n});\n","// see: http://stackoverflow.com/questions/9399365/deep-extend-like-jquerys-for-nodejs\nTelescope.utils.deepExtend = function () {\n  var options, name, src, copy, copyIsArray, clone, target = arguments[0] || {},\n      i = 1,\n      length = arguments.length,\n      deep = false,\n      toString = Object.prototype.toString,\n      hasOwn = Object.prototype.hasOwnProperty,\n      class2type = {\n        \"[object Boolean]\": \"boolean\",\n        \"[object Number]\": \"number\",\n        \"[object String]\": \"string\",\n        \"[object Function]\": \"function\",\n        \"[object Array]\": \"array\",\n        \"[object Date]\": \"date\",\n        \"[object RegExp]\": \"regexp\",\n        \"[object Object]\": \"object\"\n      },\n      jQuery = {\n        isFunction: function (obj) {\n          return jQuery.type(obj) === \"function\";\n        },\n        isArray: Array.isArray ||\n        function (obj) {\n          return jQuery.type(obj) === \"array\";\n        },\n        isWindow: function (obj) {\n          return obj !== null && obj === obj.window;\n        },\n        isNumeric: function (obj) {\n          return !isNaN(parseFloat(obj)) && isFinite(obj);\n        },\n        type: function (obj) {\n          return obj === null ? String(obj) : class2type[toString.call(obj)] || \"object\";\n        },\n        isPlainObject: function (obj) {\n          if (!obj || jQuery.type(obj) !== \"object\" || obj.nodeType) {\n            return false;\n          }\n          try {\n            if (obj.constructor && !hasOwn.call(obj, \"constructor\") && !hasOwn.call(obj.constructor.prototype, \"isPrototypeOf\")) {\n              return false;\n            }\n          } catch (e) {\n            return false;\n          }\n          var key;\n          for (key in obj) {}\n          return key === undefined || hasOwn.call(obj, key);\n        }\n      };\n    if (typeof target === \"boolean\") {\n      deep = target;\n      target = arguments[1] || {};\n      i = 2;\n    }\n    if (typeof target !== \"object\" && !jQuery.isFunction(target)) {\n      target = {};\n    }\n    if (length === i) {\n      target = this;\n      --i;\n    }\n    for (i; i < length; i++) {\n      if ((options = arguments[i]) !== null) {\n        for (name in options) {\n          src = target[name];\n          copy = options[name];\n          if (target === copy) {\n            continue;\n          }\n          if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)))) {\n            if (copyIsArray) {\n              copyIsArray = false;\n              clone = src && jQuery.isArray(src) ? src : [];\n            } else {\n              clone = src && jQuery.isPlainObject(src) ? src : {};\n            }\n            // WARNING: RECURSION\n            target[name] = Telescope.utils.deepExtend(deep, clone, copy);\n          } else if (copy !== undefined) {\n            target[name] = copy;\n          }\n        }\n      }\n    }\n    return target;\n  };\n","//https://github.com/bryanwoods/autolink-js\n(function(){var a,b=[].slice;a=function(){var j,i,d,f,e,c,g,h;c=1<=arguments.length?b.call(arguments,0):[];g=/(^|\\s)(\\b(https?):\\/\\/[\\-A-Z0-9+&@#\\/%?=~_|!:,.;]*[\\-A-Z0-9+&@#\\/%=~_|]\\b)/ig;if(c.length>0){e=c[0];i=e.callback;if((i!=null)&&typeof i===\"function\"){j=i;delete e.callback;}f=\"\";for(d in e){h=e[d];f+=\" \"+d+\"='\"+h+\"'\";}return this.replace(g,function(l,o,k){var n,m;m=j&&j(k);n=m||(\"<a href='\"+k+\"'\"+f+\">\"+k+\"</a>\");return\"\"+o+n;});}else{return this.replace(g,\"$1<a href='$2'>$2</a>\");}};String.prototype.autoLink=a;}).call(this);\n","/**\n * Telescope theme settings and methods.\n * @namespace Telescope.theme\n */\nTelescope.theme = {};\n\n/**\n * Default settings for Telescope themes.\n * @type {Object}\n */\nTelescope.theme.settings = {\n  useDropdowns: true // Enable/disable dropdown menus in a theme\n};\n\n/**\n * Get a theme setting value.\n * @param {String} setting\n * @param {String} defaultValue\n */\nTelescope.theme.getSetting = function (setting, defaultValue) {\n  if (typeof this.settings[setting] !== 'undefined') {\n    return this.settings[setting];\n  } else {\n    return typeof defaultValue === 'undefined' ? '' : defaultValue;\n  }\n};\n","/**\n * Menus namespace\n * @namespace Telescope.menuItems\n */\nTelescope.menuItems = {};\n\n/**\n * Add one or more items to a menu\n * @param {string} menu - The name of the menu\n * @param {Object|Object[]} item - The menu item object (or an array of items)\n *\n * @example <caption>Using a named route</caption>\n * Telescope.menuItems.add(\"viewsMenu\", {\n *   route: 'postsDaily',\n *   label: 'daily',\n *   description: 'day_by_day_view'\n * });\n *\n * @example <caption>Using a route function</caption>\n * Telescope.menuItems.add(\"userMenu\", {\n *   route: function () {\n *     return Router.path('user_profile', {_idOrSlug: Meteor.user().telescope.slug});\n *   },\n *   label: 'profile',\n *   description: 'view_your_profile'\n * });\n *\n */\nTelescope.menuItems.add = function (menu, item) {\n\n  // if menu items array doesn't exist yet, initialize it\n  if (typeof Telescope.menuItems[menu] === \"undefined\") {\n    Telescope.menuItems[menu] = [];\n  }\n\n  if (Array.isArray(item)) {\n\n    var items = item; // we're dealing with an Array, so let's add an \"s\"\n    items.forEach( function (item) {\n      Telescope.menuItems[menu].push(item);\n    });\n\n  } else {\n\n    Telescope.menuItems[menu].push(item);\n\n  }\n};\n\n/**\n * Remove an item from a menu\n * @param {string} menu - The name of the menu\n * @param {string} label - The label of the item to remove\n */\nTelescope.menuItems.remove = function (menu, label) {\n  Telescope.menuItems[menu] = _.reject(Telescope.menuItems[menu], function (menu) {\n    return menu.label === label;\n  });\n};\n\n/**\n * Retrieve an array containing all items for a menu\n * @param {string} menu - The name of the menu\n */\nTelescope.menuItems.get = function (menu) {\n  return _.sortBy(Telescope.menuItems[menu], \"order\");\n};\n","// ------------------------------------- Schemas -------------------------------- //\n\n\nSimpleSchema.extendOptions({\n  private: Match.Optional(Boolean),\n  editable: Match.Optional(Boolean),  // editable: true means the field can be edited by the document's owner\n  hidden: Match.Optional(Boolean),     // hidden: true means the field is never shown in a form no matter what\n  editableBy: Match.Optional([String]),\n  publishedTo: Match.Optional([String]),\n  required: Match.Optional(Boolean), // required: true means the field is required to have a complete profile\n  public: Match.Optional(Boolean), // public: true means the field is published freely\n  profile: Match.Optional(Boolean), // profile: true means the field is shown on user profiles\n  template: Match.Optional(String) // template used to display the field\n  // editableBy: Match.Optional(String)\n});\n\n// ------------------------------ Dynamic Templates ------------------------------ //\n\ntemplates = {}\n\n// note: not used anymore, but keep for backwards compatibility\ngetTemplate = function (name) {\n  // for now, always point back to the original template\n  var originalTemplate = (_.invert(templates))[name];\n  return !!originalTemplate ? originalTemplate : name;\n\n  // if template has been overwritten, return this; else return template name\n  // return !!templates[name] ? templates[name] : name;\n};\n\n\n// ------------------------------- Vote Power -------------------------------- //\n\n// The equation to determine voting power\n// Default to returning 1 for everybody\n\ngetVotePower = function (user) {\n  return 1;\n};\n","/**\n * A dictionnary of all the elements that use custom colors\n */\n\nTelescope.colorElements = {};\n\nTelescope.colorElements.colorTable = {\n  accentColor: [],\n  accentContrastColor: [],\n  secondaryColor: [],\n  secondaryContrastColor: []\n};\n\n/**\n * Register an element to use a custom color\n * @param {string} selector - the CSS selector of the element\n * @param {string} color - the color. Either `accentColor`, `accentContrastColor`, `secondaryColor`, or `secondaryContrastColor`\n * @param {string} [property=color] - the property to colorize. Usually `color`, `background-color`, `border-color`, etc. \n */\nTelescope.colorElements.add = function (selector, color, property) {\n  var element = {selector: selector};\n\n  if (typeof property !== \"undefined\")\n    element.property = property;\n\n  Telescope.colorElements.colorTable[color].push(element);\n};\n\n// shortcuts\nvar setShortcut = function(name) {\n  return function (selector, property) {\n    Telescope.colorElements.add(selector, name, property);\n  };\n};\n\nvar accent = setShortcut('accentColor');\nvar accentContrast = setShortcut('accentContrastColor');\nvar secondary = setShortcut('secondaryColor');\nvar secondaryContrast = setShortcut('secondaryContrastColor');\n\n// accentColor\n\naccent(\"a:hover\");\naccent(\".post-content .post-heading .post-title:hover\");\naccent(\".post-content .post-upvote .icon\");\naccent(\".comment-actions a i\");\naccent(\".comment-actions.upvoted .upvote i\");\naccent(\".comment-actions.downvoted .downvote i\");\naccent(\".toggle-actions-link\");\naccent(\".post-meta a:hover\");\naccent(\".action:hover\");\naccent(\".post-upvote .upvote-link i\");\naccent(\".post-actions .icon\");\naccent(\".post-share .icon-share\");\n\naccent('input[type=\"submit\"]', 'background-color');\naccent(\"button\", 'background-color');\naccent(\".button\", 'background-color');\naccent(\"button.submit\", 'background-color');\naccent(\".auth-buttons #login-buttons #login-buttons-password\", 'background-color');\naccent(\".btn-primary\", 'background-color');\naccent(\".header .btn-primary\", 'background-color');\naccent(\".header .btn-primary:link\", 'background-color');\naccent(\".header .btn-primary:visited\", 'background-color');\naccent(\".error\", 'background-color');\naccent(\".mobile-menu-button\", 'background-color');\naccent(\".login-link-text\", 'background-color');\naccent(\".post-category:hover\", 'background-color');\n\naccent(\".icon-upvote\", \"border-color\");\naccent(\".icon-more\", \"border-color\");\n\n// accentContrastColor\n\naccentContrast('input[type=\"submit\"]');\naccentContrast(\"button\");\naccentContrast(\".button\");\naccentContrast(\"button.submit\");\naccentContrast(\".auth-buttons #login-buttons #login-buttons-password\");\naccentContrast(\".btn-primary\");\naccentContrast(\".header .btn-primary\");\naccentContrast(\".header .btn-primary:link\");\naccentContrast(\".header .btn-primary:visited\");\naccentContrast(\".error\");\naccentContrast(\".header a.mobile-menu-button\");\naccentContrast(\"login-link-text\");\naccentContrast(\".post-category:hover\");\n\n// secondaryColor\n\nsecondary(\".header\", \"background-color\");\n\n// secondaryContrastColor\n\nsecondaryContrast(\".header\");\nsecondaryContrast(\".header .logo a\");\nsecondaryContrast(\".header .logo a:visited\");\n\nsecondaryContrast(\".header .dropdown-top-level\", \"border-color\");\nsecondaryContrast(\".header .dropdown-accordion .show-more\", \"border-color\");\n","// ------------------------------ Dynamic Icons ------------------------------ //\n\n/**\n * Take an icon name (such as \"open\") and return the HTML code to display the icon\n * @param {string} iconName - the name of the icon\n * @param {string} [iconClass] - an optional class to assign to the icon\n */\nTelescope.utils.getIcon = function (iconName, iconClass) {\n  var icons = Telescope.utils.icons;\n  var iconCode = !!icons[iconName] ? icons[iconName] : iconName;\n  var iconClass = (typeof iconClass === 'string') ? ' '+iconClass : '';\n  return '<i class=\"icon fa fa-' + iconCode + ' icon-' + iconName + iconClass+ '\" aria-hidden=\"true\"></i>';\n};\n\n/**\n * A directory of icon keys and icon codes\n */\nTelescope.utils.icons = {\n  open: \"plus\",\n  close: \"minus\",\n  upvote: \"chevron-up\",\n  voted: \"check\",\n  downvote: \"chevron-down\",\n  facebook: \"facebook-square\",\n  twitter: \"twitter\",\n  googleplus: \"google-plus\",\n  linkedin: \"linkedin-square\",\n  comment: \"comment-o\",\n  share: \"share-square-o\",\n  more: \"ellipsis-h\",\n  menu: \"bars\",\n  subscribe: \"envelope-o\",\n  delete: \"trash-o\",\n  edit: \"pencil\",\n  popularity: \"fire\",\n  time: \"clock-o\",\n  best: \"star\",\n  search: \"search\"\n};\n"]}