{"version":3,"sources":["telescope:tags/lib/categories.js","telescope:tags/lib/custom_fields.js","telescope:tags/lib/hooks.js","telescope:tags//Users/sacha/Dev/Telescope/packages/telescope-tags/package-tap.i18n","telescope:tags/lib/server/publications.js","telescope:tags/lib/server/hooks.js","telescope:tags//Users/sacha/Dev/Telescope/packages/telescope-tags/i18n/bg.i18n.json","telescope:tags//Users/sacha/Dev/Telescope/packages/telescope-tags/i18n/de.i18n.json","telescope:tags//Users/sacha/Dev/Telescope/packages/telescope-tags/i18n/en.i18n.json","telescope:tags//Users/sacha/Dev/Telescope/packages/telescope-tags/i18n/es.i18n.json","telescope:tags//Users/sacha/Dev/Telescope/packages/telescope-tags/i18n/fr.i18n.json","telescope:tags//Users/sacha/Dev/Telescope/packages/telescope-tags/i18n/it.i18n.json","telescope:tags//Users/sacha/Dev/Telescope/packages/telescope-tags/i18n/zh-CN.i18n.json"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,gD;;AAEA,kB;AACA,sC;AACA,S;AACA,iB;AACA,yB;AACA,I;AACA,gB;AACA,iB;AACA,mB;AACA,0B;AACA,e;AACA,a;AACA,K;AACA,I;AACA,U;AACA,iB;AACA,mB;AACA,yB;AACA,I;AACA,S;AACA,iB;AACA,mB;AACA,yB;AACA,I;AACA,U;AACA,iB;AACA,mB;AACA,yB;AACA,G;AACA,G;;AAEA,qC;;AAEA,2C;;AAEA,iD;AACA,+C;AACA,gB;AACA,iD;AACA,G;;AAEA,gC;AACA,8C;AACA,kE;AACA,U;AACA,+C;AACA,kG;AACA,I;AACA,G;;AAEA,4B;AACA,oB;AACA,+B;AACA,+B;AACA,8B;AACA,K;AACA,G;;AAEA,qC;AACA,yF;AACA,E;;AAEA,gC;AACA,uD;AACA,E;;AAEA,gD;AACA,4C;AACA,0G;AACA,gD;AACA,C;AACA,uD;;;;;;;;;;;;;;;;;;;ACzEA,e;AACA,G;AACA,4B;AACA,kB;AACA,qB;AACA,qB;AACA,sC;AACA,iB;AACA,uB;AACA,8B;AACA,sE;AACA,oB;AACA,kC;AACA,kC;AACA,c;AACA,a;AACA,4B;AACA,S;AACA,O;AACA,K;AACA,G;AACA,E;;;;;;;;;;;;;;;;;;;ACrBA,sC;AACA,sB;AACA,sB;AACA,0C;AACA,G;;AAEA,2C;AACA,sC;AACA,8B;AACA,W;AACA,G;;AAEA,gD;AACA,qC;AACA,8B;AACA,W;AACA,G;;AAEA,oC;AACA,8B;AACA,W;AACA,G;;AAEA,8E;AACA,8C;;;;;;;;;;;;;;;;;;;ACxBA,gH;;AAEA,+D;AACA,gD;;;;;;;;;;;;;;;;;;;ACHA,yC;AACA,sC;AACA,6B;AACA,G;AACA,Y;AACA,G;;;;;;;;;;;;;;;;;;;ACLA,wE;AACA,uC;;AAEA,2C;AACA,yD;AACA,W;AACA,G;;AAEA,gE;AACA,6E;;AAEA,iD;AACA,2E;AACA,G;AACA,E;;AAEA,2C;AACA,wB;AACA,c;AACA,C;AACA,iE;;AAEA,4C;AACA,mC;AACA,wB;AACA,iB;AACA,C;AACA,6D;;;;;;;;;;;;;;;;;;;AC3BA,6B;AACA,oC;AACA,iC;;AAEA,gC;AACA,yD;AACA,C;AACA,+C;AACA,kC;AACA,C;;AAEA,0D;AACA,6C;AACA,C;;AAEA,6I;;;;;;;;;;;;;;;;;;;ACfA,6B;AACA,oC;AACA,iC;;AAEA,gC;AACA,yD;AACA,C;AACA,+C;AACA,kC;AACA,C;;AAEA,0D;AACA,6C;AACA,C;;AAEA,6E;;;;;;;;;;;;;;;;;;;ACfA,6B;AACA,oC;AACA,iC;;AAEA,gC;AACA,yD;AACA,C;AACA,gD;AACA,kB;AACA,+L;AACA,gD;;;;;;;;;;;;;;;;;;;ACVA,6B;AACA,oC;AACA,iC;;AAEA,gC;AACA,yD;AACA,C;AACA,+C;AACA,kC;AACA,C;;AAEA,0D;AACA,6C;AACA,C;;AAEA,6E;;;;;;;;;;;;;;;;;;;ACfA,6B;AACA,oC;AACA,iC;;AAEA,gC;AACA,yD;AACA,C;AACA,+C;AACA,kC;AACA,C;;AAEA,0D;AACA,6C;AACA,C;;AAEA,8N;;;;;;;;;;;;;;;;;;;ACfA,6B;AACA,oC;AACA,iC;;AAEA,gC;AACA,yD;AACA,C;AACA,+C;AACA,kC;AACA,C;;AAEA,0D;AACA,6C;AACA,C;;AAEA,4E;;;;;;;;;;;;;;;;;;;ACfA,6B;AACA,oC;AACA,iC;;AAEA,gC;AACA,yD;AACA,C;AACA,kD;AACA,qC;AACA,C;;AAEA,6D;AACA,gD;AACA,C;;AAEA,wE","file":"/packages/telescope_tags.js","sourcesContent":["Categories = new Mongo.Collection(\"categories\");\n\n// category schema\nCategories.schema = new SimpleSchema({\n  name: {\n    type: String,\n    editableBy: [\"admin\"]\n  },\n  description: {\n    type: String,\n    optional: true,\n    editableBy: [\"admin\"],\n    autoform: {\n      rows: 3\n    }\n  },\n  order: {\n    type: Number,\n    optional: true,\n    editableBy: [\"admin\"]\n  },\n  slug: {\n    type: String,\n    optional: true,\n    editableBy: [\"admin\"]\n  },\n  image: {\n    type: String,\n    optional: true,\n    editableBy: [\"admin\"]\n  }\n});\n\nCategories.schema.internationalize();\n\nCategories.attachSchema(Categories.schema);\n\nCategories.before.insert(function (userId, doc) {\n  // if no slug has been provided, generate one\n  if (!doc.slug)\n    doc.slug = Telescope.utils.slugify(doc.name);\n});\n\n// category post list parameters\nPosts.views.add(\"category\", function (terms) {\n  var categoryId = Categories.findOne({slug: terms.category})._id;\n  return {\n    find: {'categories': {$in: [categoryId]}} ,\n    options: {sort: {sticky: -1, score: -1}} // for now categories views default to the \"top\" view\n  };\n});\n\nMeteor.startup(function () {\n  Categories.allow({\n    insert: Users.is.adminById,\n    update: Users.is.adminById,\n    remove: Users.is.adminById\n  });\n});\n\ngetPostCategories = function (post) {\n  return !!post.categories ? Categories.find({_id: {$in: post.categories}}).fetch() : [];\n};\n\ngetCategoryUrl = function(slug){\n  return Telescope.utils.getSiteUrl()+'category/'+slug;\n};\n\n// add callback that adds categories CSS classes\nfunction addCategoryClass (post, postClass){\n  var classArray = _.map(getPostCategories(post), function (category){return \"category-\"+category.slug;});\n  return postClass + \" \" + classArray.join(' ');\n}\nTelescope.callbacks.add(\"postClass\", addCategoryClass);\n","Posts.addField(\n  {\n    fieldName: 'categories',\n    fieldSchema: {\n      type: [String],\n      optional: true,\n      editableBy: [\"member\", \"admin\"],\n      autoform: {\n        noselect: true,\n        options: function () {\n          var categories = Categories.find().map(function (category) {\n            return {\n              value: category._id,\n              label: category.name\n            };\n          });\n          return categories;\n        }\n      }\n    }\n  }\n);\n","Telescope.menuItems.add(\"adminMenu\", {\n  route: 'categories',\n  label: 'Categories',\n  description: 'add_and_remove_categories'\n});\n\n// push \"categories\" modules to postHeading\nTelescope.modules.add(\"postHeading\", {\n  template: 'post_categories',\n  order: 30\n});\n\n// push \"categories_menu\" template to primaryNav\nTelescope.modules.add(\"primaryNav\", {\n  template: 'categories_menu',\n  order: 50\n});\n\nTelescope.modules.add(\"mobileNav\", {\n  template: 'categories_menu',\n  order: 10\n});\n\n// we want to wait until categories are all loaded to load the rest of the app\nTelescope.subscriptions.preload('categories');\n","TAPi18n.packages[\"telescope:tags\"] = {\"translation_function_name\":\"__\",\"helper_name\":\"_\",\"namespace\":\"project\"};\n\n// define package's translation function (proxy to the i18next)\n__ = TAPi18n._getPackageI18nextProxy(\"project\");\n","Meteor.publish('categories', function() {\n  if(Users.can.viewById(this.userId)){\n    return Categories.find();\n  }\n  return [];\n});\n","// make sure all categories in the post.categories array exist in the db\nvar checkCategories = function (post) {\n\n  // if there are not categories, stop here\n  if (!post.categories || post.categories.length === 0) {\n    return;\n  }\n\n  // check how many of the categories given also exist in the db\n  var categoryCount = Categories.find({_id: {$in: post.categories}}).count();\n\n  if (post.categories.length !== categoryCount) {\n    throw new Meteor.Error('invalid_category', i18n.t('invalid_category'));\n  }\n};\n\nfunction postSubmitCheckCategories (post) {\n  checkCategories(post);\n  return post;\n}\nTelescope.callbacks.add(\"submitPost\", postSubmitCheckCategories);\n\nfunction postEditCheckCategories (options) {\n  var post = options.modifier.$set;\n  checkCategories(post);\n  return options;\n}\nTelescope.callbacks.add(\"editPost\", postEditCheckCategories);\n","var _ = Package.underscore._,\n    package_name = \"telescope:tags\",\n    namespace = \"telescope:tags\";\n\nif (package_name != \"project\") {\n    namespace = TAPi18n.packages[package_name].namespace;\n}\nif(_.isUndefined(TAPi18n.translations[\"bg\"])) {\n  TAPi18n.translations[\"bg\"] = {};\n}\n\nif(_.isUndefined(TAPi18n.translations[\"bg\"][namespace])) {\n  TAPi18n.translations[\"bg\"][namespace] = {};\n}\n\n_.extend(TAPi18n.translations[\"bg\"][namespace], {\"categories\":\"Категории\",\"add_and_remove_categories\":\"Добавяне и изтриване на категории.\"});\n","var _ = Package.underscore._,\n    package_name = \"telescope:tags\",\n    namespace = \"telescope:tags\";\n\nif (package_name != \"project\") {\n    namespace = TAPi18n.packages[package_name].namespace;\n}\nif(_.isUndefined(TAPi18n.translations[\"de\"])) {\n  TAPi18n.translations[\"de\"] = {};\n}\n\nif(_.isUndefined(TAPi18n.translations[\"de\"][namespace])) {\n  TAPi18n.translations[\"de\"][namespace] = {};\n}\n\n_.extend(TAPi18n.translations[\"de\"][namespace], {\"categories\":\"Kategorien\"});\n","var _ = Package.underscore._,\n    package_name = \"telescope:tags\",\n    namespace = \"telescope:tags\";\n\nif (package_name != \"project\") {\n    namespace = TAPi18n.packages[package_name].namespace;\n}\n// integrate the fallback language translations \ntranslations = {};\ntranslations[namespace] = {\"categories\":\"Categories\",\"add_and_remove_categories\":\"Add and remove categories.\",\"all_categories\":\"All\",\"invalid_category\":\"Sorry, this is not a valid category\"};\nTAPi18n._loadLangFileObject(\"en\", translations);\n","var _ = Package.underscore._,\n    package_name = \"telescope:tags\",\n    namespace = \"telescope:tags\";\n\nif (package_name != \"project\") {\n    namespace = TAPi18n.packages[package_name].namespace;\n}\nif(_.isUndefined(TAPi18n.translations[\"es\"])) {\n  TAPi18n.translations[\"es\"] = {};\n}\n\nif(_.isUndefined(TAPi18n.translations[\"es\"][namespace])) {\n  TAPi18n.translations[\"es\"][namespace] = {};\n}\n\n_.extend(TAPi18n.translations[\"es\"][namespace], {\"categories\":\"Categorías\"});\n","var _ = Package.underscore._,\n    package_name = \"telescope:tags\",\n    namespace = \"telescope:tags\";\n\nif (package_name != \"project\") {\n    namespace = TAPi18n.packages[package_name].namespace;\n}\nif(_.isUndefined(TAPi18n.translations[\"fr\"])) {\n  TAPi18n.translations[\"fr\"] = {};\n}\n\nif(_.isUndefined(TAPi18n.translations[\"fr\"][namespace])) {\n  TAPi18n.translations[\"fr\"][namespace] = {};\n}\n\n_.extend(TAPi18n.translations[\"fr\"][namespace], {\"categories\":\"Catégories\",\"add_and_remove_categories\":\"Ajoutez et supprimez des catégories.\",\"all_categories\":\"Tous\",\"invalid_category\":\"Cette catégorie n'est pas valide\"});\n","var _ = Package.underscore._,\n    package_name = \"telescope:tags\",\n    namespace = \"telescope:tags\";\n\nif (package_name != \"project\") {\n    namespace = TAPi18n.packages[package_name].namespace;\n}\nif(_.isUndefined(TAPi18n.translations[\"it\"])) {\n  TAPi18n.translations[\"it\"] = {};\n}\n\nif(_.isUndefined(TAPi18n.translations[\"it\"][namespace])) {\n  TAPi18n.translations[\"it\"][namespace] = {};\n}\n\n_.extend(TAPi18n.translations[\"it\"][namespace], {\"categories\":\"Categorie\"});\n","var _ = Package.underscore._,\n    package_name = \"telescope:tags\",\n    namespace = \"telescope:tags\";\n\nif (package_name != \"project\") {\n    namespace = TAPi18n.packages[package_name].namespace;\n}\nif(_.isUndefined(TAPi18n.translations[\"zh-CN\"])) {\n  TAPi18n.translations[\"zh-CN\"] = {};\n}\n\nif(_.isUndefined(TAPi18n.translations[\"zh-CN\"][namespace])) {\n  TAPi18n.translations[\"zh-CN\"][namespace] = {};\n}\n\n_.extend(TAPi18n.translations[\"zh-CN\"][namespace], {\"categories\":\"分类\"});\n"]}