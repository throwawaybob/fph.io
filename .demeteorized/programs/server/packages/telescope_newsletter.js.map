{"version":3,"sources":["telescope:newsletter//Users/sacha/Dev/Telescope/packages/telescope-newsletter/package-tap.i18n","telescope:newsletter/lib/newsletter.js","telescope:newsletter/lib/server/campaign.js","telescope:newsletter/lib/server/cron.js","telescope:newsletter/lib/server/mailchimp.js","telescope:newsletter/lib/server/routes.js","telescope:newsletter/lib/server/templates/emailDigest.handlebars","telescope:newsletter/lib/server/templates/emailDigestConfirmation.handlebars","telescope:newsletter/lib/server/templates/emailPostItem.handlebars","telescope:newsletter//Users/sacha/Dev/Telescope/packages/telescope-newsletter/i18n/de.i18n.json","telescope:newsletter//Users/sacha/Dev/Telescope/packages/telescope-newsletter/i18n/en.i18n.json","telescope:newsletter//Users/sacha/Dev/Telescope/packages/telescope-newsletter/i18n/es.i18n.json","telescope:newsletter//Users/sacha/Dev/Telescope/packages/telescope-newsletter/i18n/fr.i18n.json","telescope:newsletter//Users/sacha/Dev/Telescope/packages/telescope-newsletter/i18n/it.i18n.json","telescope:newsletter//Users/sacha/Dev/Telescope/packages/telescope-newsletter/i18n/zh-CN.i18n.json"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,sH;;AAEA,+D;AACA,gD;;;;;;;;;;;;;;;;;;;ACHA,uC;AACA,O;AACA,iB;AACA,kB;AACA,I;AACA,c;AACA,e;AACA,kB;AACA,I;AACA,W;AACA,iB;AACA,kB;AACA,I;AACA,W;AACA,iB;AACA,kB;AACA,I;AACA,U;AACA,mB;AACA,kB;AACA,I;AACA,Y;AACA,iB;AACA,kB;AACA,I;AACA,G;;AAEA,gD;AACA,wB;AACA,G;;AAEA,gB;AACA,2B;AACA,gB;AACA,e;AACA,mB;AACA,e;AACA,gB;AACA,K;AACA,G;AACA,G;;AAEA,gB;AACA,G;AACA,iD;AACA,kB;AACA,2B;AACA,oB;AACA,qB;AACA,sC;AACA,iB;AACA,kB;AACA,O;AACA,K;AACA,I;AACA,G;AACA,4D;AACA,kB;AACA,uC;AACA,oB;AACA,qB;AACA,sC;AACA,iB;AACA,kB;AACA,O;AACA,K;AACA,G;AACA,G;;AAEA,W;;AAEA,mB;AACA,G;AACA,kC;AACA,kB;AACA,oB;AACA,qB;AACA,iB;AACA,4B;AACA,6D;AACA,O;AACA,K;AACA,I;AACA,G;AACA,4B;AACA,kB;AACA,oB;AACA,qB;AACA,iC;AACA,iB;AACA,4B;AACA,uE;AACA,O;AACA,K;AACA,I;AACA,G;AACA,iC;AACA,kB;AACA,mB;AACA,qB;AACA,oB;AACA,iB;AACA,4B;AACA,8B;AACA,O;AACA,K;AACA,I;AACA,G;AACA,iC;AACA,kB;AACA,mB;AACA,qB;AACA,oB;AACA,iB;AACA,4B;AACA,gE;AACA,8B;AACA,O;AACA,K;AACA,I;AACA,G;AACA,oC;AACA,kB;AACA,mB;AACA,qB;AACA,iB;AACA,2B;AACA,O;AACA,K;AACA,I;AACA,G;AACA,qC;AACA,kB;AACA,mB;AACA,qB;AACA,iB;AACA,4B;AACA,qG;AACA,kB;AACA,W;AACA,qB;AACA,8B;AACA,Y;AACA,W;AACA,qB;AACA,iD;AACA,Y;AACA,W;AACA,qB;AACA,wC;AACA,Y;AACA,W;AACA,qB;AACA,0C;AACA,W;AACA,S;AACA,O;AACA,K;AACA,I;AACA,G;AACA,gC;AACA,kB;AACA,mB;AACA,qB;AACA,4B;AACA,iB;AACA,4B;AACA,4F;AACA,oB;AACA,O;AACA,K;AACA,I;AACA,G;AACA,+B;AACA,kB;AACA,oB;AACA,qB;AACA,iB;AACA,4B;AACA,qE;AACA,O;AACA,K;AACA,G;AACA,G;;AAEA,gG;AACA,8C;AACA,U;AACA,W;AACA,oC;AACA,iB;AACA,yB;AACA,O;AACA,M;AACA,4C;AACA,I;AACA,G;;AAEA,+B;AACA,gC;AACA,W;AACA,G;;AAEA,mD;AACA,kE;AACA,8D;AACA,yB;AACA,0B;AACA,O;AACA,G;AACA,c;AACA,C;AACA,mF;;;;;;;;;;;;;;;;;;;ACpNA,qB;AACA,iB;;AAEA,0C;;AAEA,qD;AACA,uH;;AAEA,yF;AACA,uD;AACA,wF;;AAEA,mC;AACA,qB;AACA,sB;AACA,gB;AACA,K;AACA,yD;AACA,E;;AAEA,uC;AACA,mC;;AAEA,iF;AACA,6C;AACA,iB;AACA,sB;;AAEA,0B;;AAEA,qD;;AAEA,qG;AACA,qC;AACA,6C;AACA,oC;AACA,gD;AACA,2C;AACA,uD;AACA,O;;AAEA,kB;AACA,iI;;AAEA,gB;AACA,8D;;AAEA,0E;AACA,K;;AAEA,0C;AACA,+D;AACA,oC;AACA,gD;AACA,sB;AACA,K;;AAEA,kD;AACA,4D;;AAEA,kB;AACA,wC;AACA,oD;AACA,mB;AACA,I;;AAEA,kB;AACA,E;;AAEA,0C;AACA,qB;AACA,iF;AACA,qB;AACA,0D;AACA,Q;AACA,+C;AACA,kB;AACA,G;AACA,E;;AAEA,gB;AACA,6B;AACA,uC;AACA,yC;AACA,I;AACA,6B;AACA,uC;AACA,wC;AACA,G;AACA,G;;;;;;;;;;;;;;;;;;;ACzFA,sB;AACA,a;AACA,gC;AACA,a;AACA,uB;AACA,E;;AAEA,wC;AACA,0B;;AAEA,qC;AACA,wE;AACA,6B;AACA,e;AACA,sB;AACA,wB;AACA,sD;AACA,qD;AACA,Y;;AAEA,2C;AACA,8C;AACA,6C;AACA,Y;;AAEA,iC;AACA,4C;AACA,2C;AACA,Y;;AAEA,oC;AACA,0C;AACA,yC;AACA,Y;;AAEA,qC;AACA,yC;AACA,G;AACA,yE;AACA,E;;AAEA,gB;AACA,2B;AACA,uE;AACA,yB;AACA,mB;AACA,G;AACA,G;;AAEA,0B;AACA,kB;AACA,+B;AACA,gC;AACA,uC;AACA,iC;AACA,M;AACA,qB;AACA,6B;AACA,K;AACA,K;AACA,E;AACA,4B;AACA,gD;AACA,a;AACA,G;AACA,G;;;;;;;;;;;;;;;;;;;ACjEA,6C;;AAEA,gD;AACA,8D;;AAEA,+C;AACA,+C;;AAEA,2B;;AAEA,qB;AACA,iC;AACA,gC;AACA,2D;AACA,e;AACA,G;;AAEA,S;;AAEA,sC;AACA,uE;AACA,sD;AACA,6B;AACA,wB;AACA,kB;AACA,0B;AACA,2B;AACA,mC;AACA,yD;AACA,U;AACA,kB;AACA,8B;AACA,oB;AACA,S;AACA,Q;;AAEA,4C;;AAEA,wB;AACA,gF;;AAEA,0C;AACA,8B;;AAEA,8F;;AAEA,6B;AACA,kC;AACA,oC;AACA,Q;;AAEA,0B;AACA,wE;;AAEA,8D;AACA,8B;;AAEA,kD;AACA,kB;AACA,oH;;AAEA,gC;AACA,qF;AACA,4B;AACA,sD;AACA,wB;AACA,S;AACA,kH;;AAEA,qB;AACA,yB;AACA,K;AACA,mB;AACA,G;AACA,E;;AAEA,0D;;AAEA,kB;;AAEA,iG;;AAEA,kF;AACA,wC;AACA,gB;AACA,wB;AACA,+C;AACA,uB;AACA,iC;AACA,e;AACA,8C;AACA,G;;AAEA,+C;AACA,+C;;AAEA,oC;AACA,qF;AACA,2B;;AAEA,S;;AAEA,8D;;AAEA,sC;AACA,8B;AACA,mB;AACA,gC;AACA,6B;AACA,Q;;AAEA,uB;AACA,uE;;AAEA,gC;AACA,mB;AACA,yE;AACA,O;;AAEA,wC;;AAEA,uB;;AAEA,qB;AACA,mE;AACA,K;AACA,G;AACA,E;;AAEA,gB;AACA,4C;AACA,wD;AACA,S;AACA,oD;AACA,qB;AACA,iD;AACA,K;AACA,I;AACA,6C;AACA,0C;AACA,W;AACA,+C;AACA,uB;AACA,mD;AACA,O;AACA,K;AACA,G;AACA,G;;;;;;;;;;;;;;;;;;;ACnJA,4B;;AAEA,mC;AACA,qB;AACA,oB;AACA,wB;AACA,4F;AACA,+I;AACA,oI;;AAEA,0E;AACA,0B;AACA,K;AACA,K;;AAEA,8C;AACA,+B;AACA,oB;AACA,wB;AACA,qF;AACA,kC;AACA,6C;AACA,6C;AACA,S;AACA,2E;AACA,0B;AACA,K;AACA,K;;AAEA,G;;;;;;;;;;;;;;;;;;;AC7BA,mmC;;;;;;;;;;;;;;;;;;ACAA,oe;;;;;;;;;;;;;;;;;;ACAA,urC;;;;;;;;;;;;;;;;;;ACAA,6B;AACA,0C;AACA,uC;;AAEA,gC;AACA,yD;AACA,C;AACA,+C;AACA,kC;AACA,C;;AAEA,0D;AACA,6C;AACA,C;;AAEA,iO;;;;;;;;;;;;;;;;;;;ACfA,6B;AACA,0C;AACA,uC;;AAEA,gC;AACA,yD;AACA,C;AACA,gD;AACA,kB;AACA,+gB;AACA,gD;;;;;;;;;;;;;;;;;;;ACVA,6B;AACA,0C;AACA,uC;;AAEA,gC;AACA,yD;AACA,C;AACA,+C;AACA,kC;AACA,C;;AAEA,0D;AACA,6C;AACA,C;;AAEA,iO;;;;;;;;;;;;;;;;;;;ACfA,6B;AACA,0C;AACA,uC;;AAEA,gC;AACA,yD;AACA,C;AACA,+C;AACA,kC;AACA,C;;AAEA,0D;AACA,6C;AACA,C;;AAEA,od;;;;;;;;;;;;;;;;;;;ACfA,6B;AACA,0C;AACA,uC;;AAEA,gC;AACA,yD;AACA,C;AACA,+C;AACA,kC;AACA,C;;AAEA,0D;AACA,6C;AACA,C;;AAEA,iO;;;;;;;;;;;;;;;;;;;ACfA,6B;AACA,0C;AACA,uC;;AAEA,gC;AACA,yD;AACA,C;AACA,kD;AACA,qC;AACA,C;;AAEA,6D;AACA,gD;AACA,C;;AAEA,oO","file":"/packages/telescope_newsletter.js","sourcesContent":["TAPi18n.packages[\"telescope:newsletter\"] = {\"translation_function_name\":\"__\",\"helper_name\":\"_\",\"namespace\":\"project\"};\n\n// define package's translation function (proxy to the i18next)\n__ = TAPi18n._getPackageI18nextProxy(\"project\");\n","var campaignSchema = new SimpleSchema({\n _id: {\n    type: String,\n    optional: true\n  },\n  createdAt: {\n    type: Date,\n    optional: true\n  },\n  sentAt: {\n    type: String,\n    optional: true\n  },\n  status: {\n    type: String,\n    optional: true\n  },\n  posts: {\n    type: [String],\n    optional: true\n  },\n  webHits: {\n    type: Number,\n    optional: true\n  },\n});\n\nCampaigns = new Meteor.Collection(\"campaigns\", {\n  schema: campaignSchema\n});\n\nPosts.addField({\n  fieldName: 'scheduledAt',\n  fieldSchema: {\n    type: Date,\n    optional: true,\n    autoform: {\n      omit: true\n    }\n  }\n});\n\nUsers.addField([\n  {\n    fieldName: 'telescope.newsletter.showBanner',\n    fieldSchema: {\n      label: 'Show banner',\n      type: Boolean,\n      optional: true,\n      editableBy: ['admin', 'member'],\n      autoform: {\n        omit: true\n      }\n    }\n  },\n  {\n    fieldName: 'telescope.newsletter.subscribeToNewsletter',\n    fieldSchema: {\n      label: 'Subscribe to newsletter',\n      type: Boolean,\n      optional: true,\n      editableBy: ['admin', 'member'],\n      autoform: {\n        omit: true\n      }\n    }\n  }\n]);\n\n// Settings\n\nSettings.addField([\n  {\n    fieldName: 'enableNewsletter',\n    fieldSchema: {\n      type: Boolean,\n      optional: true,\n      autoform: {\n        group: 'newsletter',\n        instructions: 'Enable newsletter (requires restart).'\n      }\n    }\n  },\n  {\n    fieldName: 'showBanner',\n    fieldSchema: {\n      type: Boolean,\n      optional: true,\n      label: 'Newsletter banner',\n      autoform: {\n        group: 'newsletter',\n        instructions: 'Show newsletter sign-up form on the front page.'\n      }\n    }\n  },\n  {\n    fieldName: \"mailChimpAPIKey\",\n    fieldSchema: {\n      type: String,\n      optional: true,\n      private: true,\n      autoform: {\n        group: \"newsletter\",\n        class: \"private-field\"\n      }\n    }\n  },\n  {\n    fieldName: 'mailChimpListId',\n    fieldSchema: {\n      type: String,\n      optional: true,\n      private: true,\n      autoform: {\n        group: 'newsletter',\n        instructions: 'The ID of the list you want to send to.',\n        class: \"private-field\"\n      }\n    }\n  },\n  {\n    fieldName: 'postsPerNewsletter',\n    fieldSchema: {\n      type: Number,\n      optional: true,\n      autoform: {\n        group: 'newsletter'\n      }\n    }\n  },\n  {\n    fieldName: 'newsletterFrequency',\n    fieldSchema: {\n      type: Number,\n      optional: true,\n      autoform: {\n        group: 'newsletter',\n        instructions: 'Defaults to once a week. Changes require restarting your app to take effect.',\n        options: [\n          {\n            value: 1,\n            label: 'Every Day'\n          },\n          {\n            value: 2,\n            label: 'Mondays, Wednesdays, Fridays'\n          },\n          {\n            value: 3,\n            label: 'Mondays & Thursdays'\n          },\n          {\n            value: 7,\n            label: 'Once a week (Mondays)'\n          }\n        ]\n      }\n    }\n  },\n  {\n    fieldName: 'newsletterTime',\n    fieldSchema: {\n      type: String,\n      optional: true,\n      defaultValue: '00:00',\n      autoform: {\n        group: 'newsletter',\n        instructions: 'Defaults to 00:00/12:00 AM. Time to send out newsletter if enabled.',\n        type: 'time'\n      }\n    }\n  },\n  {\n    fieldName: 'autoSubscribe',\n    fieldSchema: {\n      type: Boolean,\n      optional: true,\n      autoform: {\n        group: 'newsletter',\n        instructions: 'Automatically subscribe new users on sign-up.'\n      }\n    }\n  }\n]);\n\n// create new \"campaign\" lens for all posts from the past X days that haven't been scheduled yet\nPosts.views.add(\"campaign\", function (terms) {\n  return {\n    find: {\n      scheduledAt: {$exists: false},\n      postedAt: {\n        $gte: terms.after\n      }\n    },\n    options: {sort: {sticky: -1, score: -1}}\n  };\n});\n\nTelescope.modules.add(\"hero\", {\n  template: 'newsletter_banner',\n  order: 10\n});\n\n function subscribeUserOnProfileCompletion (user) {\n  if (!!Settings.get('autoSubscribe') && !!Users.getEmail(user)) {\n    addToMailChimpList(user, false, function (error, result) {\n      console.log(error);\n      console.log(result);\n    });\n  }\n  return user;\n}\nTelescope.callbacks.add(\"profileCompletedAsync\", subscribeUserOnProfileCompletion);\n","defaultFrequency = 7;\ndefaultPosts = 5;\n\ngetCampaignPosts = function (postsCount) {\n\n  // look for last scheduled campaign in the database\n  var lastCampaign = SyncedCron._collection.findOne({name: 'Schedule newsletter'}, {sort: {finishedAt: -1}, limit: 1});\n\n  // if there is a last campaign use its date, else default to posts from the last 7 days\n  var lastWeek = moment().subtract(7, 'days').toDate();\n  var after = (typeof lastCampaign !== 'undefined') ? lastCampaign.finishedAt : lastWeek\n\n  var params = Posts.getSubParams({\n    view: 'campaign',\n    limit: postsCount,\n    after: after\n  });\n  return Posts.find(params.find, params.options).fetch();\n};\n\nbuildCampaign = function (postsArray) {\n  var postsHTML = '', subject = '';\n\n  // 1. Iterate through posts and pass each of them through a handlebars template\n  postsArray.forEach(function (post, index) {\n    if(index > 0)\n      subject += ', ';\n\n    subject += post.title;\n\n    var postUser = Meteor.users.findOne(post.userId);\n\n    // the naked post object as stored in the database is missing a few properties, so let's add them\n    var properties = _.extend(post, {\n      authorName: Users.getDisplayName(post),\n      postLink: Posts.getLink(post),\n      profileUrl: Users.getProfileUrl(postUser),\n      postPageLink: Posts.getPageUrl(post),\n      date: moment(post.postedAt).format(\"MMMM D YYYY\")\n    });\n\n    if (post.body)\n      properties.body = marked(Telescope.utils.trimWords(post.body, 20)).replace('<p>', '').replace('</p>', ''); // remove p tags\n\n    if(post.url)\n      properties.domain = Telescope.utils.getDomain(post.url);\n\n    postsHTML += Telescope.email.getTemplate('emailPostItem')(properties);\n  });\n\n  // 2. Wrap posts HTML in digest template\n  var digestHTML = Telescope.email.getTemplate('emailDigest')({\n    siteName: Settings.get('title'),\n    date: moment().format(\"dddd, MMMM Do YYYY\"),\n    content: postsHTML\n  });\n\n  // 3. wrap digest HTML in email wrapper template\n  var emailHTML = Telescope.email.buildTemplate(digestHTML);\n\n  var campaign = {\n    postIds: _.pluck(postsArray, '_id'),\n    subject: Telescope.utils.trimWords(subject, 15),\n    html: emailHTML\n  };\n\n  return campaign;\n};\n\nscheduleNextCampaign = function (isTest) {\n  isTest = !! isTest;\n  var posts = getCampaignPosts(Settings.get('postsPerNewsletter', defaultPosts));\n  if(!!posts.length){\n    return scheduleCampaign(buildCampaign(posts), isTest);\n  }else{\n    var result = 'No posts to schedule today…';\n    return result;\n  }\n};\n\nMeteor.methods({\n  sendCampaign: function () {\n    if(Users.is.adminById(this.userId))\n      return scheduleNextCampaign(false);\n  },\n  testCampaign: function () {\n    if(Users.is.adminById(this.userId))\n      return scheduleNextCampaign(true);\n  }\n});\n","SyncedCron.options = {\n  log: false,\n  collectionName: 'cronHistory',\n  utc: false,\n  collectionTTL: 172800\n};\n\nvar defaultFrequency = 7; // once a week\nvar defaultTime = '00:00';\n\nvar getSchedule = function (parser) {\n  var frequency = Settings.get('newsletterFrequency', defaultFrequency);\n  var recur = parser.recur();\n  var schedule;\n  switch (frequency) {\n    case 1: // every day\n      // sched = {schedules: [{dw: [1,2,3,4,5,6,0]}]};\n      schedule = recur.on(1,2,3,4,5,6,0).dayOfWeek();\n      break;\n\n    case 2: // Mondays, Wednesdays, Fridays\n      // sched = {schedules: [{dw: [2,4,6]}]};\n      schedule = recur.on(2,4,6).dayOfWeek();\n      break;\n\n    case 3: // Mondays, Thursdays\n      // sched = {schedules: [{dw: [2,5]}]};\n      schedule = recur.on(2,5).dayOfWeek();\n      break;\n\n    case 7: // Once a week (Mondays)\n      // sched = {schedules: [{dw: [2]}]};\n      schedule = recur.on(2).dayOfWeek();\n      break;\n\n    default: // Once a week (Mondays)\n      schedule = recur.on(2).dayOfWeek();\n  }\n  return schedule.on(Settings.get('newsletterTime', defaultTime)).time();\n};\n\nMeteor.methods({\n  getNextJob: function () {\n    var nextJob = SyncedCron.nextScheduledAtDate('scheduleNewsletter');\n    console.log(nextJob);\n    return nextJob;\n  }\n});\n\nvar addJob = function () {\n  SyncedCron.add({\n    name: 'scheduleNewsletter',\n    schedule: function(parser) {\n      // parser is a later.parse object\n      return getSchedule(parser);\n    },\n    job: function() {\n      scheduleNextCampaign();\n    }\n  });\n};\nMeteor.startup(function () {\n  if (Settings.get('enableNewsletter', false)) {\n    addJob();\n  }\n});\n","var htmlToText = Npm.require('html-to-text');\n\nscheduleCampaign = function (campaign, isTest) {\n  var isTest = typeof isTest === 'undefined' ? false : isTest;\n\n  var apiKey = Settings.get('mailChimpAPIKey');\n  var listId = Settings.get('mailChimpListId');\n\n  if(!!apiKey && !!listId){\n\n\t\tvar wordCount = 15;\n\t\tvar subject = campaign.subject;\n\t\twhile (subject.length >= 150){\n\t\t\tsubject = Telescope.utils.trimWords(subject, wordCount);\n\t\t\twordCount--;\n\t\t}\n\n    try {\n\n      var api = new MailChimp(apiKey);\n      var text = htmlToText.fromString(campaign.html, {wordwrap: 130});\n      var defaultEmail = Settings.get('defaultEmail');\n      var campaignOptions = {\n        type: 'regular',\n        options: {\n          list_id: listId,\n          subject: subject,\n          from_email: defaultEmail,\n          from_name: Settings.get('title')+ ' Top Posts',\n        },\n        content: {\n          html: campaign.html,\n          text: text\n        }\n      };\n\n      console.log( '// Creating campaign…');\n\n      // create campaign\n      var mailchimpCampaign = api.call( 'campaigns', 'create', campaignOptions);\n\n      console.log( '// Campaign created');\n      // console.log(campaign)\n\n      var scheduledTime = moment().utcOffset(0).add(1, 'hours').format(\"YYYY-MM-DD HH:mm:ss\");\n\n      var scheduleOptions = {\n        cid: mailchimpCampaign.id,\n        schedule_time: scheduledTime\n      };\n\n      // schedule campaign\n      var schedule = api.call('campaigns', 'schedule', scheduleOptions);\n\n      console.log('// Campaign scheduled for '+scheduledTime);\n      // console.log(schedule)\n\n      // if this is not a test, mark posts as sent\n      if (!isTest)\n        var updated = Posts.update({_id: {$in: campaign.postIds}}, {$set: {scheduledAt: new Date()}}, {multi: true})\n\n      // send confirmation email\n      var confirmationHtml = Telescope.email.getTemplate('emailDigestConfirmation')({\n        time: scheduledTime,\n        newsletterLink: mailchimpCampaign.archive_url,\n        subject: subject\n      });\n      Telescope.email.send(defaultEmail, 'Newsletter scheduled', Telescope.email.buildTemplate(confirmationHtml));\n\n    } catch (error) {\n      console.log(error);\n    }\n    return subject;\n  }\n};\n\naddToMailChimpList = function(userOrEmail, confirm, done){\n\n  var user, email;\n\n  var confirm = (typeof confirm === 'undefined') ? false : confirm; // default to no confirmation\n\n  // not sure if it's really necessary that the function take both user and email?\n  if (typeof userOrEmail === \"string\") {\n    user = null;\n    email = userOrEmail;\n  } else if (typeof userOrEmail === \"object\") {\n    user = userOrEmail;\n    email = Users.getEmail(user);\n    if (!email)\n      throw 'User must have an email address';\n  }\n\n  var apiKey = Settings.get('mailChimpAPIKey');\n  var listId = Settings.get('mailChimpListId');\n\n  // add a user to a MailChimp list.\n  // called when a new user is created, or when an existing user fills in their email\n  if(!!apiKey && !!listId){\n\n    try {\n\n      console.log('// Adding \"'+email+'\" to MailChimp list…');\n\n      var api = new MailChimp(apiKey);\n      var subscribeOptions = {\n        id: listId,\n        email: {\"email\": email},\n        double_optin: confirm\n      };\n\n      // subscribe user\n      var subscribe = api.call('lists', 'subscribe', subscribeOptions);\n\n      // mark user as subscribed\n      if (!!user) {\n        Users.setSetting(user, 'newsletter.subscribeToNewsletter', true);\n      }\n\n      console.log(\"// User subscribed\");\n\n      return subscribe;\n\n    } catch (error) {\n      throw new Meteor.Error(\"subscription-failed\", error.message);\n    }\n  }\n};\n\nMeteor.methods({\n  addCurrentUserToMailChimpList: function(){\n    var currentUser = Meteor.users.findOne(this.userId);\n    try {\n      return addToMailChimpList(currentUser, false);\n    } catch (error) {\n      throw new Meteor.Error(500, error.message);\n    }\n  },\n  addEmailToMailChimpList: function (email) {\n    if (Users.is.adminById(this.userId)) {\n      try {\n        return addToMailChimpList(email, true);\n      } catch (error) {\n        throw new Meteor.Error(500, error.message);\n      }\n    }\n  }\n});\n","Meteor.startup(function () {\n\n  Router.route('/email/campaign', {\n    name: 'campaign',\n    where: 'server',\n    action: function() {\n      var campaign = buildCampaign(getCampaignPosts(Settings.get('postsPerNewsletter', 5)));\n      var campaignSubject = '<div class=\"campaign-subject\"><strong>Subject:</strong> '+campaign.subject+' (note: contents might change)</div>';\n      var campaignSchedule = '<div class=\"campaign-schedule\"><strong>Scheduled for:</strong> '+ Meteor.call('getNextJob') +'</div>';\n\n      this.response.write(campaignSubject+campaignSchedule+campaign.html);\n      this.response.end();\n    }\n  });\n\n  Router.route('/email/digest-confirmation', {\n    name: 'digestConfirmation',\n    where: 'server',\n    action: function() {\n      var confirmationHtml = Telescope.email.getTemplate('emailDigestConfirmation')({\n        time: 'January 1st, 1901',\n        newsletterLink: 'http://example.com',\n        subject: 'Lorem ipsum dolor sit amet'\n      });\n      this.response.write(Telescope.email.buildTemplate(confirmationHtml));\n      this.response.end();\n    }\n  });\n\n});\n","Handlebars = Handlebars || {};Handlebars.templates = Handlebars.templates || {} ;var template = OriginalHandlebars.compile(\"<style type=\\\"text/css\\\">\\n  .email-digest{\\n  }\\n  .digest-date{\\n    color: #999;\\n    font-weight: normal;\\n    font-size: 16px;\\n  }\\n  .post-item{\\n    border-top: 1px solid #ddd;\\n  }\\n  .post-date{\\n    font-size: 13px;\\n    color: #999;\\n  }\\n  .post-title{\\n    font-size: 18px;\\n    line-height: 1.6;\\n  }\\n  .post-thumbnail{\\n  }\\n  .post-meta{\\n    font-size: 13px;\\n    color: #999;\\n    margin: 5px 0;\\n  }\\n  .post-meta a{\\n    color: #333;\\n  }  \\n  .post-domain{\\n    font-weight: bold;\\n  }\\n  .post-body-excerpt{\\n    font-size: 14px;\\n  }\\n  .post-body-excerpt p{\\n    margin: 0;\\n  }\\n</style>\\n\\n<span class=\\\"heading\\\">Recently on {{siteName}}</span>\\n<span class=\\\"digest-date\\\">– {{date}}</span>\\n<br><br>\\n\\n<div class=\\\"email-digest\\\">\\n  {{{content}}}\\n</div>\\n<br>\");Handlebars.templates[\"emailDigest\"] = function (data, partials) { partials = (partials || {});return template(data || {}, { helpers: OriginalHandlebars.helpers,partials: partials,name: \"emailDigest\"});};","Handlebars = Handlebars || {};Handlebars.templates = Handlebars.templates || {} ;var template = OriginalHandlebars.compile(\"<span class=\\\"heading\\\">Newsletter scheduled for {{time}}</span><br><br>\\n\\n<a href=\\\"{{newsletterLink}}\\\">{{subject}}</a><br><br>\");Handlebars.templates[\"emailDigestConfirmation\"] = function (data, partials) { partials = (partials || {});return template(data || {}, { helpers: OriginalHandlebars.helpers,partials: partials,name: \"emailDigestConfirmation\"});};","Handlebars = Handlebars || {};Handlebars.templates = Handlebars.templates || {} ;var template = OriginalHandlebars.compile(\"<div class=\\\"post-item\\\">\\n<br >\\n\\n<span class=\\\"post-title\\\">\\n  {{#if thumbnailUrl}}\\n    <img class=\\\"post-thumbnail\\\" src=\\\"http:{{thumbnailUrl}}\\\"/>&nbsp;\\n  {{/if}}\\n\\n  <a href=\\\"{{postLink}}\\\" target=\\\"_blank\\\">{{title}}</a>\\n</span>\\n\\n<div class=\\\"post-meta\\\">\\n  {{#if domain}}\\n    <a class=\\\"post-domain\\\" href=\\\"\\\">{{domain}}</a>\\n    | \\n  {{/if}}\\n  <span class=\\\"post-submitted\\\">Submitted by <a href=\\\"{{profileUrl}}\\\" class=\\\"comment-link\\\" target=\\\"_blank\\\">{{authorName}}</a></span>\\n  <span class=\\\"post-date\\\">on {{date}}</span>\\n  |\\n  <a href=\\\"{{postPageLink}}\\\" class=\\\"comment-link\\\" target=\\\"_blank\\\">{{commentCount}} Comments</a>\\n</div>\\n\\n\\n{{#if body}}\\n  <div class=\\\"post-body-excerpt\\\">\\n    {{{htmlBody}}}\\n    <a href=\\\"{{postPageLink}}\\\" class=\\\"comment-link\\\" target=\\\"_blank\\\">Read more</a>\\n  </div>\\n{{/if}}\\n\\n\\n<br>\\n</div>\\n\\n\");Handlebars.templates[\"emailPostItem\"] = function (data, partials) { partials = (partials || {});return template(data || {}, { helpers: OriginalHandlebars.helpers,partials: partials,name: \"emailPostItem\"});};","var _ = Package.underscore._,\n    package_name = \"telescope:newsletter\",\n    namespace = \"telescope:newsletter\";\n\nif (package_name != \"project\") {\n    namespace = TAPi18n.packages[package_name].namespace;\n}\nif(_.isUndefined(TAPi18n.translations[\"de\"])) {\n  TAPi18n.translations[\"de\"] = {};\n}\n\nif(_.isUndefined(TAPi18n.translations[\"de\"][namespace])) {\n  TAPi18n.translations[\"de\"][namespace] = {};\n}\n\n_.extend(TAPi18n.translations[\"de\"][namespace], {\"receive_the_best_of\":\"Receive the best of\",\"right_in_your_inbox\":\"right in your inbox.\",\"get_newsletter\":\"Get Newsletter\",\"thanks_for_subscribing\":\"Thanks for subscribing!\"});\n","var _ = Package.underscore._,\n    package_name = \"telescope:newsletter\",\n    namespace = \"telescope:newsletter\";\n\nif (package_name != \"project\") {\n    namespace = TAPi18n.packages[package_name].namespace;\n}\n// integrate the fallback language translations \ntranslations = {};\ntranslations[namespace] = {\"receive_the_best_of\":\"Receive the best of\",\"right_in_your_inbox\":\"right in your inbox.\",\"get_newsletter\":\"Get Newsletter\",\"thanks_for_subscribing\":\"Thanks for subscribing!\",\"newsletter\":\"newsletter\",\"showBanner\":\"Show Banner\",\"mailChimpAPIKey\":\"MailChimp API Key\",\"mailChimpListId\":\"MailChimp List ID\",\"postsPerNewsletter\":\"Posts per Newsletter\",\"newsletterFrequency\":\"Newsletter Frequency\",\"newsletterTime\":\"Newsletter Time\",\"enableNewsletter\":\"Enable Newsletter\",\"autoSubscribe\":\"Auto Subscribe\"};\nTAPi18n._loadLangFileObject(\"en\", translations);\n","var _ = Package.underscore._,\n    package_name = \"telescope:newsletter\",\n    namespace = \"telescope:newsletter\";\n\nif (package_name != \"project\") {\n    namespace = TAPi18n.packages[package_name].namespace;\n}\nif(_.isUndefined(TAPi18n.translations[\"es\"])) {\n  TAPi18n.translations[\"es\"] = {};\n}\n\nif(_.isUndefined(TAPi18n.translations[\"es\"][namespace])) {\n  TAPi18n.translations[\"es\"][namespace] = {};\n}\n\n_.extend(TAPi18n.translations[\"es\"][namespace], {\"receive_the_best_of\":\"Receive the best of\",\"right_in_your_inbox\":\"right in your inbox.\",\"get_newsletter\":\"Get Newsletter\",\"thanks_for_subscribing\":\"Thanks for subscribing!\"});\n","var _ = Package.underscore._,\n    package_name = \"telescope:newsletter\",\n    namespace = \"telescope:newsletter\";\n\nif (package_name != \"project\") {\n    namespace = TAPi18n.packages[package_name].namespace;\n}\nif(_.isUndefined(TAPi18n.translations[\"fr\"])) {\n  TAPi18n.translations[\"fr\"] = {};\n}\n\nif(_.isUndefined(TAPi18n.translations[\"fr\"][namespace])) {\n  TAPi18n.translations[\"fr\"][namespace] = {};\n}\n\n_.extend(TAPi18n.translations[\"fr\"][namespace], {\"receive_the_best_of\":\"Recevez le meilleur de\",\"right_in_your_inbox\":\"par email.\",\"get_newsletter\":\"S'abonner à la newsletter\",\"thanks_for_subscribing\":\"Merci pour votre abonnement!\",\"newsletter\":\"newsletter\",\"showBanner\":\"Afficher la Bannière\",\"mailChimpAPIKey\":\"Clé API MailChimp\",\"mailChimpListId\":\"ID Liste MailChimp\",\"postsPerNewsletter\":\"Posts par Newsletter\",\"newsletterFrequency\":\"Fréquence de la Newsletter\"});\n","var _ = Package.underscore._,\n    package_name = \"telescope:newsletter\",\n    namespace = \"telescope:newsletter\";\n\nif (package_name != \"project\") {\n    namespace = TAPi18n.packages[package_name].namespace;\n}\nif(_.isUndefined(TAPi18n.translations[\"it\"])) {\n  TAPi18n.translations[\"it\"] = {};\n}\n\nif(_.isUndefined(TAPi18n.translations[\"it\"][namespace])) {\n  TAPi18n.translations[\"it\"][namespace] = {};\n}\n\n_.extend(TAPi18n.translations[\"it\"][namespace], {\"receive_the_best_of\":\"Receive the best of\",\"right_in_your_inbox\":\"right in your inbox.\",\"get_newsletter\":\"Get Newsletter\",\"thanks_for_subscribing\":\"Thanks for subscribing!\"});\n","var _ = Package.underscore._,\n    package_name = \"telescope:newsletter\",\n    namespace = \"telescope:newsletter\";\n\nif (package_name != \"project\") {\n    namespace = TAPi18n.packages[package_name].namespace;\n}\nif(_.isUndefined(TAPi18n.translations[\"zh-CN\"])) {\n  TAPi18n.translations[\"zh-CN\"] = {};\n}\n\nif(_.isUndefined(TAPi18n.translations[\"zh-CN\"][namespace])) {\n  TAPi18n.translations[\"zh-CN\"][namespace] = {};\n}\n\n_.extend(TAPi18n.translations[\"zh-CN\"][namespace], {\"receive_the_best_of\":\"Receive the best of\",\"right_in_your_inbox\":\"right in your inbox.\",\"get_newsletter\":\"Get Newsletter\",\"thanks_for_subscribing\":\"Thanks for subscribing!\"});\n"]}