{"version":3,"sources":["telescope:users//Users/sacha/Dev/Telescope/packages/telescope-users/package-tap.i18n","telescope:users/lib/namespace.js","telescope:users/lib/roles.js","telescope:users/lib/permissions.js","telescope:users/lib/users.js","telescope:users/lib/avatars.js","telescope:users/lib/callbacks.js","telescope:users/lib/modules.js","telescope:users/lib/helpers.js","telescope:users/lib/menu.js","telescope:users/lib/pubsub.js","telescope:users/lib/methods.js","telescope:users/lib/routes.js","telescope:users/lib/server/publications.js","telescope:users/lib/server/create_user.js","telescope:users//Users/sacha/Dev/Telescope/packages/telescope-users/i18n/en.i18n.json","telescope:users//Users/sacha/Dev/Telescope/packages/telescope-users/i18n/fr.i18n.json"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,iH;;AAEA,+D;AACA,gD;;;;;;;;;;;;;;;;;;;ACHA,G;AACA,4B;AACA,mB;AACA,G;AACA,qB;;AAEA,yC;AACA,4C;AACA,yB;AACA,wB;AACA,Y;AACA,2B;AACA,K;AACA,gD;AACA,8C;AACA,U;AACA,wB;AACA,G;AACA,E;;;;;;;;;;;;;;;;;;;AClBA,G;AACA,kB;AACA,sB;AACA,G;AACA,c;;AAEA,G;AACA,8B;AACA,iE;AACA,G;AACA,0C;AACA,O;AACA,2C;AACA,oC;AACA,e;AACA,uC;AACA,G;AACA,E;AACA,oC;;AAEA,G;AACA,kC;AACA,iE;AACA,sF;AACA,G;AACA,oD;AACA,O;AACA,2C;AACA,4B;AACA,qE;AACA,0C;AACA,Y;AACA,qD;AACA,uC;AACA,K;AACA,e;AACA,uC;AACA,G;AACA,E;;AAEA,oC;;AAEA,4C;AACA,O;AACA,2C;AACA,4D;AACA,e;AACA,uC;AACA,G;AACA,E;AACA,wC;;AAEA,sB;AACA,uB;AACA,gC;AACA,I;AACA,uB;AACA,gC;AACA,I;AACA,yB;AACA,kC;AACA,G;AACA,G;;;;;;;;;;;;;;;;;;AC9DA,G;AACA,wB;AACA,uB;AACA,G;AACA,e;;AAEA,G;AACA,mD;AACA,uC;AACA,G;AACA,kC;AACA,iD;;AAEA,0B;AACA,oD;AACA,kE;AACA,K;;AAEA,wE;AACA,G;AACA,c;AACA,E;;AAEA,wC;AACA,6E;AACA,iD;AACA,2E;AACA,G;AACA,c;AACA,E;;AAEA,8C;AACA,8D;AACA,8B;AACA,E;;AAEA,mD;AACA,wE;AACA,E;;;AAGA,+C;AACA,8D;AACA,8B;AACA,E;;AAEA,oD;AACA,yE;AACA,E;;AAEA,+C;AACA,8D;;AAEA,c;AACA,8C;AACA,oC;AACA,gB;AACA,iD;AACA,mC;AACA,kB;AACA,Y;AACA,mB;AACA,K;AACA,U;AACA,gB;AACA,G;AACA,E;;AAEA,kD;AACA,2C;AACA,E;;AAEA,+C;AACA,2C;AACA,E;;AAEA,G;AACA,sC;AACA,wD;AACA,uD;AACA,G;AACA,4C;AACA,8D;;AAEA,2B;AACA,iB;AACA,G;;AAEA,wC;AACA,kD;;AAEA,kC;AACA,E;;AAEA,kD;AACA,0C;AACA,wC;AACA,E;;AAEA,G;AACA,qC;AACA,wD;AACA,6D;AACA,G;AACA,gD;;AAEA,mC;AACA,iB;AACA,G;;AAEA,qH;AACA,sG;;AAEA,mC;;AAEA,E;;AAEA,a;AACA,iF;AACA,wD;AACA,6D;AACA,G;AACA,4C;;AAEA,6C;AACA,6C;AACA,E;;AAEA,oC;AACA,wD;AACA,E;;;;;;;;;;;;;;;;;;;AClIA,G;AACA,c;AACA,uB;AACA,G;AACA,4C;AACA,W;AACA,gB;AACA,I;AACA,U;AACA,iB;AACA,kB;AACA,I;AACA,Y;AACA,gB;AACA,kB;AACA,G;AACA,G;;AAEA,G;AACA,mB;AACA,uB;AACA,G;AACA,+C;AACA,K;AACA,0B;AACA,I;AACA,Q;AACA,iB;AACA,mB;AACA,oC;AACA,e;AACA,a;AACA,K;AACA,I;AACA,K;AACA,uB;AACA,I;AACA,iB;AACA,iB;AACA,iB;AACA,kB;AACA,I;AACA,K;AACA,+G;AACA,I;AACA,gB;AACA,iB;AACA,mB;AACA,iB;AACA,kB;AACA,mC;AACA,I;AACA,K;AACA,yC;AACA,I;AACA,sB;AACA,oC;AACA,iB;AACA,kB;AACA,I;AACA,K;AACA,uC;AACA,I;AACA,mB;AACA,oC;AACA,iB;AACA,kB;AACA,I;AACA,K;AACA,iC;AACA,I;AACA,U;AACA,iB;AACA,mB;AACA,oC;AACA,mB;AACA,mC;AACA,sF;AACA,I;AACA,K;AACA,kF;AACA,I;AACA,c;AACA,iB;AACA,iB;AACA,kB;AACA,I;AACA,K;AACA,qC;AACA,I;AACA,Y;AACA,iB;AACA,iB;AACA,kB;AACA,mB;AACA,e;AACA,gB;AACA,M;AACA,gC;AACA,I;AACA,K;AACA,oB;AACA,I;AACA,U;AACA,iB;AACA,kB;AACA,iB;AACA,kB;AACA,I;AACA,K;AACA,oB;AACA,I;AACA,c;AACA,iB;AACA,iB;AACA,kB;AACA,I;AACA,K;AACA,6D;AACA,I;AACA,a;AACA,iB;AACA,mB;AACA,oC;AACA,mB;AACA,e;AACA,gB;AACA,K;AACA,I;AACA,K;AACA,6E;AACA,I;AACA,S;AACA,iB;AACA,iB;AACA,kB;AACA,I;AACA,K;AACA,+B;AACA,I;AACA,oB;AACA,iB;AACA,mB;AACA,iB;AACA,kB;AACA,oC;AACA,oC;AACA,I;AACA,K;AACA,wC;AACA,I;AACA,oB;AACA,oC;AACA,iB;AACA,kB;AACA,I;AACA,K;AACA,qC;AACA,I;AACA,iB;AACA,oC;AACA,iB;AACA,kB;AACA,I;AACA,K;AACA,iC;AACA,I;AACA,Y;AACA,iB;AACA,kC;AACA,iB;AACA,kB;AACA,mB;AACA,mC;AACA,G;AACA,G;;AAEA,G;AACA,e;AACA,uB;AACA,G;AACA,kC;AACA,Q;AACA,iB;AACA,iB;AACA,kB;AACA,I;AACA,a;AACA,iB;AACA,kC;AACA,iB;AACA,kB;AACA,I;AACA,W;AACA,mB;AACA,kB;AACA,I;AACA,uB;AACA,iB;AACA,oC;AACA,kB;AACA,I;AACA,wB;AACA,kB;AACA,kB;AACA,I;AACA,c;AACA,e;AACA,iB;AACA,kB;AACA,I;AACA,Y;AACA,kB;AACA,mB;AACA,0B;AACA,e;AACA,gB;AACA,K;AACA,I;AACA,Y;AACA,iB;AACA,mB;AACA,kB;AACA,I;AACA,yC;AACA,qC;AACA,kB;AACA,I;AACA,a;AACA,iB;AACA,mB;AACA,kB;AACA,G;AACA,G;;AAEA,gC;;AAEA,G;AACA,2C;AACA,G;AACA,iC;;AAEA,G;AACA,+B;AACA,G;;AAEA,a;AACA,wD;AACA,uD;AACA,G;;;AAGA,sD;AACA,sD;AACA,sD;AACA,sD;;AAEA,G;AACA,sD;AACA,G;AACA,4C;;AAEA,oC;AACA,0D;;AAEA,8F;AACA,wC;AACA,gE;AACA,G;AACA,E;AACA,G;;AAEA,G;AACA,4D;AACA,G;AACA,kE;AACA,iD;AACA,2E;AACA,0G;AACA,G;AACA,G;;AAEA,G;AACA,kG;AACA,G;AACA,uB;AACA,oE;AACA,mB;AACA,yD;AACA,+E;AACA,sD;AACA,+D;AACA,0D;AACA,mE;AACA,8G;AACA,O;;AAEA,6C;AACA,0B;AACA,0C;AACA,2C;AACA,O;;AAEA,K;AACA,K;AACA,C;;;;;;;;;;;;;;;;;;ACjTA,kB;AACA,2B;AACA,0C;AACA,E;;;;;;;;;;;;;;;;;;;ACHA,G;AACA,iC;AACA,wE;AACA,yC;AACA,G;AACA,oC;AACA,gF;AACA,wB;AACA,mC;AACA,gB;AACA,e;AACA,uB;AACA,mB;AACA,sB;AACA,sB;AACA,uB;AACA,yB;AACA,0B;AACA,2B;AACA,K;AACA,I;AACA,wC;;AAEA,mE;AACA,sB;AACA,yC;AACA,4D;AACA,G;;AAEA,6C;AACA,8B;AACA,uD;AACA,iC;AACA,mD;AACA,U;AACA,+C;AACA,G;;AAEA,kC;AACA,4E;;AAEA,mF;AACA,6H;;AAEA,iF;;AAEA,c;AACA,C;AACA,mD;;;AAGA,qC;AACA,yC;AACA,C;AACA,uE;;;;;;;;;;;;;;;;;;;;ACrDA,yC;AACA,G;AACA,0B;AACA,Y;AACA,I;AACA,G;AACA,2B;AACA,Y;AACA,I;AACA,G;AACA,mC;AACA,Y;AACA,I;AACA,G;AACA,qC;AACA,Y;AACA,I;AACA,G;AACA,8B;AACA,Y;AACA,G;AACA,G;;AAEA,sC;AACA,G;AACA,6B;AACA,Y;AACA,G;AACA,G;;;;;;;;;;;;;;;;;;AC7BA,oB;AACA,oB;AACA,oB;;AAEA,G;AACA,kE;AACA,uB;AACA,G;AACA,qC;AACA,M;AACA,sB;AACA,2B;AACA,2F;AACA,8C;AACA,G;AACA,gB;AACA,uB;AACA,gB;AACA,G;AACA,E;AACA,4E;AACA,oG;;AAEA,G;AACA,iF;AACA,uB;AACA,G;AACA,wC;AACA,oC;AACA,c;AACA,U;AACA,iH;AACA,G;AACA,E;AACA,kF;AACA,0G;;AAEA,G;AACA,2B;AACA,uB;AACA,G;AACA,uC;AACA,4D;AACA,E;AACA,gF;;AAEA,G;AACA,yC;AACA,2B;AACA,G;AACA,qD;AACA,4E;AACA,E;;AAEA,G;AACA,4B;AACA,uB;AACA,G;AACA,wC;AACA,iF;AACA,8D;AACA,gC;AACA,mF;AACA,4C;AACA,G;AACA,c;AACA,E;AACA,kF;AACA,0G;;AAEA,G;AACA,2B;AACA,uB;AACA,G;AACA,uC;AACA,iF;AACA,6D;AACA,+B;AACA,+H;AACA,2C;AACA,G;AACA,c;AACA,E;AACA,gF;AACA,wG;;AAEA,G;AACA,qB;AACA,uB;AACA,G;AACA,kC;AACA,6C;AACA,gC;AACA,Q;AACA,gB;AACA,G;AACA,E;AACA,sE;AACA,8F;;AAEA,G;AACA,0B;AACA,uB;AACA,G;AACA,sC;AACA,6C;AACA,6C;AACA,E;AACA,8E;AACA,sG;;AAEA,G;AACA,wC;AACA,uB;AACA,G;AACA,6C;AACA,+E;AACA,+D;AACA,mB;AACA,K;AACA,G;AACA,c;AACA,E;AACA,4F;AACA,oH;;AAEA,G;AACA,qB;AACA,uB;AACA,8B;AACA,+B;AACA,G;AACA,+D;AACA,+B;AACA,sC;;AAEA,0F;AACA,oG;;AAEA,uB;AACA,2D;AACA,iE;AACA,U;AACA,wB;AACA,G;AACA,E;AACA,8H;;AAEA,G;AACA,qB;AACA,uB;AACA,8B;AACA,+B;AACA,G;AACA,wD;AACA,a;AACA,I;AACA,4F;AACA,oG;;AAEA,8B;AACA,iC;AACA,qC;;AAEA,G;AACA,E;AACA,0E;;AAEA,mB;AACA,mB;AACA,mB;;AAEA,8C;AACA,yE;AACA,E;;AAEA,kD;AACA,iC;AACA,6C;AACA,W;AACA,8E;AACA,yD;AACA,E;;AAEA,gE;AACA,sB;AACA,+B;AACA,qB;AACA,gB;AACA,+C;AACA,K;AACA,K;AACA,uB;AACA,E;;AAEA,iD;AACA,gD;AACA,kC;AACA,uB;AACA,+B;AACA,uH;AACA,8G;AACA,Q;AACA,2B;AACA,4B;AACA,G;AACA,E;;AAEA,G;AACA,8D;AACA,2B;AACA,yB;AACA,wB;AACA,G;AACA,wD;AACA,gB;AACA,6B;;AAEA,mB;AACA,mB;AACA,mC;AACA,8D;AACA,Y;AACA,qB;AACA,iE;AACA,Y;AACA,iB;AACA,+B;AACA,Y;AACA,G;;AAEA,iB;AACA,oB;AACA,6B;AACA,Y;AACA,iB;AACA,2B;AACA,Y;AACA,qB;AACA,+B;AACA,Y;AACA,wB;AACA,kC;AACA,Y;AACA,wB;AACA,kC;AACA,G;AACA,U;AACA,e;AACA,yC;AACA,I;AACA,E;;;AAGA,8C;AACA,iD;AACA,E;;AAEA,gC;AACA,6C;AACA,E;;AAEA,yC;AACA,4D;AACA,E;;AAEA,sC;AACA,0D;AACA,E;;;AAGA,G;AACA,kC;AACA,kE;AACA,G;AACA,uC;AACA,4C;AACA,8D;AACA,kC;AACA,4B;AACA,K;AACA,gB;AACA,E;;AAEA,G;AACA,iD;AACA,uB;AACA,G;AACA,6C;AACA,kE;AACA,0D;AACA,K;AACA,E;AACA,4F;AACA,oH;;;;;;;;;;;;;;;;;;;ACtSA,qC;AACA,G;AACA,wB;AACA,oF;AACA,M;AACA,qB;AACA,oC;AACA,I;AACA,G;AACA,wB;AACA,4E;AACA,M;AACA,0B;AACA,oC;AACA,I;AACA,G;AACA,sB;AACA,sB;AACA,4B;AACA,mB;AACA,I;AACA,G;AACA,qB;AACA,sB;AACA,2B;AACA,G;AACA,G;;AAEA,2C;AACA,sC;AACA,G;AACA,6B;AACA,mB;AACA,kC;AACA,G;AACA,G;;;;;;;;;;;;;;;;;;ACnCA,oC;AACA,oC;AACA,oC;;AAEA,G;AACA,oC;AACA,0B;AACA,G;AACA,kB;;AAEA,G;AACA,4C;AACA,iB;AACA,G;;AAEA,0D;;AAEA,2C;AACA,uG;;AAEA,wB;AACA,yE;AACA,6C;AACA,mD;AACA,+B;AACA,sC;AACA,G;;AAEA,G;AACA,qF;AACA,iB;AACA,G;AACA,iC;AACA,mC;AACA,E;;AAEA,G;AACA,mE;AACA,iB;AACA,G;AACA,iC;AACA,Y;AACA,8B;AACA,yB;AACA,gC;AACA,iB;AACA,2B;AACA,yB;AACA,0B;AACA,6C;AACA,mD;AACA,+B;AACA,sC;AACA,iH;AACA,E;;;AAGA,G;AACA,8D;AACA,2B;AACA,yB;AACA,wB;AACA,G;AACA,+D;AACA,gB;AACA,6B;;AAEA,mB;AACA,mB;AACA,mC;AACA,8D;AACA,Y;AACA,qB;AACA,iE;AACA,Y;AACA,iB;AACA,+B;AACA,Y;AACA,G;;AAEA,iB;AACA,oB;AACA,6B;AACA,Y;AACA,iB;AACA,2B;AACA,Y;AACA,qB;AACA,+B;AACA,Y;AACA,wB;AACA,kC;AACA,Y;AACA,wB;AACA,kC;AACA,G;AACA,U;AACA,e;AACA,yC;AACA,I;AACA,E;;;;;;;;;;;;;;;;;;;ACpGA,6D;;AAEA,iC;;AAEA,+E;;AAEA,+B;;AAEA,E;;AAEA,gB;AACA,oD;AACA,oC;AACA,qC;AACA,8C;;AAEA,8E;;AAEA,wC;AACA,sD;AACA,6E;AACA,K;;AAEA,sF;AACA,0B;AACA,qE;AACA,K;;AAEA,6D;AACA,4G;AACA,4D;AACA,mD;AACA,qC;AACA,2G;AACA,O;;AAEA,K;;AAEA,iE;AACA,oD;AACA,2C;AACA,kD;AACA,sD;AACA,sC;AACA,sD;AACA,mH;AACA,S;;AAEA,S;AACA,O;;AAEA,gD;AACA,G;AACA,G;;;;;;;;;;;;;;;;;;;ACrDA,4B;;AAEA,uB;;AAEA,iD;;AAEA,sB;AACA,Y;AACA,sE;AACA,M;AACA,I;;AAEA,wB;AACA,2E;AACA,I;;AAEA,oB;;AAEA,+D;AACA,qF;;AAEA,0C;AACA,mC;AACA,qE;AACA,Y;AACA,c;AACA,oC;AACA,Q;AACA,K;;AAEA,I;;AAEA,yB;AACA,gD;AACA,I;;AAEA,+B;AACA,iF;AACA,I;;AAEA,kB;;AAEA,G;;AAEA,sC;;AAEA,iD;AACA,sB;AACA,Y;AACA,iE;AACA,M;AACA,I;AACA,oB;AACA,mD;AACA,+G;AACA,Y;AACA,gB;AACA,M;AACA,I;AACA,kB;AACA,G;;AAEA,4B;;AAEA,c;;AAEA,6B;AACA,oB;AACA,yB;AACA,gC;AACA,gC;AACA,S;AACA,kB;AACA,K;AACA,K;;AAEA,iB;;AAEA,qC;AACA,yB;AACA,6B;AACA,sC;AACA,K;;AAEA,c;;AAEA,qC;AACA,sB;AACA,0B;AACA,uC;AACA,iC;AACA,qE;AACA,4B;AACA,wC;AACA,yD;AACA,U;AACA,oB;AACA,c;AACA,iC;AACA,O;AACA,K;AACA,K;;AAEA,4B;AACA,gC;AACA,0B;AACA,sC;AACA,K;;AAEA,c;;AAEA,oC;AACA,4C;AACA,2B;AACA,K;;AAEA,qC;;AAEA,sC;AACA,wB;AACA,4B;AACA,sB;AACA,c;AACA,8B;AACA,Q;AACA,K;AACA,K;;AAEA,G;;;;;;;;;;;;;;;;;;;AChIA,gC;AACA,iD;AACA,gD;AACA,sE;AACA,qE;AACA,+F;AACA,a;AACA,uD;AACA,G;AACA,Y;AACA,G;;AAEA,6C;AACA,6C;AACA,8D;AACA,e;AACA,G;;AAEA,oD;AACA,6C;AACA,8D;AACA,e;AACA,G;;AAEA,sD;AACA,6C;AACA,8D;AACA,e;AACA,G;;AAEA,2B;;AAEA,0C;AACA,4F;AACA,c;AACA,G;;AAEA,yD;AACA,0B;;AAEA,4C;AACA,wG;AACA,wC;AACA,gF;AACA,G;AACA,Y;AACA,G;;AAEA,iD;AACA,qD;AACA,sF;;AAEA,+C;AACA,sC;AACA,wB;AACA,U;AACA,c;AACA,G;AACA,G;;;;;;;;;;;;;;;;;;;AC1DA,8C;AACA,gE;AACA,c;AACA,G;;;;;;;;;;;;;;;;;;ACHA,6B;AACA,qC;AACA,kC;;AAEA,gC;AACA,yD;AACA,C;AACA,gD;AACA,kB;AACA,2a;AACA,gD;;;;;;;;;;;;;;;;;;;ACVA,6B;AACA,qC;AACA,kC;;AAEA,gC;AACA,yD;AACA,C;AACA,+C;AACA,kC;AACA,C;;AAEA,0D;AACA,6C;AACA,C;;AAEA,mT","file":"/packages/telescope_users.js","sourcesContent":["TAPi18n.packages[\"telescope:users\"] = {\"translation_function_name\":\"__\",\"helper_name\":\"_\",\"namespace\":\"project\"};\n\n// define package's translation function (proxy to the i18next)\n__ = TAPi18n._getPackageI18nextProxy(\"project\");\n","/**\n * Telescope Users namespace\n * @namespace Users\n */\nUsers = Meteor.users;\n\nUsers.getUser = function (userOrUserId) {\n  if (typeof userOrUserId === \"undefined\") {\n    if (!Meteor.user()) {\n      throw new Error();\n    } else {\n      return Meteor.user();\n    }\n  } else if (typeof userOrUserId === \"string\") {\n    return Meteor.users.findOne(userOrUserId);\n  } else {\n    return userOrUserId;\n  }\n};\n","/**\n * Telescope roles\n * @namespace Users.is\n */\nUsers.is = {};\n\n/**\n * Check if a user is an admin\n * @param {Object|string} userOrUserId - The user or their userId\n */\nUsers.is.admin = function (userOrUserId) {\n  try {\n    var user = Users.getUser(userOrUserId);\n    return !!user && !!user.isAdmin;\n  } catch (e) {\n    return false; // user not logged in\n  }\n};\nUsers.is.adminById = Users.is.admin;\n\n/**\n * Check if a user owns a document\n * @param {Object|string} userOrUserId - The user or their userId\n * @param {Object} document - The document to check (post, comment, user object, etc.)\n */\nUsers.is.owner = function (userOrUserId, document) {\n  try {\n    var user = Users.getUser(userOrUserId);\n    if (!!document.userId) {\n      // case 1: document is a post or a comment, use userId to check\n      return user._id === document.userId;\n    } else {\n      // case 2: document is a user, use _id to check\n      return user._id === document._id;\n    }\n  } catch (e) {\n    return false; // user not logged in\n  }\n};\n\nUsers.is.ownerById = Users.is.owner;\n\nUsers.is.invited = function (userOrUserId) {\n  try {\n    var user = Users.getUser(userOrUserId);\n    return Users.is.admin(user) || user.telescope.isInvited;\n  } catch (e) {\n    return false; // user not logged in\n  }\n};\nUsers.is.invitedById = Users.is.invited;\n\nMeteor.users.helpers({\n  isAdmin: function() {\n    return Users.is.admin(this);\n  },\n  isOwner: function() {\n    return Users.is.owner(this);\n  },\n  isInvited: function() {\n    return Users.is.invited(this);\n  }\n});","/**\n * Telescope permissions\n * @namespace Users.can\n */\nUsers.can = {};\n\n/**\n * Permissions checks.  Return true if all is well.\n * @param {Object} user - Meteor.user()\n */\nUsers.can.view = function (user) {\n  if (Settings.get('requireViewInvite', false)) {\n\n    if (Meteor.isClient) {\n      // on client only, default to the current user\n      user = (typeof user === 'undefined') ? Meteor.user() : user;\n    }\n\n    return (!!user && (Users.is.admin(user) || Users.is.invited(user)));\n  }\n  return true;\n};\n\nUsers.can.viewById = function (userId) {\n  // if an invite is required to view, run permission check, else return true\n  if (Settings.get('requireViewInvite', false)) {\n    return !!userId ? Users.can.view(Meteor.users.findOne(userId)) : false;\n  }\n  return true;\n};\n\nUsers.can.viewPendingPosts = function (user) {\n  user = (typeof user === 'undefined') ? Meteor.user() : user;\n  return Users.is.admin(user);\n};\n\nUsers.can.viewPendingPost = function (user, post) {\n  return Users.is.owner(user, post) || Users.can.viewPendingPosts(user);\n};\n\n\nUsers.can.viewRejectedPosts = function (user) {\n  user = (typeof user === 'undefined') ? Meteor.user() : user;\n  return Users.is.admin(user);\n};\n\nUsers.can.viewRejectedPost = function (user, post) {\n  return Users.is.owner(user, post) || Users.can.viewRejectedPosts(user);\n};\n\nUsers.can.post = function (user, returnError) {\n  user = (typeof user === 'undefined') ? Meteor.user() : user;\n\n  if (!user) {\n    return returnError ? \"no_account\" : false;\n  } else if (Users.is.admin(user)) {\n    return true;\n  } else if (Settings.get('requirePostInvite')) {\n    if (user.telescope.isInvited) {\n      return true;\n    } else {\n      return false;\n    }\n  } else {\n    return true;\n  }\n};\n\nUsers.can.comment = function (user, returnError) {\n  return Users.can.post(user, returnError);\n};\n\nUsers.can.vote = function (user, returnError) {\n  return Users.can.post(user, returnError);\n};\n\n/**\n * Check if a user can edit a document\n * @param {Object} user - The user performing the action\n * @param {Object} document - The document being edited\n */\nUsers.can.edit = function (user, document) {\n  user = (typeof user === 'undefined') ? Meteor.user() : user;\n\n  if (!user || !document) {\n    return false;\n  }\n\n  var adminCheck = Users.is.admin(user);\n  var ownerCheck = Users.is.owner(user, document);\n\n  return adminCheck || ownerCheck;\n};\n\nUsers.can.editById = function (userId, document) {\n  var user = Meteor.users.findOne(userId);\n  return Users.can.edit(user, document);\n};\n\n/**\n * Check if a user can submit a field\n * @param {Object} user - The user performing the action\n * @param {Object} field - The field being edited or inserted\n */\nUsers.can.submitField = function (user, field) {\n\n  if (!field.editableBy || !user) {\n    return false;\n  }\n\n  var adminCheck = _.contains(field.editableBy, \"admin\") && Users.is.admin(user); // is the field editable by admins?\n  var memberCheck = _.contains(field.editableBy, \"member\"); // is the field editable by regular users?\n\n  return adminCheck || memberCheck;\n\n};\n\n/** @function\n * Check if a user can edit a field – for now, identical to Users.can.submitField\n * @param {Object} user - The user performing the action\n * @param {Object} field - The field being edited or inserted\n */\nUsers.can.editField = Users.can.submitField;\n\nUsers.can.currentUserEdit = function (item) {\n  return Users.can.edit(Meteor.user(), item);\n};\n\nUsers.can.invite = function (user) {\n  return Users.is.invited(user) || Users.is.admin(user);\n};\n","/**\n * Vote schema\n * @type {SimpleSchema}\n */\nTelescope.schemas.votes = new SimpleSchema({\n  itemId: {\n    type: String\n  },\n  power: {\n    type: Number,\n    optional: true\n  },\n  votedAt: {\n    type: Date, \n    optional: true\n  }\n});\n\n/**\n * User Data schema\n * @type {SimpleSchema}\n */\nTelescope.schemas.userData = new SimpleSchema({\n  /**\n    Bio (Markdown version)\n  */\n  bio: {\n    type: String,\n    optional: true,\n    editableBy: [\"member\", \"admin\"],\n    autoform: {\n      rows: 5\n    }\n  },\n  /**\n    Total comment count\n  */\n  commentCount: {\n    type: Number,\n    public: true,\n    optional: true\n  },\n  /**\n    The name displayed throughout the app. Can contain spaces and special characters, doesn't need to be unique\n  */\n  displayName: {\n    type: String,\n    optional: true,\n    public: true,\n    profile: true,\n    editableBy: [\"member\", \"admin\"]\n  },\n  /**\n    An array containing comment downvotes\n  */\n  downvotedComments: {\n    type: [Telescope.schemas.votes],\n    public: true,\n    optional: true\n  },\n  /**\n    An array containing posts downvotes\n  */\n  downvotedPosts: {\n    type: [Telescope.schemas.votes],\n    public: true,\n    optional: true\n  },\n  /**\n    The user's email. Modifiable.\n  */\n  email: {\n    type: String,\n    optional: true,\n    regEx: SimpleSchema.RegEx.Email,\n    required: true,\n    editableBy: [\"member\", \"admin\"]\n    // unique: true // note: find a way to fix duplicate accounts before enabling this\n  },\n  /**\n    A hash of the email, used for Gravatar // TODO: change this when email changes\n  */\n  emailHash: {\n    type: String,\n    public: true,\n    optional: true\n  },\n  /**\n    The HTML version of the bio field\n  */\n  htmlBio: {\n    type: String,\n    public: true,\n    profile: true,\n    optional: true,\n    autoform: {\n      omit: true\n    },\n    template: \"user_profile_bio\"\n  },\n  /**\n    The user's karma\n  */\n  karma: {\n    type: Number,\n    decimal: true,\n    public: true,\n    optional: true\n  },\n  /**\n    Total post count\n  */\n  postCount: {\n    type: Number,\n    public: true,\n    optional: true\n  },\n  /**\n    A blackbox modifiable object to store the user's settings\n  */\n  settings: {\n    type: Object,\n    optional: true,\n    editableBy: [\"member\", \"admin\"],\n    blackbox: true,\n    autoform: {\n      omit: true\n    }\n  },\n  /**\n    The user's profile URL slug // TODO: change this when displayName changes\n  */\n  slug: {\n    type: String,\n    public: true,\n    optional: true\n  },\n  /**\n    The user's Twitter username\n  */\n  twitterUsername: {\n    type: String,\n    optional: true,\n    public: true,\n    profile: true,\n    editableBy: [\"member\", \"admin\"],\n    template: \"user_profile_twitter\"\n  },\n  /**\n    An array containing comments upvotes\n  */\n  upvotedComments: {\n    type: [Telescope.schemas.votes],\n    public: true,\n    optional: true\n  },\n  /**\n    An array containing posts upvotes\n  */\n  upvotedPosts: {\n    type: [Telescope.schemas.votes],\n    public: true,\n    optional: true\n  },\n  /**\n    A link to the user's homepage\n  */\n  website: {\n    type: String,\n    regEx: SimpleSchema.RegEx.Url,\n    public: true,\n    profile: true,\n    optional: true,\n    editableBy: [\"member\", \"admin\"]\n  }\n});\n\n/**\n * Users schema\n * @type {SimpleSchema}\n */\nUsers.schema = new SimpleSchema({ \n  _id: {\n    type: String,\n    public: true,\n    optional: true\n  },\n  username: {\n    type: String,\n    regEx: /^[a-z0-9A-Z_]{3,15}$/,\n    public: true,\n    optional: true\n  },\n  emails: {\n    type: [Object],\n    optional: true\n  },\n  \"emails.$.address\": {\n    type: String,\n    regEx: SimpleSchema.RegEx.Email,\n    optional: true\n  },\n  \"emails.$.verified\": {\n    type: Boolean,\n    optional: true\n  },\n  createdAt: {\n    type: Date,\n    public: true,\n    optional: true\n  },\n  isAdmin: {\n    type: Boolean,\n    optional: true,\n    editableBy: [\"admin\"],\n    autoform: {\n      omit: true\n    }\n  },\n  profile: {\n    type: Object,\n    optional: true,\n    blackbox: true\n  },\n  telescope: { // telescope-specific data\n    type: Telescope.schemas.userData,\n    optional: true\n  },\n  services: {\n    type: Object,\n    optional: true,\n    blackbox: true\n  }\n});\n\nUsers.schema.internationalize();\n\n/**\n * Attach schema to Meteor.users collection\n */\nUsers.attachSchema(Users.schema);\n\n/**\n * Users collection permissions\n */\n\nUsers.allow({\n  update: _.partial(Telescope.allowCheck, Meteor.users),\n  remove: _.partial(Telescope.allowCheck, Meteor.users)\n});\n\n\n//////////////////////////////////////////////////////\n// Collection Hooks                                 //\n// https://atmospherejs.com/matb33/collection-hooks //\n//////////////////////////////////////////////////////\n\n/**\n * Generate HTML body from Markdown on user bio insert\n */\nUsers.after.insert(function (userId, user) {\n\n  // run create user async callbacks\n  Telescope.callbacks.runAsync(\"onCreateUserAsync\", user);\n\n  // check if all required fields have been filled in. If so, run profile completion callbacks\n  if (Users.hasCompletedProfile(user)) {\n    Telescope.callbacks.runAsync(\"profileCompletedAsync\", user);\n  }\n  \n});\n\n/**\n * Generate HTML body from Markdown when user bio is updated\n */\nUsers.before.update(function (userId, doc, fieldNames, modifier) {\n  // if bio is being modified, update htmlBio too\n  if (Meteor.isServer && modifier.$set && modifier.$set[\"telescope.bio\"]) {\n    modifier.$set[\"telescope.htmlBio\"] = Telescope.utils.sanitize(marked(modifier.$set[\"telescope.bio\"]));\n  }\n});\n\n/**\n * If user.telescope.email has changed, check for existing emails and change user.emails if needed\n */\n if (Meteor.isServer) {\n  Users.before.update(function (userId, doc, fieldNames, modifier) {\n    var user = doc;\n    // if email is being modified, update user.emails too\n    if (Meteor.isServer && modifier.$set && modifier.$set[\"telescope.email\"]) {\n      var newEmail = modifier.$set[\"telescope.email\"];\n      // check for existing emails and throw error if necessary\n      var userWithSameEmail = Users.findByEmail(newEmail);\n      if (userWithSameEmail && userWithSameEmail._id !== doc._id) {\n        throw new Meteor.Error(\"email_taken2\", i18n.t(\"this_email_is_already_taken\") + \" (\" + newEmail + \")\");\n      }\n\n      // if user.emails exists, change it too\n      if (!!user.emails) {\n        user.emails[0].address = newEmail;\n        modifier.$set.emails = user.emails;\n      }\n\n    }\n  });\n}","Avatar.options = {\n  fallbackType: 'initials',\n  emailHashProperty: 'telescope.emailHash'\n};\n","/**\n * Set up user object on creation\n * @param {Object} user – the user object being iterated on and returned\n * @param {Object} options – user options\n */\nfunction setupUser (user, options) {\n  // ------------------------------ Properties ------------------------------ //\n  var userProperties = {\n    profile: options.profile || {},\n    telescope: {\n      karma: 0,\n      isInvited: false,\n      postCount: 0,\n      commentCount: 0,\n      invitedCount: 0,\n      upvotedPosts: [],\n      downvotedPosts: [],\n      upvotedComments: [],\n      downvotedComments: []\n    }\n  };\n  user = _.extend(user, userProperties);\n\n  // set email on user.telescope, and use it to generate email hash\n  if (options.email) {\n    user.telescope.email = options.email;\n    user.telescope.emailHash = Gravatar.hash(options.email);\n  }\n\n  // look in a few places for the displayName\n  if (user.profile.username) {\n    user.telescope.displayName = user.profile.username;\n  } else if (user.profile.name) {\n    user.telescope.displayName = user.profile.name;\n  } else {\n    user.telescope.displayName = user.username;\n  }\n\n  // create slug from display name\n  user.telescope.slug = Telescope.utils.slugify(user.telescope.displayName);\n\n  // if this is not a dummy account, and is the first user ever, make them an admin\n  user.isAdmin = (!user.profile.isDummy && Meteor.users.find({'profile.isDummy': {$ne: true}}).count() === 0) ? true : false;\n\n  Events.track('new user', {username: user.username, email: user.profile.email});\n\n  return user;\n}\nTelescope.callbacks.add(\"onCreateUser\", setupUser);\n\n\nfunction hasCompletedProfile (user) {\n  return Users.hasCompletedProfile(user);\n}\nTelescope.callbacks.add(\"profileCompletedChecks\", hasCompletedProfile);\n","\nTelescope.modules.add(\"profileDisplay\", [\n  {\n    template: 'user_info',\n    order: 1\n  },\n  {\n    template: 'user_posts',\n    order: 2\n  },\n  {\n    template: 'user_upvoted_posts',\n    order: 3\n  },\n  {\n    template: 'user_downvoted_posts',\n    order: 5\n  },\n  {\n    template: 'user_comments',\n    order: 5\n  }\n]);\n\nTelescope.modules.add(\"profileEdit\", [\n  {\n    template: 'user_account',\n    order: 1\n  }\n]);","////////////////////\n//  User Getters  //\n////////////////////\n\n/**\n * Get a user's username (unique, no special characters or spaces)\n * @param {Object} user\n */\nUsers.getUserName = function (user) {\n  try{\n    if (user.username)\n      return user.username;\n    if (user && user.services && user.services.twitter && user.services.twitter.screenName)\n      return user.services.twitter.screenName;\n  }\n  catch (error){\n    console.log(error);\n    return null;\n  }\n};\nUsers.helpers({getUserName: function () {return Users.getUserName(this);}});\nUsers.getUserNameById = function (userId) {return Users.getUserName(Meteor.users.findOne(userId))}; \n\n/**\n * Get a user's display name (not unique, can take special characters and spaces)\n * @param {Object} user\n */\nUsers.getDisplayName = function (user) {\n  if (typeof user === \"undefined\") {\n    return \"\";\n  } else {\n    return (user.telescope && user.telescope.displayName) ? user.telescope.displayName : Users.getUserName(user);\n  }\n};\nUsers.helpers({getDisplayName: function () {return Users.getDisplayName(this);}});\nUsers.getDisplayNameById = function (userId) {return Users.getDisplayName(Meteor.users.findOne(userId));};\n\n/**\n * Get a user's profile URL\n * @param {Object} user\n */\nUsers.getProfileUrl = function (user) {\n  return Users.getProfileUrlBySlugOrId(user.telescope.slug);\n};\nUsers.helpers({getProfileUrl: function () {return Users.getProfileUrl(this);}});\n\n/**\n * Get a user's profile URL by slug or Id\n * @param {String} slugOrId\n */\nUsers.getProfileUrlBySlugOrId = function (slugOrId) {\n  return Telescope.utils.getRouteUrl('user_profile', {_idOrSlug: slugOrId});\n};\n\n/**\n * Get a user's Twitter name\n * @param {Object} user\n */\nUsers.getTwitterName = function (user) {\n  // return twitter name provided by user, or else the one used for twitter login\n  if(Telescope.utils.checkNested(user, 'profile', 'twitter')){\n    return user.profile.twitter;\n  }else if(Telescope.utils.checkNested(user, 'services', 'twitter', 'screenName')){\n    return user.services.twitter.screenName;\n  }\n  return null;\n};\nUsers.helpers({getTwitterName: function () {return Users.getTwitterName(this);}});\nUsers.getTwitterNameById = function (userId) {return Users.getTwitterName(Meteor.users.findOne(userId));};\n\n/**\n * Get a user's GitHub name\n * @param {Object} user\n */\nUsers.getGitHubName = function (user) {\n  // return twitter name provided by user, or else the one used for twitter login\n  if(Telescope.utils.checkNested(user, 'profile', 'github')){\n    return user.profile.github;\n  }else if(Telescope.utils.checkNested(user, 'services', 'github', 'screenName')){ // TODO: double-check this with GitHub login\n    return user.services.github.screenName;\n  }\n  return null;\n};\nUsers.helpers({getGitHubName: function () {return Users.getGitHubName(this);}});\nUsers.getGitHubNameById = function (userId) {return Users.getGitHubName(Meteor.users.findOne(userId));};\n\n/**\n * Get a user's email\n * @param {Object} user\n */\nUsers.getEmail = function (user) {\n  if(user.telescope && user.telescope.email){\n    return user.telescope.email;\n  }else{\n    return null;\n  }\n};\nUsers.helpers({getEmail: function () {return Users.getEmail(this);}});\nUsers.getEmailById = function (userId) {return Users.getEmail(Meteor.users.findOne(userId));};\n\n/**\n * Get a user's email hash\n * @param {Object} user\n */\nUsers.getEmailHash = function (user) {\n  // has to be this way to work with Gravatar\n  return Gravatar.hash(Users.getEmail(user));\n};\nUsers.helpers({getEmailHash: function () {return Users.getEmailHash(this);}});\nUsers.getEmailHashById = function (userId) {return Users.getEmailHash(Meteor.users.findOne(userId));};\n\n/**\n * Check if a user's profile is complete\n * @param {Object} user\n */\nUsers.userProfileComplete = function (user) {\n  for (var i = 0; i < Telescope.callbacks.profileCompletedChecks.length; i++) {\n    if (!Telescope.callbacks.profileCompletedChecks[i](user)) {\n      return false;\n    }\n  }\n  return true;\n};\nUsers.helpers({userProfileComplete: function () {return Users.userProfileComplete(this);}});\nUsers.userProfileCompleteById = function (userId) {return Users.userProfileComplete(Meteor.users.findOne(userId));};\n\n/**\n * Get a user setting\n * @param {Object} user\n * @param {String} settingName\n * @param {Object} defaultValue\n */\nUsers.getSetting = function (user, settingName, defaultValue) {\n  user = user || Meteor.user();\n  defaultValue = defaultValue || null;\n\n  // all settings should be in the user.telescope namespace, so add \"telescope.\" if needed\n  settingName = settingName.slice(0,10) === \"telescope.\" ? settingName : \"telescope.\" + settingName;\n\n  if (user.telescope) {\n    var settingValue = this.getProperty(user, settingName);\n    return (settingValue === null) ? defaultValue : settingValue;\n  } else {\n    return defaultValue;\n  }\n};\nUsers.helpers({getSetting: function (settingName, defaultValue) {return Users.getSetting(this, settingName, defaultValue);}});\n\n/**\n * Set a user setting\n * @param {Object} user\n * @param {String} settingName\n * @param {Object} defaultValue\n */\nUsers.setSetting = function (user, settingName, value) {\n  if (user) {\n    \n    // all settings should be in the user.telescope namespace, so add \"telescope.\" if needed\n    var field = settingName.slice(0,10) === \"telescope.\" ? settingName : \"telescope.\" + settingName;\n\n    var modifier = {$set: {}};\n    modifier.$set[field] = value;\n    Users.update(user._id, modifier);\n\n  }\n};\nUsers.helpers({setSetting: function () {return Users.setSetting(this);}});\n\n///////////////////\n// Other Helpers //\n///////////////////\n\nUsers.findLast = function (user, collection) {\n  return collection.findOne({userId: user._id}, {sort: {createdAt: -1}});\n};\n\nUsers.timeSinceLast = function (user, collection){\n  var now = new Date().getTime();\n  var last = this.findLast(user, collection);\n  if(!last)\n    return 999; // if this is the user's first post or comment ever, stop here\n  return Math.abs(Math.floor((now-last.createdAt)/1000));\n};\n\nUsers.numberOfItemsInPast24Hours = function (user, collection) {\n  var mNow = moment();\n  var items = collection.find({\n    userId: user._id,\n    createdAt: {\n      $gte: mNow.subtract(24, 'hours').toDate()\n    }\n  });\n  return items.count();\n};\n\nUsers.getProperty = function (object, property) {\n  // recursive function to get nested properties\n  var array = property.split('.');\n  if(array.length > 1){\n    var parent = array.shift();\n    // if our property is not at this level, call function again one level deeper if we can go deeper, else return null\n    return (typeof object[parent] === \"undefined\") ? null : this.getProperty(object[parent], array.join('.'));\n  }else{\n    // else return property\n    return object[array[0]];\n  }\n};\n\n/**\n * Build Users subscription with filter, sort, and limit args.\n * @param {String} filterBy\n * @param {String} sortBy\n * @param {Number} limit\n */\nUsers.getSubParams = function(filterBy, sortBy, limit) {\n  var find = {},\n      sort = {createdAt: -1};\n\n  switch(filterBy){\n    case 'invited':\n      // consider admins as invited\n      find = { $or: [{ isInvited: true }, { isAdmin: true }]};\n      break;\n    case 'uninvited':\n      find = { $and: [{ isInvited: false }, { isAdmin: false }]};\n      break;\n    case 'admin':\n      find = { isAdmin: true };\n      break;\n  }\n\n  switch(sortBy){\n    case 'username':\n      sort = { username: 1 };\n      break;\n    case 'karma':\n      sort = { karma: -1 };\n      break;\n    case 'postCount':\n      sort = { postCount: -1 };\n      break;\n    case 'commentCount':\n      sort = { commentCount: -1 };\n      break;\n    case 'invitedCount':\n      sort = { invitedCount: -1 };\n  }\n  return {\n    find: find,\n    options: { sort: sort, limit: limit }\n  };\n};\n\n\nUsers.updateAdmin = function (userId, admin) {\n  Users.update(userId, {$set: {isAdmin: admin}});\n};\n\nUsers.adminUsers = function () {\n  return this.find({isAdmin : true}).fetch();\n};\n\nUsers.getCurrentUserEmail = function () {\n  return Meteor.user() ? Users.getEmail(Meteor.user()) : '';\n};\n\nUsers.findByEmail = function (email) {\n  return Meteor.users.findOne({\"telescope.email\": email});\n};\n\n\n/**\n * @method Users.getRequiredFields\n * Get a list of all fields required for a profile to be complete.\n */\nUsers.getRequiredFields = function () {\n  var schema = Users.simpleSchema()._schema;\n  var fields = _.filter(_.keys(schema), function (fieldName) {\n    var field = schema[fieldName];\n    return !!field.required;\n  });\n  return fields;\n};\n\n/**\n * Check if the user has completed their profile.\n * @param {Object} user\n */\nUsers.hasCompletedProfile = function (user) {\n  return _.every(Users.getRequiredFields(), function (fieldName) {\n    return !!Telescope.getNestedProperty(user, fieldName);\n  });\n};\nUsers.helpers({hasCompletedProfile: function () {return Users.hasCompletedProfile(this);}});\nUsers.hasCompletedProfileById = function (userId) {return Users.hasCompletedProfile(Meteor.users.findOne(userId));};\n","Telescope.menuItems.add(\"userMenu\", [\n  {\n    route: function () {\n      return Router.path('user_profile', {_idOrSlug: Meteor.user().telescope.slug});\n    },\n    label: 'profile',\n    description: 'view_your_profile'\n  },\n  {\n    route: function () {\n      return Router.path('user_edit', {slug: Meteor.user().telescope.slug});\n    },\n    label: 'edit_account',\n    description: 'edit_your_profile'\n  },\n  {\n    route: 'settings',\n    label: 'settings',\n    description: 'settings',\n    adminOnly: true\n  },\n  {\n    route: 'signOut',\n    label: 'sign_out',\n    description: 'sign_out'\n  }\n]);\n\n// array containing items in the admin menu\nTelescope.menuItems.add(\"adminMenu\", [\n  {\n    route: 'users_dashboard',\n    label: 'users',\n    description: 'users_dashboard'\n  }\n]);","////////////////////////////////////\n// Publications and Subscriptions //\n////////////////////////////////////\n\n/**\n * Users pub/sub configs and methods\n * @namespace Users.pubsub\n */\nUsers.pubsub = {};\n\n/**\n * Default user object fields in publication\n * @type {Object}\n */\n\nvar publicFields = Users.simpleSchema().getPublicFields();\n\n// add public fields as specified in schema\nUsers.pubsub.publicProperties = _.object(publicFields, _.map(publicFields, function () {return true}));\n\n// add a few more fields\nUsers.pubsub.publicProperties = _.extend(Users.pubsub.publicProperties, {\n  'services.twitter.profile_image_url': true,\n  'services.twitter.profile_image_url_https': true,\n  'services.facebook.id': true,\n  'services.twitter.screenName': true,\n});\n\n/**\n * Options for your own user account (for security reasons, block certain properties)\n * @type {Object}\n */\nUsers.pubsub.hiddenProperties = {\n  'services.password.bcrypt': false\n};\n\n/**\n * Minimum required properties to display avatars and display names\n * @type {Object}\n */\nUsers.pubsub.avatarProperties = {\n  _id: true,\n  'telescope.emailHash': true,\n  'telescope.slug': true,\n  'telescope.displayName': true,\n  username: true,\n  'profile.username': true,\n  'profile.github': true,\n  'profile.twitter': true,\n  'services.twitter.profile_image_url': true,\n  'services.twitter.profile_image_url_https': true,\n  'services.facebook.id': true,\n  'services.twitter.screenName': true,\n  'services.github.screenName': true, // Github is not really used, but there are some mentions to it in the code\n};\n\n\n/**\n * Build Users subscription with filter, sort, and limit args.\n * @param {String} filterBy\n * @param {String} sortBy\n * @param {Number} limit\n */\nUsers.pubsub.getSubParams = function(filterBy, sortBy, limit) {\n  var find = {},\n      sort = {createdAt: -1};\n\n  switch(filterBy){\n    case 'invited':\n      // consider admins as invited\n      find = { $or: [{ isInvited: true }, { isAdmin: true }]};\n      break;\n    case 'uninvited':\n      find = { $and: [{ isInvited: false }, { isAdmin: false }]};\n      break;\n    case 'admin':\n      find = { isAdmin: true };\n      break;\n  }\n\n  switch(sortBy){\n    case 'username':\n      sort = { username: 1 };\n      break;\n    case 'karma':\n      sort = { karma: -1 };\n      break;\n    case 'postCount':\n      sort = { postCount: -1 };\n      break;\n    case 'commentCount':\n      sort = { commentCount: -1 };\n      break;\n    case 'invitedCount':\n      sort = { invitedCount: -1 };\n  }\n  return {\n    find: find,\n    options: { sort: sort, limit: limit }\n  };\n};\n","var completeUserProfile = function (modifier, userId, user) {\n\n  Users.update(userId, modifier);\n\n  Telescope.callbacks.runAsync(\"profileCompletedAsync\", Users.findOne(userId));\n\n  return Users.findOne(userId);\n\n};\n\nMeteor.methods({\n  completeUserProfile: function (modifier, userId) {\n    var currentUser = Meteor.user(),\n        user = Users.findOne(userId),\n        schema = Users.simpleSchema()._schema;\n\n    // ------------------------------ Checks ------------------------------ //\n\n    // check that user can edit document\n    if (!user || !Users.can.edit(currentUser, user)) {\n      throw new Meteor.Error(601, i18n.t('sorry_you_cannot_edit_this_user'));\n    }\n\n    // if an $unset modifier is present, it means one or more of the fields is missing\n    if (modifier.$unset) {\n      throw new Meteor.Error(601, i18n.t('all_fields_are_required'));\n    }\n\n    // check for existing emails and throw error if necessary\n    // NOTE: redundant with collection hook, but better to throw the error here to avoid wiping out the form\n    if (modifier.$set && modifier.$set[\"telescope.email\"]) {\n      var email = modifier.$set[\"telescope.email\"];\n      if (Users.findByEmail(email)) {\n        throw new Meteor.Error(\"email_taken1\", i18n.t(\"this_email_is_already_taken\") + \" (\" + email + \")\");\n      }\n\n    }\n\n    // go over each field and throw an error if it's not editable\n    // loop over each operation ($set, $unset, etc.)\n    _.each(modifier, function (operation) {\n      // loop over each property being operated on\n      _.keys(operation).forEach(function (fieldName) {\n        var field = schema[fieldName];\n        if (!Users.can.editField(user, field, user)) {\n          throw new Meteor.Error(\"disallowed_property\", i18n.t('disallowed_property_detected') + \": \" + fieldName);\n        }\n\n      });\n    });\n\n    completeUserProfile(modifier, userId, user);\n  }\n});\n","// Controller for user pages\n\nUsers.controllers = {};\n\nUsers.controllers.page = RouteController.extend({\n\n  waitOn: function() {\n    return [\n      coreSubscriptions.subscribe('singleUser', this.params._idOrSlug)\n    ];\n  },\n\n  getUser: function () {\n    return Meteor.users.findOne({\"telescope.slug\": this.params._idOrSlug});\n  },\n\n  data: function() {\n\n    var findById = Meteor.users.findOne(this.params._idOrSlug);\n    var findBySlug = Meteor.users.findOne({\"telescope.slug\": this.params._idOrSlug});\n\n    if (typeof findById !== 'undefined') {\n      // redirect to slug-based URL\n      Router.go(Users.getProfileUrl(findById), {replaceState: true});\n    } else {\n      return {\n        user: findById || findBySlug\n      };\n    }\n\n  },\n\n  getTitle: function () {\n    return Users.getDisplayName(this.getUser());\n  },\n\n  getDescription: function () {\n    return i18n.t('the_profile_of') + ' ' + Users.getDisplayName(this.getUser());\n  },\n\n  fastRender: true\n\n});\n\n// Controller for user account editing\n\nUsers.controllers.edit = RouteController.extend({\n  waitOn: function() {\n    return [\n      coreSubscriptions.subscribe('singleUser', this.params.slug)\n    ];\n  },\n  data: function() {\n    // if there is no slug, default to current user\n    var user = !!this.params.slug ? Meteor.users.findOne({\"telescope.slug\": this.params.slug}) : Meteor.user();\n    return {\n      user: user\n    };\n  },\n  fastRender: true\n});\n\nMeteor.startup(function () {\n\n// User Logout\n\n  Router.route('/sign-out', {\n    name: 'signOut',\n    template: 'sign_out',\n    onBeforeAction: function() {\n      Meteor.logout(function() {\n      });\n      this.next();\n    }\n  });\n\n  // User Profile\n\n  Router.route('/users/:_idOrSlug', {\n    name: 'user_profile',\n    template: 'user_profile',\n    controller: Users.controllers.page\n  });\n\n  // User Edit\n\n  Router.route('/users/:slug/edit', {\n    name: 'user_edit',\n    template: 'user_edit',\n    controller: Users.controllers.edit,\n    onBeforeAction: function () {\n      // Only allow users with permissions to see the user edit page.\n      if (Meteor.user() && (\n        Users.is.admin(Meteor.user()) ||\n        this.params.slug === Meteor.user().telescope.slug\n      )) {\n        this.next();\n      } else {\n        this.render('no_rights');\n      }\n    }\n  });\n\n  Router.route('/account', {\n    name: 'userAccountShortcut',\n    template: 'user_edit',\n    controller: Users.controllers.edit\n  });\n\n  // All Users\n\n  Router.route('/users-dashboard', {\n    controller: Telescope.controllers.admin,\n    name: 'users_dashboard'\n  });\n\n  // Unsubscribe (from notifications)\n\n  Router.route('/unsubscribe/:hash', {\n    name: 'unsubscribe',\n    template: 'unsubscribe',\n    data: function() {\n      return {\n        hash: this.params.hash\n      };\n    }\n  });\n\n});\n","// accept either an ID or a slug\nMeteor.publish('singleUser', function(idOrSlug) {\n  var findById = Meteor.users.findOne(idOrSlug);\n  var findBySlug = Meteor.users.findOne({\"telescope.slug\": idOrSlug});\n  var user = typeof findById !== 'undefined' ? findById : findBySlug;\n  var options = Users.is.adminById(this.userId) ? {} : {fields: Users.pubsub.publicProperties};\n  if (user) {\n    return Meteor.users.find({_id: user._id}, options);\n  }\n  return [];\n});\n\nMeteor.publish('userPosts', function(terms) {\n  var parameters = Posts.getSubParams(terms);\n  var posts = Posts.find(parameters.find, parameters.options);\n  return posts;\n});\n\nMeteor.publish('userUpvotedPosts', function(terms) {\n  var parameters = Posts.getSubParams(terms);\n  var posts = Posts.find(parameters.find, parameters.options);\n  return posts;\n});\n\nMeteor.publish('userDownvotedPosts', function(terms) {\n  var parameters = Posts.getSubParams(terms);\n  var posts = Posts.find(parameters.find, parameters.options);\n  return posts;\n});\n\n// Publish the current user\n\nMeteor.publish('currentUser', function() {\n  var user = Meteor.users.find({_id: this.userId}, {fields: Users.pubsub.hiddenProperties});\n  return user;\n});\n\n// publish all users for admins to make autocomplete work\n// TODO: find a better way\n\nMeteor.publish('allUsersAdmin', function() {\n  var selector = Settings.get('requirePostInvite') ? {isInvited: true} : {}; // only users that can post\n  if (Users.is.adminById(this.userId)) {\n    return Meteor.users.find(selector, {fields: Users.pubsub.avatarProperties});\n  }\n  return [];\n});\n\n// Publish all users to reactive-table (if admin)\n// Limit, filter, and sort handled by reactive-table.\n// https://github.com/aslagle/reactive-table#server-side-pagination-and-filtering-beta\n\nReactiveTable.publish(\"all-users\", function() {\n  if(Users.is.adminById(this.userId)){\n    return Meteor.users;\n  } else {\n    return [];\n  }\n});\n","Accounts.onCreateUser(function(options, user){\n  user = Telescope.callbacks.run(\"onCreateUser\", user, options);\n  return user;\n});","var _ = Package.underscore._,\n    package_name = \"telescope:users\",\n    namespace = \"telescope:users\";\n\nif (package_name != \"project\") {\n    namespace = TAPi18n.packages[package_name].namespace;\n}\n// integrate the fallback language translations \ntranslations = {};\ntranslations[namespace] = {\"please_fill_in_missing_information_to_finish_signing_up\":\"Please fill in missing information below to finish signing up.\",\"bio\":\"Bio\",\"displayName\":\"Name\",\"email\":\"Email\",\"twitterUsername\":\"Twitter Username\",\"website\":\"Website\",\"htmlBio\":\"Bio\",\"user_profile_saved\":\"User profile saved\",\"this_email_is_already_taken\":\"This email is already taken\",\"all_fields_are_required\":\"All fields are required\"};\nTAPi18n._loadLangFileObject(\"en\", translations);\n","var _ = Package.underscore._,\n    package_name = \"telescope:users\",\n    namespace = \"telescope:users\";\n\nif (package_name != \"project\") {\n    namespace = TAPi18n.packages[package_name].namespace;\n}\nif(_.isUndefined(TAPi18n.translations[\"fr\"])) {\n  TAPi18n.translations[\"fr\"] = {};\n}\n\nif(_.isUndefined(TAPi18n.translations[\"fr\"][namespace])) {\n  TAPi18n.translations[\"fr\"][namespace] = {};\n}\n\n_.extend(TAPi18n.translations[\"fr\"][namespace], {\"please_fill_in_missing_information_to_finish_signing_up\":\"Veuillez remplir les informations manquantes pour compléter votre inscription.\",\"bio\":\"Bio\",\"displayName\":\"Nom Affiché\",\"email\":\"Email\",\"twitterUsername\":\"Identifiant Twitter\",\"website\":\"Site Web\"});\n"]}