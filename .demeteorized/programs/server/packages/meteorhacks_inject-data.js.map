{"version":3,"sources":["meteorhacks:inject-data/lib/namespace.js","meteorhacks:inject-data/lib/utils.js","meteorhacks:inject-data/lib/server.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA,gB;;;;;;;;;;;;;;;;;;ACAA,sC;AACA,2C;AACA,yC;AACA,E;;AAEA,6C;AACA,4D;AACA,sC;;AAEA,6D;AACA,E;;;;;;;;;;;;;;;;;;;ACVA,+B;;AAEA,qD;AACA,kD;;AAEA,c;AACA,yE;AACA,4B;AACA,6B;AACA,G;;AAEA,mC;AACA,E;;AAEA,gE;AACA,2B;AACA,6C;AACA,U;AACA,gB;AACA,G;AACA,E;;AAEA,Y;AACA,yD;AACA,kE;AACA,iB;AACA,6C;AACA,6B;AACA,kC;;AAEA,iB;AACA,gE;AACA,kE;AACA,sC;AACA,sD;AACA,uB;AACA,iE;AACA,0C;;AAEA,gC;AACA,gD;AACA,a;AACA,K;;AAEA,kB;AACA,uD;AACA,sD;;AAEA,gD;AACA,6B;AACA,+D;;AAEA,0B;AACA,G;;AAEA,4C;AACA,E","file":"/packages/meteorhacks_inject-data.js","sourcesContent":["InjectData = {};","InjectData._encode = function(ejson) {\n  var ejsonString = EJSON.stringify(ejson);\n  return encodeURIComponent(ejsonString);\n};\n\nInjectData._decode = function(encodedEjson) {\n  var decodedEjsonString = decodeURIComponent(encodedEjson);\n  if(!decodedEjsonString) return null;\n\n  return EJSON.fromJSONValue(JSON.parse(decodedEjsonString));\n};\n","var http = Npm.require('http');\n\nvar templateText = Assets.getText('lib/inject.html');\nvar injectDataTemplate = _.template(templateText);\n\n// custome API\nhttp.OutgoingMessage.prototype.pushData = function pushData(key, value) {\n  if(!this._injectPayload) {\n    this._injectPayload = {};\n  }\n\n  this._injectPayload[key] = value;\n};\n\nhttp.OutgoingMessage.prototype.getData = function getData(key) {\n  if(this._injectPayload) {\n    return _.clone(this._injectPayload[key]);\n  } else {\n    return null;\n  }\n};\n\n// overrides\nvar originalWrite = http.OutgoingMessage.prototype.write;\nhttp.OutgoingMessage.prototype.write = function(chunk, encoding) {\n  var condition =\n    this._injectPayload && !this._injected &&\n    encoding === undefined &&\n    /<!DOCTYPE html>/.test(chunk);\n\n  if(condition) {\n    // if cors headers included if may cause some security holes\n    // so we simply turn off injecting if we detect an cors header\n    // read more: http://goo.gl/eGwb4e\n    if(this._headers['access-control-allow-origin']) {\n      var warnMessage =\n        'warn: injecting data turned off due to CORS headers. ' +\n        'read more: http://goo.gl/eGwb4e';\n\n      console.warn(warnMessage);\n      originalWrite.call(this, chunk, encoding);\n      return;\n    }\n\n    // inject data\n    var data = InjectData._encode(this._injectPayload);\n    var injectHtml = injectDataTemplate({data: data});\n\n    // if this is a buffer, convert it to string\n    chunk = chunk.toString();\n    chunk = chunk.replace('</head>', injectHtml + '\\n</head>');\n\n    this._injected = true;\n  }\n\n  originalWrite.call(this, chunk, encoding);\n};"]}