{"version":3,"sources":["telescope:subscribe-to-posts//Users/sacha/Dev/Telescope/packages/telescope-subscribe-to-posts/package-tap.i18n","telescope:subscribe-to-posts/lib/subscribe-to-posts.js","telescope:subscribe-to-posts/lib/server/publications.js","telescope:subscribe-to-posts//Users/sacha/Dev/Telescope/packages/telescope-subscribe-to-posts/i18n/en.i18n.json"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,8H;;AAEA,+D;AACA,gD;;;;;;;;;;;;;;;;;;;ACHA,gB;AACA,yC;AACA,gB;AACA,iB;AACA,mB;AACA,mB;AACA,e;AACA,gB;AACA,K;AACA,G;AACA,G;;AAEA,gB;AACA,2B;AACA,gB;AACA,mB;AACA,mB;AACA,e;AACA,gB;AACA,K;AACA,G;AACA,G;;AAEA,gB;AACA,+B;AACA,gB;AACA,iB;AACA,mB;AACA,e;AACA,gB;AACA,K;AACA,G;AACA,G;;AAEA,sC;AACA,oC;AACA,U;AACA,G;;AAEA,8C;AACA,6B;AACA,W;AACA,G;;AAEA,yD;AACA,gD;AACA,oB;;AAEA,6E;AACA,uE;;AAEA,U;AACA,iC;AACA,6C;AACA,I;AACA,G;;AAEA,+C;AACA,sE;AACA,E;;AAEA,iE;AACA,4D;AACA,e;AACA,oB;AACA,sC;AACA,kB;AACA,K;AACA,E;;AAEA,sE;AACA,4D;AACA,kB;AACA,mC;AACA,sC;AACA,iB;AACA,K;AACA,E;;AAEA,qD;AACA,wC;AACA,6F;;AAEA,sD;AACA,iB;;AAEA,gC;AACA,8C;AACA,gB;;AAEA,c;AACA,iF;AACA,uC;AACA,8B;AACA,K;;AAEA,mB;AACA,2C;AACA,e;AACA,uB;AACA,8B;AACA,M;AACA,qD;AACA,G;;AAEA,c;AACA,E;;AAEA,uD;AACA,2B;AACA,wC;AACA,2F;;AAEA,wD;AACA,iB;;AAEA,gB;AACA,yE;AACA,mC;AACA,+B;AACA,K;;AAEA,mB;AACA,gD;AACA,2D;AACA,G;AACA,c;AACA,E;;AAEA,gB;AACA,mC;AACA,kE;AACA,I;AACA,qC;AACA,oE;AACA,G;AACA,G;;;;;;;;;;;;;;;;;;;ACxIA,uD;AACA,6C;AACA,8D;AACA,e;AACA,G;;;;;;;;;;;;;;;;;;;ACJA,6B;AACA,kD;AACA,+C;;AAEA,gC;AACA,yD;AACA,C;AACA,gD;AACA,kB;AACA,kL;AACA,gD","file":"/packages/telescope_subscribe-to-posts.js","sourcesContent":["TAPi18n.packages[\"telescope:subscribe-to-posts\"] = {\"translation_function_name\":\"__\",\"helper_name\":\"_\",\"namespace\":\"project\"};\n\n// define package's translation function (proxy to the i18next)\n__ = TAPi18n._getPackageI18nextProxy(\"project\");\n","Users.addField({\n  fieldName: 'telescope.subscribedItems',\n  fieldSchema: {\n    type: Object,\n    optional: true,\n    blackbox: true,\n    autoform: {\n      omit: true\n    }\n  }\n});\n\nPosts.addField({\n  fieldName: 'subscribers',\n  fieldSchema: {\n    type: [String],\n    optional: true,\n    autoform: {\n      omit: true\n    }\n  }\n});\n\nPosts.addField({\n  fieldName: 'subscriberCount',\n  fieldSchema: {\n    type: Number,\n    optional: true,\n    autoform: {\n      omit: true\n    }\n  }\n});\n\nTelescope.modules.add(\"profileEdit\", {\n  template: 'user_subscribed_posts',\n  order: 5\n});\n\nTelescope.modules.add(\"commentThreadBottom\", {\n  template: 'post_subscribe',\n  order: 10\n});\n\nPosts.views.add(\"userSubscribedPosts\", function (terms) {\n  var user = Meteor.users.findOne(terms.userId),\n      postsIds = [];\n\n  if (user.telescope.subscribedItems && user.telescope.subscribedItems.Posts)\n    postsIds = _.pluck(user.telescope.subscribedItems.Posts, \"itemId\");\n\n  return {\n    find: {_id: {$in: postsIds}},\n    options: {limit: 5, sort: {postedAt: -1}}\n  };\n});\n\nvar hasSubscribedItem = function (item, user) {\n  return item.subscribers && item.subscribers.indexOf(user._id) != -1;\n};\n\nvar addSubscribedItem = function (userId, item, collectionName) {\n  var field = 'telescope.subscribedItems.' + collectionName;\n  var add = {};\n  add[field] = item;\n  Meteor.users.update({_id: userId}, {\n    $addToSet: add\n  });\n};\n\nvar removeSubscribedItem = function (userId, itemId, collectionName) {\n  var field = 'telescope.subscribedItems.' + collectionName;\n  var remove = {};\n  remove[field] = {itemId: itemId};\n  Meteor.users.update({_id: userId}, {\n    $pull: remove\n  });\n};\n\nsubscribeItem = function (collection, itemId, user) {\n  var item = collection.findOne(itemId),\n      collectionName = collection._name.slice(0,1).toUpperCase() + collection._name.slice(1);\n\n  if (!user || !item || hasSubscribedItem(item, user))\n    return false;\n\n  // author can't subscribe item\n  if (item.userId && item.userId === user._id)\n    return false\n\n  // Subscribe\n  var result = collection.update({_id: itemId, subscribers: { $ne: user._id }}, {\n    $addToSet: {subscribers: user._id},\n    $inc: {subscriberCount: 1}\n  });\n\n  if (result > 0) {\n    // Add item to list of subscribed items\n    var obj = {\n      itemId: item._id,\n      subscribedAt: new Date()\n    };\n    addSubscribedItem(user._id, obj, collectionName);\n  }\n\n  return true;\n};\n\nunsubscribeItem = function (collection, itemId, user) {\n  var user = Meteor.user(),\n      item = collection.findOne(itemId),\n      collectionName = collection._name.slice(0,1).toUpperCase()+collection._name.slice(1);\n\n  if (!user || !item  || !hasSubscribedItem(item, user))\n    return false;\n\n  // Unsubscribe\n  var result = collection.update({_id: itemId, subscribers: user._id }, {\n    $pull: {subscribers: user._id},\n    $inc: {subscriberCount: -1}\n  });\n\n  if (result > 0) {\n    // Remove item from list of subscribed items\n    removeSubscribedItem(user._id, itemId, collectionName);\n  }\n  return true;\n};\n\nMeteor.methods({\n  subscribePost: function(postId) {\n    return subscribeItem.call(this, Posts, postId, Meteor.user());\n  },\n  unsubscribePost: function(postId) {\n    return unsubscribeItem.call(this, Posts, postId, Meteor.user());\n  }\n});\n","Meteor.publish('userSubscribedPosts', function(terms) {\n  var parameters = Posts.getSubParams(terms);\n  var posts = Posts.find(parameters.find, parameters.options);\n  return posts;\n});\n","var _ = Package.underscore._,\n    package_name = \"telescope:subscribe-to-posts\",\n    namespace = \"telescope:subscribe-to-posts\";\n\nif (package_name != \"project\") {\n    namespace = TAPi18n.packages[package_name].namespace;\n}\n// integrate the fallback language translations \ntranslations = {};\ntranslations[namespace] = {\"subscribed_posts\":\"Subscribed Posts\",\"subscribe_to_thread\":\"Subscribe to comment thread\",\"unsubscribe_from_thread\":\"Unsubscribe from comment thread\"};\nTAPi18n._loadLangFileObject(\"en\", translations);\n"]}