{"version":3,"sources":["telescope:migrations/lib/server/migrations.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,gD;;AAEA,sB;AACA,wF;AACA,iD;;AAEA,4B;AACA,8C;AACA,gD;AACA,gC;AACA,K;AACA,G;;AAEA,gB;AACA,oC;AACA,wC;AACA,oD;AACA,sC;AACA,K;AACA,G;AACA,G;;AAEA,sC;AACA,6C;AACA,4D;;AAEA,iB;AACA,oD;AACA,2E;AACA,qG;AACA,+C;AACA,U;AACA,mB;AACA,oF;AACA,a;AACA,K;AACA,G;;AAEA,4F;AACA,6F;AACA,4F;AACA,oF;;AAEA,+B;AACA,2D;;AAEA,4H;AACA,4F;AACA,6F;AACA,4F;AACA,E;;AAEA,sB;AACA,iC;AACA,c;AACA,qE;AACA,U;AACA,kD;AACA,2C;AACA,uC;AACA,iD;AACA,O;AACA,a;AACA,I;AACA,iC;AACA,yE;AACA,c;AACA,4E;AACA,Y;AACA,0D;AACA,8D;AACA,6C;AACA,gD;AACA,8D;AACA,O;AACA,a;AACA,I;AACA,qC;AACA,yE;AACA,c;AACA,0C;AACA,U;AACA,0C;AACA,6B;AACA,wB;AACA,gF;;AAEA,+C;AACA,+D;AACA,4C;AACA,+C;AACA,0F;AACA,6E;AACA,gE;AACA,gF;AACA,uC;AACA,c;AACA,kH;AACA,wC;AACA,oC;AACA,S;AACA,S;;AAEA,mB;AACA,6C;AACA,oE;AACA,O;;AAEA,2B;AACA,2C;AACA,uC;AACA,mB;AACA,wE;AACA,sD;AACA,mC;AACA,Y;AACA,kC;AACA,O;AACA,yB;AACA,O;AACA,a;AACA,I;AACA,mC;AACA,c;AACA,uC;AACA,yD;;AAEA,oC;AACA,U;AACA,sE;;AAEA,0B;AACA,gC;AACA,yB;AACA,iC;AACA,2E;;AAEA,iC;AACA,6C;AACA,mC;;AAEA,yB;AACA,uD;AACA,2D;;AAEA,4B;AACA,6D;AACA,iE;;AAEA,uD;;AAEA,O;AACA,a;AACA,I;AACA,sC;AACA,c;AACA,0C;AACA,U;AACA,sB;AACA,wB;AACA,uC;AACA,wB;AACA,uC;AACA,kD;AACA,O;AACA,0B;AACA,2C;AACA,sD;AACA,O;AACA,+E;AACA,2C;AACA,O;AACA,a;AACA,I;AACA,8C;AACA,c;AACA,gD;AACA,U;AACA,sB;AACA,wB;AACA,2C;AACA,2B;AACA,0C;AACA,kD;AACA,O;AACA,6B;AACA,8C;AACA,sD;AACA,O;AACA,qF;AACA,2C;AACA,O;AACA,a;AACA,I;AACA,gC;AACA,c;AACA,oE;AACA,U;AACA,yD;AACA,iG;AACA,2C;AACA,O;AACA,a;AACA,I;AACA,6C;AACA,c;AACA,6E;AACA,U;AACA,2C;AACA,4G;AACA,2C;AACA,O;AACA,a;AACA,I;AACA,qC;AACA,c;AACA,2E;AACA,U;AACA,2C;AACA,oG;AACA,2C;AACA,O;AACA,a;AACA,I;AACA,yC;AACA,c;AACA,0C;AACA,mF;AACA,Y;AACA,0C;AACA,iD;AACA,iD;AACA,+B;AACA,yH;AACA,6C;AACA,O;AACA,O;AACA,a;AACA,I;AACA,wC;AACA,c;AACA,gD;AACA,gD;AACA,Y;AACA,6C;AACA,oD;AACA,+B;AACA,yG;AACA,6C;AACA,O;AACA,O;AACA,a;AACA,I;AACA,oC;AACA,c;AACA,uE;AACA,U;AACA,qC;AACA,qG;AACA,2C;AACA,O;AACA,a;AACA,I;AACA,sC;AACA,c;AACA,6E;AACA,U;AACA,2C;AACA,8G;AACA,2C;AACA,O;AACA,a;AACA,I;AACA,wC;AACA,c;AACA,6G;AACA,U;AACA,2C;AACA,kH;AACA,2C;AACA,O;AACA,a;AACA,I;AACA,mC;AACA,c;AACA,uB;AACA,8D;AACA,0C;AACA,iC;AACA,U;AACA,qC;AACA,sH;AACA,sB;AACA,oC;AACA,+E;AACA,e;AACA,O;AACA,oC;AACA,iH;AACA,2C;AACA,O;AACA,a;AACA,I;AACA,uC;AACA,c;AACA,uG;AACA,U;AACA,qC;AACA,mI;AACA,2C;AACA,O;AACA,a;AACA,I;AACA,qC;AACA,c;AACA,gD;AACA,U;AACA,2C;AACA,2C;AACA,kH;AACA,2C;AACA,O;AACA,a;AACA,I;AACA,qC;AACA,c;AACA,iD;AACA,U;AACA,qC;AACA,qC;AACA,kB;AACA,2D;AACA,+D;AACA,iE;AACA,oE;AACA,S;AACA,yC;AACA,2C;AACA,O;AACA,a;AACA,I;AACA,4B;AACA,c;AACA,kE;AACA,U;AACA,iE;AACA,qC;AACA,+F;AACA,2C;AACA,O;AACA,a;AACA,I;AACA,+B;AACA,c;AACA,wE;AACA,U;AACA,oE;AACA,2C;AACA,qG;AACA,2C;AACA,O;AACA,a;AACA,I;AACA,mC;AACA,c;AACA,sG;AACA,U;AACA,uC;AACA,6H;AACA,2C;AACA,O;AACA,a;AACA,I;AACA,4C;AACA,c;AACA,6E;AACA,U;AACA,uC;AACA,mJ;AACA,2C;AACA,O;AACA,a;AACA,I;AACA,kD;AACA,c;AACA,iF;AACA,U;AACA,mE;AACA,uC;AACA,2F;AACA,2C;AACA,O;AACA,a;AACA,K;AACA,yI;AACA,c;AACA,qE;AACA,U;AACA,uC;AACA,4H;AACA,2C;AACA,O;AACA,a;AACA,I;AACA,oC;AACA,c;AACA,yE;AACA,U;AACA,uC;AACA,oE;AACA,4B;AACA,S;AACA,oI;AACA,2C;AACA,O;AACA,a;AACA,I;AACA,sC;AACA,c;AACA,sE;AACA,U;AACA,uC;AACA,sF;AACA,2C;AACA,O;AACA,a;AACA,I;AACA,qC;AACA,c;AACA,4E;AACA,gE;AACA,8C;AACA,+D;AACA,K;AACA,a;AACA,I;AACA,oC;AACA,c;AACA,0E;AACA,U;AACA,mE;AACA,qC;AACA,0G;AACA,2C;AACA,O;AACA,a;AACA,I;AACA,gC;AACA,c;AACA,4H;;AAEA,yD;;AAEA,oC;AACA,U;;AAEA,iG;AACA,sC;AACA,mC;AACA,uD;AACA,4D;AACA,+B;AACA,6D;AACA,+B;;AAEA,kD;AACA,4C;AACA,2E;AACA,W;AACA,O;;AAEA,6F;;AAEA,W;AACA,uC;AACA,iB;AACA,gC;AACA,kC;AACA,oC;AACA,Y;AACA,W;AACA,O;AACA,mB;AACA,yF;AACA,4D;AACA,O;AACA,O;AACA,a;AACA,I;AACA,iC;AACA,c;AACA,sC;AACA,iB;;AAEA,qB;;AAEA,iC;AACA,+C;;AAEA,qC;AACA,2D;;AAEA,iC;AACA,kD;;AAEA,iC;AACA,8D;;AAEA,4B;AACA,sE;AACA,O;;AAEA,K;AACA,a;AACA,I;AACA,oC;AACA,c;AACA,oE;AACA,yD;;AAEA,oC;AACA,U;;AAEA,0E;;AAEA,iC;;AAEA,mC;AACA,2E;;AAEA,sE;AACA,6C;AACA,yF;AACA,mD;AACA,6F;AACA,qD;AACA,S;AACA,Q;AACA,S;;AAEA,wC;;AAEA,W;AACA,uC;AACA,iB;AACA,wC;AACA,W;AACA,W;AACA,qB;AACA,yB;AACA,8E;AACA,O;AACA,O;AACA,a;AACA,I;AACA,iC;AACA,c;AACA,2H;AACA,yD;;AAEA,oC;AACA,U;;AAEA,0E;;AAEA,sC;AACA,wB;AACA,kF;AACA,O;AACA,O;AACA,a;AACA,I;AACA,iD;AACA,iB;;AAEA,iF;AACA,uF;AACA,M;AACA,qD;AACA,6C;AACA,iE;AACA,M;AACA,6E;AACA,wF;AACA,e;AACA,qE;AACA,Y;AACA,I;AACA,U;AACA,I;AACA,mE;AACA,I;AACA,a;AACA,+F;AACA,K;AACA,sH;AACA,I;AACA,8G;AACA,I;AACA,4E;AACA,I;AACA,sD;AACA,e;AACA,I;AACA,qE;AACA,wG;AACA,I;AACA,uE;AACA,gI;AACA,2E;AACA,Y;AACA,I;AACA,Q;AACA,4C;AACA,gB;AACA,O;AACA,mC;AACA,c;AACA,oB;AACA,kF;AACA,yD;;AAEA,oC;AACA,U;;AAEA,0E;AACA,2B;AACA,iE;AACA,c;AACA,oC;AACA,O;;AAEA,yC;AACA,0B;AACA,sF;AACA,c;AACA,gD;AACA,O;AACA,O;AACA,a;AACA,M;AACA,0C;AACA,c;AACA,sC;AACA,Y;AACA,gD;AACA,2D;AACA,O;AACA,O;AACA,yD;;AAEA,oC;AACA,U;AACA,sB;;AAEA,2B;AACA,iE;AACA,c;AACA,oC;AACA,O;;AAEA,wE;;AAEA,yB;;AAEA,qB;;AAEA,iD;AACA,gD;AACA,8D;AACA,S;;AAEA,wE;AACA,2D;AACA,oF;AACA,S;AACA,wB;AACA,8B;AACA,qD;AACA,S;;AAEA,O;;AAEA,O;AACA,a;AACA,G;AACA,E;;AAEA,8B","file":"/packages/telescope_migrations.js","sourcesContent":["// TODO: switch over to Tom's migration package.\n\n// database migrations\n// http://stackoverflow.com/questions/10365496/meteor-how-to-perform-database-migrations\nMigrations = new Meteor.Collection('migrations');\n\nMeteor.startup(function () {\n  allMigrations = Object.keys(migrationsList);\n  _.each(allMigrations, function(migrationName){\n    runMigration(migrationName);\n  });\n});\n\nMeteor.methods({\n  removeMigration: function (name) {\n    if (Users.is.admin(Meteor.user())) {\n      console.log('// removing migration: ' + name);\n      Migrations.remove({name: name});\n    }\n  }\n});\n\n// wrapper function for all migrations\nvar runMigration = function (migrationName) {\n  var migration = Migrations.findOne({name: migrationName});\n\n  if (migration){\n    if(typeof migration.finishedAt === 'undefined'){\n      // if migration exists but hasn't finished, remove it and start fresh\n      console.log('!!! Found incomplete migration \"'+migrationName+'\", removing and running again.');\n      Migrations.remove({name: migrationName});\n    }else{\n      // do nothing\n      // console.log('Migration \"'+migrationName+'\" already exists, doing nothing.')\n      return;\n    }\n  }\n\n  console.log(\"//----------------------------------------------------------------------//\");\n  console.log(\"//------------//    Starting \"+migrationName+\" Migration    //-----------//\");\n  console.log(\"//----------------------------------------------------------------------//\");\n  Migrations.insert({name: migrationName, startedAt: new Date(), completed: false});\n\n  // execute migration function\n  var itemsAffected = migrationsList[migrationName]() || 0;\n\n  Migrations.update({name: migrationName}, {$set: {finishedAt: new Date(), completed: true, itemsAffected: itemsAffected}});\n  console.log(\"//----------------------------------------------------------------------//\");\n  console.log(\"//------------//     Ending \"+migrationName+\" Migration     //-----------//\");\n  console.log(\"//----------------------------------------------------------------------//\");\n};\n\nvar migrationsList = {\n  updatePostStatus: function () {\n    var i = 0;\n    Posts.find({status: {$exists : false}}).forEach(function (post) {\n      i++;\n      Posts.update(post._id, {$set: {status: 2}});\n      console.log(\"---------------------\");\n      console.log(\"Post: \"+post.title);\n      console.log(\"Updating status to approved\");\n    });\n    return i;\n  },\n  updateCategories: function () {\n    if (typeof Categories === \"undefined\" || Categories === null) return;\n    var i = 0;\n    Categories.find({slug: {$exists : false}}).forEach(function (category) {\n        i++;\n        var slug = Telescope.utils.slugify(category.name);\n        Categories.update(category._id, {$set: {slug: slug}});\n        console.log(\"---------------------\");\n        console.log(\"Category: \"+category.name);\n        console.log(\"Updating category with new slug: \"+slug);\n    });\n    return i;\n  },\n  updatePostCategories: function () {\n    if (typeof Categories === \"undefined\" || Categories === null) return;\n    var i = 0;\n    Posts.find().forEach(function (post) {\n      i++;\n      var oldCategories = post.categories;\n      var newCategories = [];\n      var category = {};\n      var updating = false; // by default, assume we're not going to do anything\n\n      // iterate over the post.categories array\n      // if the post has no categories then nothing will happen\n      _.each(oldCategories, function(value){\n        // make sure the categories are strings\n        if((typeof value === \"string\") && (category = Categories.findOne({name: value}))){\n          // if value is a string, then look for the matching category object\n          // and if it exists push it to the newCategories array\n          updating = true; // we're updating at least one category for this post\n          newCategories.push(category);\n        }else{\n          // if category A) is already an object, or B) it's a string but a matching category object doesn't exist\n          // just keep the current value\n          newCategories.push(value);\n        }\n      });\n\n      if(updating){\n        // update categories property on post\n        Posts.update(post._id, {$set: {categories: newCategories}});\n      }\n\n      // START CONSOLE LOGS\n      console.log(\"---------------------\");\n      console.log(\"Post: \"+post.title);\n      if(updating){\n        console.log(oldCategories.length+\" categories: \"+oldCategories);\n        console.log(\"Updating categories array to: \");\n        console.log(newCategories);\n      }else{\n        console.log(\"No updates\");\n      }\n      // END CONSOLE LOGS\n    });\n    return i;\n  },\n  updateUserProfiles: function () {\n    var i = 0;\n    var allUsers = Meteor.users.find();\n    console.log('> Found '+allUsers.count()+' users.\\n');\n\n    allUsers.forEach(function(user){\n      i++;\n      console.log('> Updating user '+user._id+' ('+user.username+')');\n\n      var properties = {};\n      properties.telescope = {};\n      // update user slug\n      if(Users.getUserName(user))\n        properties.slug = Telescope.utils.slugify(Users.getUserName(user));\n\n      // update user isAdmin flag\n      if(typeof user.isAdmin === 'undefined')\n        properties.isAdmin = false;\n\n      // update postCount\n      var postsByUser = Posts.find({userId: user._id});\n      properties.telescope.postCount = postsByUser.count();\n\n      // update commentCount\n      var commentsByUser = Comments.find({userId: user._id});\n      properties.telescope.commentCount = commentsByUser.count();\n\n      Meteor.users.update(user._id, {$set:properties});\n\n    });\n    return i;\n  },\n  resetUpvotesDownvotes: function () {\n    var i = 0;\n    Posts.find().forEach(function (post) {\n      i++;\n      var upvotes = 0,\n          downvotes = 0;\n      console.log(\"Post: \"+post.title);\n      if(post.upvoters){\n        upvotes = post.upvoters.length;\n        console.log(\"Found \"+upvotes+\" upvotes.\");\n      }\n      if(post.downvoters){\n        downvotes = post.downvoters.length;\n        console.log(\"Found \"+downvotes+\" downvotes.\");\n      }\n      Posts.update(post._id, {$set: {upvotes: upvotes, downvotes: downvotes}});\n      console.log(\"---------------------\");\n    });\n    return i;\n  },\n  resetCommentsUpvotesDownvotes: function () {\n    var i = 0;\n    Comments.find().forEach(function (comment) {\n      i++;\n      var upvotes = 0,\n          downvotes = 0;\n      console.log(\"Comment: \"+comment._id);\n      if(comment.upvoters){\n        upvotes = comment.upvoters.length;\n        console.log(\"Found \"+upvotes+\" upvotes.\");\n      }\n      if(comment.downvoters){\n        downvotes = comment.downvoters.length;\n        console.log(\"Found \"+downvotes+\" downvotes.\");\n      }\n      Comments.update(comment._id, {$set: {upvotes: upvotes, downvotes: downvotes}});\n      console.log(\"---------------------\");\n    });\n    return i;\n  },\n  headlineToTitle: function () {\n    var i = 0;\n    Posts.find({title: {$exists : false}}).forEach(function (post) {\n      i++;\n      console.log(\"Post: \"+post.headline+\" \"+post.title);\n      Posts.update(post._id, { $rename: { 'headline': 'title'}}, {multi: true, validate: false});\n      console.log(\"---------------------\");\n    });\n    return i;\n  },\n  commentsSubmittedToCreatedAt: function () {\n    var i = 0;\n    Comments.find({createdAt: {$exists: false}}).forEach(function (comment) {\n      i++;\n      console.log(\"Comment: \"+comment._id);\n      Comments.update(comment._id, { $rename: { 'submitted': 'createdAt'}}, {multi: true, validate: false});\n      console.log(\"---------------------\");\n    });\n    return i;\n  },\n  commentsPostToPostId: function () {\n    var i = 0;\n    Comments.find({postId: {$exists : false}}).forEach(function (comment) {\n      i++;\n      console.log(\"Comment: \"+comment._id);\n      Comments.update(comment._id, { $rename: { 'post': 'postId'}}, {multi: true, validate: false});\n      console.log(\"---------------------\");\n    });\n    return i;\n  },\n  createdAtSubmittedToDate: function () {\n    var i = 0;\n    Posts.find().forEach(function (post) {\n      if(typeof post.submitted === \"number\" || typeof post.createdAt === \"number\"){\n        i++;\n        console.log(\"Posts: \"+post.title);\n        var createdAt = new Date(post.createdAt);\n        var submitted = new Date(post.submitted);\n        console.log(createdAt);\n        Posts.update(post._id, { $set: { 'createdAt': createdAt, submitted: submitted}}, {multi: true, validate: false});\n        console.log(\"---------------------\");\n      }\n    });\n    return i;\n  },\n  commentsCreatedAtToDate: function () {\n    var i = 0;\n    Comments.find().forEach(function (comment) {\n      if(typeof comment.createdAt === \"number\"){\n        i++;\n        console.log(\"Comment: \"+comment._id);\n        var createdAt = new Date(comment.createdAt);\n        console.log(createdAt);\n        Comments.update(comment._id, { $set: { 'createdAt': createdAt}}, {multi: true, validate: false});\n        console.log(\"---------------------\");\n      }\n    });\n    return i;\n  },\n  submittedToPostedAt: function () {\n    var i = 0;\n    Posts.find({postedAt: {$exists : false}}).forEach(function (post) {\n      i++;\n      console.log(\"Post: \"+post._id);\n      Posts.update(post._id, { $rename: { 'submitted': 'postedAt'}}, {multi: true, validate: false});\n      console.log(\"---------------------\");\n    });\n    return i;\n  },\n  addPostedAtToComments: function () {\n    var i = 0;\n    Comments.find({postedAt: {$exists : false}}).forEach(function (comment) {\n      i++;\n      console.log(\"Comment: \"+comment._id);\n      Comments.update(comment._id, { $set: { 'postedAt': comment.createdAt}}, {multi: true, validate: false});\n      console.log(\"---------------------\");\n    });\n    return i;\n  },\n  parentToParentCommentId: function () {\n    var i = 0;\n    Comments.find({parent: {$exists: true}, parentCommentId: {$exists : false}}).forEach(function (comment) {\n      i++;\n      console.log(\"Comment: \"+comment._id);\n      Comments.update(comment._id, { $set: { 'parentCommentId': comment.parent}}, {multi: true, validate: false});\n      console.log(\"---------------------\");\n    });\n    return i;\n  },\n  addLastCommentedAt: function () {\n    var i = 0;\n    Posts.find({$and: [\n      {$or: [{comments: {$gt: 0}}, {commentCount: {$gt: 0}}]},\n      {lastCommentedAt: {$exists : false}}\n    ]}).forEach(function (post) {\n      i++;\n      console.log(\"Post: \"+post._id);\n      var postComments = Comments.find({$or: [{postId: post._id}, {post: post._id}]}, {sort: {postedAt: -1}}).fetch();\n      var lastComment;\n      if (_.isEmpty(postComments)) {\n        console.log('postComments from post '+post._id+' is empty. Skipping.');\n        return;\n      }\n      lastComment = postComments[0];\n      Posts.update(post._id, { $set: { lastCommentedAt: lastComment.postedAt}}, {multi: false, validate: false});\n      console.log(\"---------------------\");\n    });\n    return i;\n  },\n  commentsToCommentCount: function () {\n    var i = 0;\n    Posts.find({comments: {$exists : true}, commentCount: {$exists : false}}).forEach(function (post) {\n      i++;\n      console.log(\"Post: \"+post._id);\n      Posts.update(post._id, { $set: { 'commentCount': post.comments}, $unset: { 'comments': ''}}, {multi: true, validate: false});\n      console.log(\"---------------------\");\n    });\n    return i;\n  },\n  addCommentersToPosts: function () {\n    var i = 0;\n    Comments.find().forEach(function (comment) {\n      i++;\n      console.log(\"Comment: \"+comment._id);\n      console.log(\"Post: \"+comment.postId);\n      Posts.update(comment.postId, { $addToSet: { 'commenters': comment.userId}}, {multi: true, validate: false});\n      console.log(\"---------------------\");\n    });\n    return i;\n  },\n  moveVotesFromProfile: function () {\n    var i = 0;\n    Meteor.users.find().forEach(function (user) {\n      i++;\n      console.log(\"User: \"+user._id);\n      Meteor.users.update(user._id, {\n        $rename: {\n          'profile.upvotedPosts': 'telescope.upvotedPosts',\n          'profile.downvotedPosts': 'telescope.downvotedPosts',\n          'profile.upvotedComments': 'telescope.upvotedComments',\n          'profile.downvotedComments': 'telescope.downvotedComments'\n        }\n      }, {multi: true, validate: false});\n      console.log(\"---------------------\");\n    });\n    return i;\n  },\n  addHTMLBody: function () {\n    var i = 0;\n    Posts.find({body: {$exists : true}}).forEach(function (post) {\n      i++;\n      var htmlBody = Telescope.utils.sanitize(marked(post.body));\n      console.log(\"Post: \"+post._id);\n      Posts.update(post._id, { $set: { 'htmlBody': htmlBody}}, {multi: true, validate: false});\n      console.log(\"---------------------\");\n    });\n    return i;\n  },\n  addHTMLComment: function () {\n    var i = 0;\n    Comments.find({body: {$exists : true}}).forEach(function (comment) {\n      i++;\n      var htmlBody = Telescope.utils.sanitize(marked(comment.body));\n      console.log(\"Comment: \"+comment._id);\n      Comments.update(comment._id, { $set: { 'htmlBody': htmlBody}}, {multi: true, validate: false});\n      console.log(\"---------------------\");\n    });\n    return i;\n  },\n  clicksToClickCount: function () {\n    var i = 0;\n    Posts.find({\"clicks\": {$exists: true}, \"clickCount\": {$exists : false}}).forEach(function (post) {\n      i++;\n      console.log(\"Post: \" + post._id);\n      Posts.update(post._id, { $set: { 'clickCount': post.clicks}, $unset: { 'clicks': ''}}, {multi: true, validate: false});\n      console.log(\"---------------------\");\n    });\n    return i;\n  },\n  commentsCountToCommentCount: function () {\n    var i = 0;\n    Posts.find({\"commentCount\": {$exists : false}}).forEach(function (post) {\n      i++;\n      console.log(\"Post: \" + post._id);\n      Posts.update({_id: post._id}, { $set: { 'commentCount': post.commentsCount}, $unset: {'commentsCount': \"\"}}, {multi: true, validate: false});\n      console.log(\"---------------------\");\n    });\n    return i;\n  },\n  userDataCommentsCountToCommentCount: function(){\n    var i = 0;\n    Meteor.users.find({'commentCount': {$exists: false}}).forEach(function(user){\n      i++;\n      var commentCount = Comments.find({userId: user._id}).count();\n      console.log(\"User: \" + user._id);\n      Meteor.users.update(user._id, {$set: { telescope : {'commentCount': commentCount}}});\n      console.log(\"---------------------\");\n    });\n    return i;\n   },\n  clicksToClickCountForRealThisTime: function () { // since both fields might be co-existing, add to clickCount instead of overwriting it\n    var i = 0;\n    Posts.find({'clicks': {$exists: true}}).forEach(function (post) {\n      i++;\n      console.log(\"Post: \" + post._id);\n      Posts.update(post._id, { $inc: { 'clickCount': post.clicks}, $unset: {'clicks': \"\"}}, {multi: true, validate: false});\n      console.log(\"---------------------\");\n    });\n    return i;\n  },\n  normalizeCategories: function () {\n    var i = 0;\n    Posts.find({'categories': {$exists: true}}).forEach(function (post) {\n      i++;\n      console.log(\"Post: \" + post._id);\n      var justCategoryIds = post.categories.map(function (category){\n        return category._id;\n      });\n      Posts.update(post._id, {$set: {categories: justCategoryIds, oldCategories: post.categories}}, {multi: true, validate: false});\n      console.log(\"---------------------\");\n    });\n    return i;\n  },\n  cleanUpStickyProperty: function () {\n    var i = 0;\n    Posts.find({'sticky': {$exists: false}}).forEach(function (post) {\n      i++;\n      console.log(\"Post: \" + post._id);\n      Posts.update(post._id, {$set: {sticky: false}}, {multi: true, validate: false});\n      console.log(\"---------------------\");\n    });\n    return i;\n  },\n  show0112ReleaseNotes: function () {\n    var i = 0;\n    // if this is the 0.11.2 update, the first run event will not exist yet.\n    // if that's the case, make sure to still show release notes\n    if (!Events.findOne({name: 'firstRun'})) {\n      Releases.update({number:'0.11.2'}, {$set: {read:false}});\n    }\n    return i;\n  },\n  removeThumbnailHTTP: function () {\n    var i = 0;\n    Posts.find({thumbnailUrl: {$exists : true}}).forEach(function (post) {\n      i++;\n      var newThumbnailUrl = post.thumbnailUrl.replace(\"http:\", \"\");\n      console.log(\"Post: \"+post._id);\n      Posts.update(post._id, { $set: { 'thumbnailUrl': newThumbnailUrl}}, {multi: true, validate: false});\n      console.log(\"---------------------\");\n    });\n    return i;\n  },\n  updateUserNames: function () {\n    var i = 0;\n    var allUsers = Meteor.users.find({username: {$exists: true}, profile: {$exists: true}, 'profile.isDummy': {$ne: true}});\n\n    console.log('> Found '+allUsers.count()+' users.\\n');\n\n    allUsers.forEach(function(user){\n      i++;\n\n      // Perform the same transforms done by useraccounts with `lowercaseUsernames` set to `true`\n      var oldUsername = user.username;\n      var username = user.username;\n      username = username.trim().replace(/\\s+/gm, ' ');\n      user.profile.username = user.profile.name || username;\n      delete user.profile.name;\n      username = username.toLowerCase().replace(/\\s+/gm, '');\n      user.username = username;\n\n      if (user.emails && user.emails.length > 0) {\n        _.each(user.emails, function(email){\n          email.address = email.address.toLowerCase().replace(/\\s+/gm, '');\n        });\n      }\n\n      console.log('> Updating user '+user._id+' ('+oldUsername+' -> ' + user.username + ')');\n\n      try {\n        Meteor.users.update(user._id, {\n          $set: {\n            emails: user.emails,\n            profile: user.profile,\n            username: user.username,\n          },\n        });\n      }\n      catch (err) {\n        console.warn('> Unable to convert username ' + user.username + ' to lowercase!');\n        console.warn('> Please try to fix it by hand!! :(');\n      }\n    });\n    return i;\n  },\n  changeColorNames: function () {\n    var i = 0;\n    var settings = Settings.findOne();\n    var set = {};\n\n    if (!!settings) {\n\n      if (!!settings.buttonColor)\n        set.accentColor = settings.buttonColor;\n\n      if (!!settings.buttonTextColor)\n        set.accentContrastColor = settings.buttonTextColor;\n\n      if (!!settings.buttonColor)\n        set.secondaryColor = settings.headerColor;\n\n      if (!!settings.buttonColor)\n        set.secondaryContrastColor = settings.headerTextColor;\n\n      if (!_.isEmpty(set)) {\n        Settings.update(settings._id, {$set: set}, {validate: false});\n      }\n\n    }\n    return i;\n  },\n  migrateUserProfiles: function () {\n    var i = 0;\n    var allUsers = Meteor.users.find({telescope: {$exists: false}});\n    console.log('> Found '+allUsers.count()+' users.\\n');\n\n    allUsers.forEach(function(user){\n      i++;\n\n      console.log('> Updating user '+user._id+' (' + user.username + ')');\n\n      var telescopeUserData = {};\n\n      // loop over user data schema\n      _.each(Telescope.schemas.userData._schema, function (property, key) {\n\n        if (!!user[key]) { // look for property on root of user object\n          telescopeUserData[key] = user[key];\n        } else if (user.votes && !!user.votes[key]) { // look for it in user.votes object\n          telescopeUserData[key] = user.votes[key];\n        } else if (user.profile && user.profile[key]) { // look for it in user.profile object\n          telescopeUserData[key] = user.profile[key];\n        }\n        \n      });\n\n      // console.log(telescopeUserData);\n\n      try {\n        Meteor.users.update(user._id, {\n          $set: {\n            telescope: telescopeUserData\n          }\n        });\n      } catch (err) {\n        console.log(err);\n        console.warn('> Unable to migrate profile for user ' + user.username);\n      }\n    });\n    return i;\n  },\n  migrateEmailHash: function () {\n    var i = 0;\n    var allUsers = Meteor.users.find({$and: [{\"email_hash\": {$exists: true}}, {\"telescope.emailHash\": {$exists: false}}]});\n    console.log('> Found '+allUsers.count()+' users.\\n');\n\n    allUsers.forEach(function(user){\n      i++;\n\n      console.log('> Updating user '+user._id+' (' + user.username + ')');\n\n      var emailHash = user.email_hash;\n      if (!!emailHash) {\n        Meteor.users.update(user._id, {$set: {\"telescope.emailHash\": emailHash}});\n      }\n    });\n    return i;\n  },\n  // addTopLevelCommentIdToComments: function() {\n  //   var i = 0;\n\n  //   // find all root comments and set topLevelCommentId on their root children\n  //   Comments.find({parentCommentId: {$exists : false}}).forEach(function (comment) {\n      \n  //     // topLevelCommentId is the root comment._id\n  //     var topLevelCommentId = comment._id;\n  //     console.log(\"Root Comment found: \" + topLevelCommentId);\n      \n  //     // find childComments that have this root comment as parentCommentId\n  //     Comments.find({parentCommentId: comment._id}).forEach(function (childComment) {\n  //       i++;\n  //       updateParentAndChild(topLevelCommentId, childComment._id);\n  //     });\n    \n  //   });\n    \n  //   function updateParentAndChild(topLevelCommentId, parentId) {\n    \n  //     i++;\n  //     console.log(\"Parent Comment: \" + parentId, \" top level comment \" + topLevelCommentId);\n     \n  //     Comments.update(parentId, {$set: {'topLevelCommentId': topLevelCommentId}}, {multi: false, validate: false});\n    \n  //     var childComments = Comments.find({topLevelCommentId: {$exists : false}, parentCommentId: parentId});\n    \n  //     console.log('> Found '+childComments.count()+' child comments.\\n');\n    \n  //     childComments.forEach(function(childComment){\n  //       i++;\n    \n  //       // find all nested childComments and set topLevelCommentId\n  //       console.log(\"Child Comment: \" + childComment._id, \" top level comment \" + topLevelCommentId);\n    \n  //       // set nested childComment to use parent's topLevelCommentId\n  //       Comments.update(childComment._id, {$set: {'topLevelCommentId': topLevelCommentId}}, {multi: false, validate: false});\n  //       updateParentAndChild(topLevelCommentId, childComment._id, true);\n  //     });\n    \n  //   }\n  //   console.log(\"---------------------\");\n  //   return i;\n  // },\n  migrateDisplayName: function () {\n    var i = 0;\n    var displayName;\n    var allUsers = Meteor.users.find({\"telescope.displayName\": {$exists: false}});\n    console.log('> Found '+allUsers.count()+' users.\\n');\n\n    allUsers.forEach(function(user){\n      i++;\n\n      console.log('> Updating user '+user._id+' (' + user.username + ')');\n      if (!!user.profile) {\n        displayName = user.profile.name || user.profile.username;\n      } else {\n        displayName = user.username;\n      }\n\n      console.log('name: ', displayName);\n      if (!!displayName) {\n        Meteor.users.update(user._id, {$set: {\"telescope.displayName\": displayName}});\n      } else {\n        console.log(\"displayName not found :(\");\n      }\n    });\n    return i;\n  },  \n  migrateNewsletterSettings: function () {\n    var i = 0;\n    var allUsers = Meteor.users.find({\n      $or: [\n        {\"profile.showBanner\": {$exists: true}},\n        {\"profile.subscribedToNewsletter\": {$exists: true}}\n      ]\n    });\n    console.log('> Found '+allUsers.count()+' users.\\n');\n\n    allUsers.forEach(function(user){\n      i++;\n      var displayName;\n\n      if (!!user.profile) {\n        displayName = user.profile.name || user.profile.username;\n      } else {\n        displayName = user.username;\n      }\n\n      console.log('> Updating user '+user._id+' (' + displayName + ')');\n\n      if (user.profile) {\n\n        var set = {};\n\n        var showBanner = user.profile.showBanner;\n        if (typeof showBanner !== \"undefined\") {\n          set[\"telescope.newsletter.showBanner\"] = showBanner;\n        }\n\n        var subscribeToNewsletter = user.profile.subscribedToNewsletter;\n        if (typeof subscribeToNewsletter !== \"undefined\") {\n          set[\"telescope.newsletter.subscribeToNewsletter\"] = subscribeToNewsletter;\n        }\n        console.log(set)\n        if (!_.isEmpty(set)) {\n          Meteor.users.update(user._id, {$set: set});\n        }\n\n      }\n\n    });\n    return i;\n  }\n};\n\n// TODO: normalize categories?\n"]}