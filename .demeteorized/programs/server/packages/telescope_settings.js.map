{"version":3,"sources":["telescope:settings/lib/settings.js","telescope:settings/lib/router.js","telescope:settings/lib/menus.js","telescope:settings//Users/sacha/Dev/Telescope/packages/telescope-settings/package-tap.i18n","telescope:settings/lib/server/publications.js","telescope:settings//Users/sacha/Dev/Telescope/packages/telescope-settings/i18n/en.i18n.json"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,G;AACA,qC;AACA,sB;AACA,G;AACA,4C;;AAEA,oC;AACA,U;AACA,iB;AACA,mB;AACA,e;AACA,yB;AACA,K;AACA,I;AACA,Y;AACA,iB;AACA,mB;AACA,qC;AACA,e;AACA,0B;AACA,4B;AACA,gG;AACA,K;AACA,I;AACA,Y;AACA,iB;AACA,mB;AACA,e;AACA,yB;AACA,K;AACA,I;AACA,gB;AACA,iB;AACA,mB;AACA,e;AACA,0B;AACA,c;AACA,gE;AACA,K;AACA,I;AACA,c;AACA,iB;AACA,mB;AACA,kC;AACA,e;AACA,0B;AACA,gF;AACA,K;AACA,I;AACA,c;AACA,iB;AACA,mB;AACA,e;AACA,0B;AACA,wD;AACA,gB;AACA,yC;AACA,0C;AACA,O;AACA,K;AACA,I;AACA,sB;AACA,kB;AACA,mB;AACA,e;AACA,uB;AACA,sC;AACA,K;AACA,I;AACA,sB;AACA,kB;AACA,mB;AACA,e;AACA,uB;AACA,sC;AACA,K;AACA,I;AACA,yB;AACA,kB;AACA,mB;AACA,e;AACA,0B;AACA,sD;AACA,yC;AACA,K;AACA,I;AACA,iB;AACA,iB;AACA,mB;AACA,kB;AACA,e;AACA,wB;AACA,yE;AACA,4B;AACA,K;AACA,I;AACA,Y;AACA,iB;AACA,mB;AACA,kB;AACA,e;AACA,wB;AACA,wE;AACA,4B;AACA,K;AACA,I;AACA,wB;AACA,iB;AACA,mB;AACA,qB;AACA,kB;AACA,e;AACA,uB;AACA,kF;AACA,4B;AACA,K;AACA,I;AACA,gB;AACA,iB;AACA,mB;AACA,e;AACA,wB;AACA,uD;AACA,4B;AACA,4E;AACA,kB;AACA,4D;AACA,6B;AACA,Y;AACA,W;AACA,O;AACA,K;AACA,I;AACA,gB;AACA,iB;AACA,mB;AACA,e;AACA,wB;AACA,qD;AACA,gB;AACA,6C;AACA,4C;AACA,O;AACA,K;AACA,I;AACA,c;AACA,mB;AACA,mB;AACA,e;AACA,wB;AACA,2D;AACA,qB;AACA,qB;AACA,4B;AACA,2E;AACA,kB;AACA,8B;AACA,6B;AACA,Y;AACA,W;AACA,O;AACA,K;AACA,I;AACA,iB;AACA,iB;AACA,mB;AACA,qB;AACA,e;AACA,wB;AACA,6E;AACA,K;AACA,I;AACA,oB;AACA,iB;AACA,mB;AACA,qB;AACA,e;AACA,2B;AACA,gF;AACA,K;AACA,I;AACA,mB;AACA,iB;AACA,mB;AACA,qB;AACA,e;AACA,wB;AACA,uF;AACA,K;AACA,I;AACA,sB;AACA,iB;AACA,oB;AACA,mB;AACA,e;AACA,sB;AACA,K;AACA,I;AACA,iB;AACA,iB;AACA,qB;AACA,mB;AACA,e;AACA,uB;AACA,K;AACA,I;AACA,Y;AACA,iB;AACA,mB;AACA,e;AACA,sB;AACA,K;AACA,I;AACA,e;AACA,iB;AACA,mB;AACA,e;AACA,sB;AACA,K;AACA,I;AACA,c;AACA,iB;AACA,mB;AACA,e;AACA,sB;AACA,K;AACA,I;AACA,e;AACA,iB;AACA,mB;AACA,e;AACA,sB;AACA,K;AACA,I;AACA,a;AACA,iB;AACA,uB;AACA,mB;AACA,e;AACA,0B;AACA,gE;AACA,4B;AACA,4E;AACA,kB;AACA,uB;AACA,4B;AACA,Y;AACA,W;AACA,yB;AACA,O;AACA,K;AACA,I;AACA,kB;AACA,iB;AACA,mB;AACA,e;AACA,sB;AACA,uE;AACA,a;AACA,K;AACA,I;AACA,gB;AACA,iB;AACA,mB;AACA,e;AACA,yB;AACA,kD;AACA,K;AACA,I;AACA,wB;AACA,iB;AACA,mB;AACA,e;AACA,yB;AACA,2C;AACA,K;AACA,I;AACA,mB;AACA,iB;AACA,mB;AACA,e;AACA,yB;AACA,yD;AACA,K;AACA,I;AACA,2B;AACA,iB;AACA,mB;AACA,e;AACA,yB;AACA,2C;AACA,K;AACA,I;AACA,Y;AACA,iB;AACA,mB;AACA,e;AACA,qB;AACA,gG;AACA,K;AACA,I;AACA,e;AACA,iB;AACA,mB;AACA,e;AACA,qB;AACA,sE;AACA,K;AACA,I;AACA,mB;AACA,iB;AACA,mB;AACA,e;AACA,8B;AACA,K;AACA,I;AACA,sB;AACA,iB;AACA,mB;AACA,e;AACA,8B;AACA,K;AACA,I;AACA,e;AACA,iB;AACA,mB;AACA,e;AACA,8B;AACA,K;AACA,I;AACA,a;AACA,iB;AACA,mB;AACA,e;AACA,8B;AACA,K;AACA,I;AACA,e;AACA,iB;AACA,mB;AACA,e;AACA,sB;AACA,yD;AACA,a;AACA,K;AACA,I;AACA,c;AACA,iB;AACA,mB;AACA,e;AACA,sB;AACA,6E;AACA,a;AACA,K;AACA,I;AACA,gB;AACA,iB;AACA,mB;AACA,kB;AACA,e;AACA,wB;AACA,gG;AACA,c;AACA,4B;AACA,K;AACA,I;AACA,U;AACA,iB;AACA,mB;AACA,kB;AACA,e;AACA,sB;AACA,yE;AACA,c;AACA,4B;AACA,K;AACA,I;AACA,U;AACA,kB;AACA,mB;AACA,e;AACA,qB;AACA,qE;AACA,K;AACA,I;AACA,gB;AACA,mB;AACA,mB;AACA,e;AACA,oB;AACA,qB;AACA,qB;AACA,gB;AACA,S;AACA,yB;AACA,iC;AACA,U;AACA,S;AACA,2B;AACA,0B;AACA,U;AACA,S;AACA,4B;AACA,2B;AACA,S;AACA,Q;AACA,oE;AACA,K;AACA,G;AACA,G;;;AAGA,mC;;AAEA,uC;;AAEA,gD;AACA,4C;;AAEA,sH;AACA,oC;;AAEA,gI;AACA,2C;;AAEA,oG;AACA,6B;;AAEA,0E;AACA,yB;;AAEA,iC;AACA,qB;AACA,G;AACA,E;;AAEA,uD;AACA,uB;AACA,kE;AACA,I;;AAEA,4B;AACA,kB;AACA,+B;AACA,+B;AACA,8B;AACA,K;AACA,G;;AAEA,4B;AACA,gE;AACA,4F;AACA,uC;AACA,G;;;;;;;;;;;;;;;;;;;ACrcA,4B;AACA,a;;AAEA,6B;AACA,4C;AACA,qB;AACA,qC;AACA,uB;AACA,iD;;AAEA,wC;AACA,c;AACA,gC;AACA,0B;AACA,Q;AACA,K;AACA,K;AACA,G;;;;;;;;;;;;;;;;;;;ACjBA,sC;AACA,G;AACA,sB;AACA,sB;AACA,2C;AACA,G;AACA,G;;;;;;;;;;;;;;;;;;ACNA,oH;;AAEA,+D;AACA,gD;;;;;;;;;;;;;;;;;;;ACHA,uC;AACA,mB;AACA,yB;;AAEA,qF;AACA,kE;AACA,yB;AACA,iC;AACA,K;;AAEA,uC;AACA,iC;AACA,2B;AACA,O;AACA,G;;AAEA,oC;AACA,G;;;;;;;;;;;;;;;;;;;ACjBA,6B;AACA,wC;AACA,qC;;AAEA,gC;AACA,yD;AACA,C;AACA,gD;AACA,kB;AACA,8D;AACA,gD","file":"/packages/telescope_settings.js","sourcesContent":["/**\n * The global namespace for Settings.\n * @namespace Settings\n */\nSettings = new Mongo.Collection(\"settings\");\n\nSettings.schema = new SimpleSchema({\n  title: {\n    type: String,\n    optional: true,\n    autoform: {\n      group: \"01_general\"\n    }\n  },\n  siteUrl: {\n    type: String,\n    optional: true,\n    // regEx: SimpleSchema.RegEx.Url,\n    autoform: {\n      group: \"01_general\",\n      type: \"bootstrap-url\",\n      instructions: 'Your site\\'s URL (with trailing \"/\"). Will default to Meteor.absoluteUrl()'\n    }\n  },\n  tagline: {\n    type: String,\n    optional: true,\n    autoform: {\n      group: \"01_general\"\n    }\n  },\n  description: {\n    type: String,\n    optional: true,\n    autoform: {\n      group: \"01_general\",\n      rows: 5,\n      instructions: 'A short description used for SEO purposes.'\n    }\n  },\n  siteImage: {\n    type: String,\n    optional: true,\n    regEx: SimpleSchema.RegEx.Url,\n    autoform: {\n      group: \"01_general\",\n      instructions: \"URL to an image for the open graph image tag for all pages\"\n    }\n  },\n  navLayout: {\n    type: String,\n    optional: true,\n    autoform: {\n      group: \"01_general\",\n      instructions: 'The layout used for the main menu',\n      options: [\n        {value: 'top-nav', label: 'Top'},\n        {value: 'side-nav', label: 'Side'}\n      ]\n    }\n  },\n  requireViewInvite: {\n    type: Boolean,\n    optional: true,\n    autoform: {\n      group: 'invites',\n      leftLabel: 'Require View Invite'\n    }\n  },\n  requirePostInvite: {\n    type: Boolean,\n    optional: true,\n    autoform: {\n      group: 'invites',\n      leftLabel: 'Require Post Invite'\n    }\n  },\n  requirePostsApproval: {\n    type: Boolean,\n    optional: true,\n    autoform: {\n      group: \"01_general\",\n      instructions: \"Posts must be approved by admin\",\n      leftLabel: \"Require Posts Approval\"\n    }\n  },\n  defaultEmail: {\n    type: String,\n    optional: true,\n    private: true,\n    autoform: {\n      group: \"06_email\",\n      instructions: 'The address all outgoing emails will be sent from.',\n      class: \"private-field\"\n    }\n  },\n  mailUrl: {\n    type: String,\n    optional: true,\n    private: true,\n    autoform: {\n      group: \"06_email\",\n      instructions: 'MAIL_URL environment variable (requires restart).',\n      class: \"private-field\"\n    }\n  },\n  scoreUpdateInterval: {\n    type: Number,\n    optional: true,\n    defaultValue: 30,\n    private: true,\n    autoform: {\n      group: 'scoring',\n      instructions: 'How often to recalculate scores, in seconds (default to 30)',\n      class: \"private-field\"\n    }\n  },\n  defaultView: {\n    type: String,\n    optional: true,\n    autoform: {\n      group: \"02_posts\",\n      instructions: 'The view used for the front page',\n      options: function () {\n        return _.map(Telescope.menuItems.get(\"viewsMenu\"), function (view) {\n          return {\n            value: Telescope.utils.camelCaseify(view.label),\n            label: view.label\n          };\n        });\n      }\n    }\n  },\n  postsLayout: {\n    type: String,\n    optional: true,\n    autoform: {\n      group: \"02_posts\",\n      instructions: 'The layout used for post lists',\n      options: [\n        {value: 'posts-list', label: 'List'},\n        {value: 'posts-grid', label: 'Grid'}\n      ]\n    }\n  },\n  postViews: {\n    type: [String],\n    optional: true,\n    autoform: {\n      group: \"02_posts\",\n      instructions: 'Posts views showed in the views menu',\n      editable: true,\n      noselect: true,\n      options: function () {\n        return _.map(Telescope.menuItems.get(\"viewsMenu\"), function (item){\n          return {\n            value: item.route,\n            label: item.label\n          };\n        });\n      }\n    }\n  },\n  postInterval: {\n    type: Number,\n    optional: true,\n    defaultValue: 30,\n    autoform: {\n      group: \"02_posts\",\n      instructions: 'Minimum time between posts, in seconds (defaults to 30)'\n    }\n  },\n  commentInterval: {\n    type: Number,\n    optional: true,\n    defaultValue: 15,\n    autoform: {\n      group: \"03_comments\",\n      instructions: 'Minimum time between comments, in seconds (defaults to 15)'\n    }\n  },\n  maxPostsPerDay: {\n    type: Number,\n    optional: true,\n    defaultValue: 30,\n    autoform: {\n      group: \"02_posts\",\n      instructions: 'Maximum number of posts a user can post in a day (default to 30).'\n    }\n  },\n  startInvitesCount: {\n    type: Number,\n    defaultValue: 3,\n    optional: true,\n    autoform: {\n      group: 'invites'\n    }\n  },\n  postsPerPage: {\n    type: Number,\n    defaultValue: 10,\n    optional: true,\n    autoform: {\n      group: \"02_posts\"\n    }\n  },\n  logoUrl: {\n    type: String,\n    optional: true,\n    autoform: {\n      group: \"04_logo\"\n    }\n  },\n  logoHeight: {\n    type: Number,\n    optional: true,\n    autoform: {\n      group: \"04_logo\"\n    }\n  },\n  logoWidth: {\n    type: Number,\n    optional: true,\n    autoform: {\n      group: \"04_logo\"\n    }\n  },\n  faviconUrl: {\n    type: String,\n    optional: true,\n    autoform: {\n      group: \"04_logo\"\n    }\n  },\n  language: {\n    type: String,\n    defaultValue: 'en',\n    optional: true,\n    autoform: {\n      group: \"01_general\",\n      instructions: 'The app\\'s language. Defaults to English.',\n      options: function () {\n        var languages = _.map(TAPi18n.getLanguages(), function (item, key) {\n          return {\n            value: key,\n            label: item.name\n          };\n        });\n        return languages;\n      }\n    }\n  },\n  backgroundCSS: {\n    type: String,\n    optional: true,\n    autoform: {\n      group: 'extras',\n      instructions: 'CSS code for the <body>\\'s \"background\" property',\n      rows: 5\n    }\n  },\n  accentColor: {\n    type: String,\n    optional: true,\n    autoform: {\n      group: \"05_colors\",\n      instructions: 'Used for button backgrounds.'\n    }\n  },\n  accentContrastColor: {\n    type: String,\n    optional: true,\n    autoform: {\n      group: \"05_colors\",\n      instructions: 'Used for button text.'\n    }\n  },\n  secondaryColor: {\n    type: String,\n    optional: true,\n    autoform: {\n      group: \"05_colors\",\n      instructions: 'Used for the navigation background.'\n    }\n  },\n  secondaryContrastColor: {\n    type: String,\n    optional: true,\n    autoform: {\n      group: \"05_colors\",\n      instructions: 'Used for header text.'\n    }\n  },\n  fontUrl: {\n    type: String,\n    optional: true,\n    autoform: {\n      group: 'fonts',\n      instructions: '@import URL (e.g. https://fonts.googleapis.com/css?family=Source+Sans+Pro)'\n    }\n  },\n  fontFamily: {\n    type: String,\n    optional: true,\n    autoform: {\n      group: 'fonts',\n      instructions: 'font-family (e.g. \"Source Sans Pro\", sans-serif)'\n    }\n  },\n  twitterAccount: {\n    type: String,\n    optional: true,\n    autoform: {\n      group: \"07_integrations\"\n    }\n  },\n  googleAnalyticsId: {\n    type: String,\n    optional: true,\n    autoform: {\n      group: \"07_integrations\"\n    }\n  },\n  mixpanelId: {\n    type: String,\n    optional: true,\n    autoform: {\n      group: \"07_integrations\"\n    }\n  },\n  clickyId: {\n    type: String,\n    optional: true,\n    autoform: {\n      group: \"07_integrations\"\n    }\n  },\n  footerCode: {\n    type: String,\n    optional: true,\n    autoform: {\n      group: 'extras',\n      instructions: 'Footer content (accepts Markdown).',\n      rows: 5\n    }\n  },\n  extraCode: {\n    type: String,\n    optional: true,\n    autoform: {\n      group: 'extras',\n      instructions: 'Any extra HTML code you want to include on every page.',\n      rows: 5\n    }\n  },\n  emailFooter: {\n    type: String,\n    optional: true,\n    private: true,\n    autoform: {\n      group: \"06_email\",\n      instructions: 'Content that will appear at the bottom of outgoing emails (accepts HTML).',\n      rows: 5,\n      class: \"private-field\"\n    }\n  },\n  notes: {\n    type: String,\n    optional: true,\n    private: true,\n    autoform: {\n      group: 'extras',\n      instructions: 'You can store any notes or extra information here.',\n      rows: 5,\n      class: \"private-field\"\n    }\n  },\n  debug: {\n    type: Boolean,\n    optional: true,\n    autoform: {\n      group: 'debug',\n      instructions: 'Enable debug mode for more details console logs'\n    }\n  },\n  authMethods: {\n    type: [String],\n    optional: true,\n    autoform: {\n      group: 'auth',\n      editable: true,\n      noselect: true,\n      options: [\n        {\n          value: 'email',\n          label: 'Email/Password'\n        },\n        {\n          value: 'twitter',\n          label: 'Twitter'\n        },\n        {\n          value: 'facebook',\n          label: 'Facebook'\n        }\n      ],\n      instructions: 'Authentication methods (default to email only)'\n    }\n  }\n});\n\n\nSettings.schema.internationalize();\n\nSettings.attachSchema(Settings.schema);\n\nSettings.get = function(setting, defaultValue) {\n  var settings = Settings.find().fetch()[0];\n\n  if (Meteor.isServer && Meteor.settings && !!Meteor.settings[setting]) { // if on the server, look in Meteor.settings\n    return Meteor.settings[setting];\n\n  } else if (Meteor.settings && Meteor.settings.public && !!Meteor.settings.public[setting]) { // look in Meteor.settings.public\n    return Meteor.settings.public[setting];\n\n  } else if(settings && (typeof settings[setting] !== 'undefined')) { // look in Settings collection\n    return settings[setting];\n\n  } else if (typeof defaultValue !== 'undefined') { // fallback to default\n    return  defaultValue;\n\n  } else { // or return undefined\n    return undefined;\n  }\n};\n\n// use custom template for checkboxes - not working yet\n// if(Meteor.isClient){\n//   AutoForm.setDefaultTemplateForType('afCheckbox', 'settings');\n// }\n\nMeteor.startup(function () {\n  Settings.allow({\n    insert: Users.is.adminById,\n    update: Users.is.adminById,\n    remove: Users.is.adminById\n  });\n});\n\nMeteor.startup(function () {\n  // override Meteor.absoluteUrl() with URL provided in settings\n  Meteor.absoluteUrl.defaultOptions.rootUrl = Settings.get('siteUrl', Meteor.absoluteUrl());\n  debug = Settings.get('debug', false);\n});\n","Meteor.startup(function () {\n  // Settings\n\n  Router.route('/settings', {\n    controller: Telescope.controllers.admin,\n    name: 'settings',\n    // layoutTemplate: 'adminLayout',\n    data: function () {\n      // we only have one set of settings for now\n\n      var settings = Settings.findOne();\n      return {\n        hasSettings: !!settings,\n        settings: settings\n      };\n    }\n  });\n});\n","Telescope.menuItems.add(\"adminMenu\", [\n  {\n    route: 'settings',\n    label: 'settings',\n    description: 'telescope_settings_panel'\n  }\n]);","TAPi18n.packages[\"telescope:settings\"] = {\"translation_function_name\":\"__\",\"helper_name\":\"_\",\"namespace\":\"project\"};\n\n// define package's translation function (proxy to the i18next)\n__ = TAPi18n._getPackageI18nextProxy(\"project\");\n","Meteor.publish('settings', function() {\n  var options = {};\n  var privateFields = {};\n\n  // look at Settings.simpleSchema._schema to see which fields should be kept private\n  _.each(Settings.simpleSchema._schema, function (property, key) {\n    if (property.private)\n      privateFields[key] = false;\n  });\n\n  if(!Users.is.adminById(this.userId)){\n    options = _.extend(options, {\n      fields: privateFields\n    });\n  }\n\n  return Settings.find({}, options);\n});\n","var _ = Package.underscore._,\n    package_name = \"telescope:settings\",\n    namespace = \"telescope:settings\";\n\nif (package_name != \"project\") {\n    namespace = TAPi18n.packages[package_name].namespace;\n}\n// integrate the fallback language translations \ntranslations = {};\ntranslations[namespace] = {\"settings_saved\":\"Settings saved\"};\nTAPi18n._loadLangFileObject(\"en\", translations);\n"]}