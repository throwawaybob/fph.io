{"version":3,"sources":["telescope:scoring/lib/scoring.js","telescope:scoring/lib/server/cron.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,yC;AACA,mC;AACA,uB;AACA,qC;;AAEA,sB;;AAEA,iB;;AAEA,6G;AACA,a;;AAEA,c;;AAEA,sE;AACA,qB;AACA,a;;AAEA,yC;AACA,iC;AACA,2B;AACA,0C;;AAEA,yF;AACA,a;;AAEA,oH;AACA,+F;AACA,2G;AACA,sF;;AAEA,8G;AACA,uC;AACA,a;AACA,uF;AACA,iC;AACA,sB;AACA,c;;AAEA,kE;AACA,uF;AACA,oE;AACA,iC;;AAEA,iB;AACA,yD;;AAEA,qB;AACA,qB;AACA,4B;AACA,2B;AACA,0B;;AAEA,uF;AACA,kD;;AAEA,qF;AACA,oC;AACA,4E;AACA,a;AACA,8B;AACA,4D;AACA,0D;AACA,G;AACA,W;AACA,E;;;;;;;;;;;;;;;;;;;ACjEA,4B;AACA,gE;AACA,0B;;AAEA,+C;AACA,oC;AACA,2B;AACA,8B;AACA,iD;AACA,wH;AACA,+E;AACA,S;AACA,4E;AACA,wF;AACA,S;AACA,+E;AACA,wF;AACA,6B;;AAEA,4C;AACA,oC;AACA,2B;AACA,8B;AACA,8D;AACA,+E;AACA,S;AACA,oE;AACA,wF;AACA,S;AACA,oB;;AAEA,G;AACA,G","file":"/packages/telescope_scoring.js","sourcesContent":["Telescope.updateScore = function (args) {\n  var collection = args.collection;\n  var item = args.item;\n  var forceUpdate = args.forceUpdate;\n\n  // console.log(item)\n\n  // Status Check\n\n  if (!!item.status && item.status !== 2) // if item has a status and is not approved, don't update its score\n    return 0;\n\n  // Age Check\n\n  // If for some reason item doesn't have a \"postedAt\" property, abort\n  if (!item.postedAt)\n    return 0;\n\n  var postedAt = item.postedAt.valueOf();\n  var now = new Date().getTime();\n  var age = now - postedAt;\n  var ageInHours = age / (60 * 60 * 1000);\n\n  if (postedAt > now) // if post has been scheduled in the future, don't update its score\n    return 0;\n\n  // For performance reasons, the database is only updated if the difference between the old score and the new score\n  // is meaningful enough. To find out, we calculate the \"power\" of a single vote after n days.\n  // We assume that after n days, a single vote will not be powerful enough to affect posts' ranking order.\n  // Note: sites whose posts regularly get a lot of votes can afford to use a lower n.\n\n  // n =  number of days after which a single vote will not have a big enough effect to trigger a score update\n  //      and posts can become inactive\n  var n = 30;\n  // x = score increase amount of a single vote after n days (for n=100, x=0.000040295)\n  var x = 1/Math.pow(n*24+2,1.3);\n  // time decay factor\n  var f = 1.3;\n\n  // use baseScore if defined, if not just use the number of votes\n  // note: for transition period, also use votes if there are more votes than baseScore\n  // var baseScore = Math.max(item.votes || 0, item.baseScore || 0);\n  var baseScore = item.baseScore;\n\n  // HN algorithm\n  var newScore = baseScore / Math.pow(ageInHours + 2, f);\n\n  // console.log(now)\n  // console.log(age)\n  // console.log(ageInHours)\n  // console.log(baseScore)\n  // console.log(newScore)\n\n  // Note: before the first time updateScore runs on a new item, its score will be at 0\n  var scoreDiff = Math.abs(item.score - newScore);\n\n  // only update database if difference is larger than x to avoid unnecessary updates\n  if (forceUpdate || scoreDiff > x){\n    collection.update(item._id, {$set: {score: newScore, inactive: false}});\n    return 1;\n  }else if(ageInHours > n*24){\n    // only set a post as inactive if it's older than n days\n    collection.update(item._id, {$set: {inactive: true}});\n  }\n  return 0;\n};\n","Meteor.startup(function () {\n  var scoreInterval = Settings.get(\"scoreUpdateInterval\") || 30;\n  if (scoreInterval > 0) {\n\n    // active items get updated every N seconds\n    Meteor.setInterval(function () {\n      var updatedPosts = 0;\n      var updatedComments = 0;\n      // console.log('tick ('+scoreInterval+')');\n      Posts.find({'status': 2,'inactive': {$ne : true}}).forEach(function (post) { // only run scoring on approved posts\n        updatedPosts += Telescope.updateScore({collection: Posts, item: post});\n      });\n      Comments.find({'inactive': {$ne : true}}).forEach(function (comment) {\n        updatedComments += Telescope.updateScore({collection: Comments, item: comment});\n      });\n      // console.log(\"Updated \"+updatedPosts+\"/\"+Posts.find().count()+\" Posts\")\n      // console.log(\"Updated \"+updatedComments+\"/\"+Comments.find().count()+\" Comments\")\n    }, scoreInterval * 1000);\n\n    // inactive items get updated every hour\n    Meteor.setInterval(function () {\n      var updatedPosts = 0;\n      var updatedComments = 0;\n      Posts.find({'inactive': true}).forEach(function (post) {\n        updatedPosts += Telescope.updateScore({collection: Posts, item: post});\n      });\n      Comments.find({'inactive': true}).forEach(function (comment) {\n        updatedComments += Telescope.updateScore({collection: Comments, item: comment});\n      });\n    }, 3600 * 1000);\n\n  }\n});\n"]}