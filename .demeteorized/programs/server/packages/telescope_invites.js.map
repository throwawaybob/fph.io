{"version":3,"sources":["telescope:invites//Users/sacha/Dev/Telescope/packages/telescope-invites/package-tap.i18n","telescope:invites/lib/invites.js","telescope:invites/lib/server/invites.js","telescope:invites/lib/server/publications.js","telescope:invites//Users/sacha/Dev/Telescope/packages/telescope-invites/i18n/de.i18n.json","telescope:invites//Users/sacha/Dev/Telescope/packages/telescope-invites/i18n/en.i18n.json","telescope:invites//Users/sacha/Dev/Telescope/packages/telescope-invites/i18n/es.i18n.json","telescope:invites//Users/sacha/Dev/Telescope/packages/telescope-invites/i18n/fr.i18n.json","telescope:invites//Users/sacha/Dev/Telescope/packages/telescope-invites/i18n/it.i18n.json","telescope:invites//Users/sacha/Dev/Telescope/packages/telescope-invites/i18n/zh-CN.i18n.json"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,mH;;AAEA,+D;AACA,gD;;;;;;;;;;;;;;;;;;;ACHA,qC;AACA,Q;AACA,iB;AACA,kB;AACA,I;AACA,mB;AACA,iB;AACA,kB;AACA,I;AACA,qB;AACA,iB;AACA,mC;AACA,I;AACA,a;AACA,kB;AACA,kB;AACA,G;AACA,G;;AAEA,2C;AACA,mC;;AAEA,gB;AACA,K;AACA,2C;AACA,I;AACA,G;AACA,uC;AACA,kB;AACA,mB;AACA,oB;AACA,K;AACA,I;AACA,K;AACA,2D;AACA,I;AACA,G;AACA,wC;AACA,kB;AACA,mB;AACA,oB;AACA,K;AACA,I;AACA,K;AACA,sC;AACA,I;AACA,G;AACA,qC;AACA,kB;AACA,oB;AACA,mB;AACA,qB;AACA,4B;AACA,iB;AACA,kB;AACA,O;AACA,K;AACA,I;AACA,K;AACA,oD;AACA,I;AACA,G;AACA,qC;AACA,kB;AACA,mB;AACA,qB;AACA,iB;AACA,kB;AACA,O;AACA,K;AACA,I;AACA,K;AACA,qD;AACA,I;AACA,G;AACA,yC;AACA,kB;AACA,mB;AACA,qB;AACA,iB;AACA,kB;AACA,O;AACA,K;AACA,G;AACA,G;;AAEA,4C;;AAEA,c;AACA,qC;AACA,qC;AACA,oC;AACA,G;;AAEA,sC;AACA,2B;AACA,U;AACA,G;;AAEA,qC;AACA,gD;AACA,oE;AACA,c;AACA,C;AACA,4D;;AAEA,gE;AACA,8D;AACA,gC;;AAEA,4E;;AAEA,a;;AAEA,0E;;AAEA,oC;AACA,kC;AACA,2C;AACA,gE;AACA,Q;;AAEA,wC;AACA,qB;AACA,Q;;AAEA,G;AACA,C;AACA,iE;;;;;;;;;;;;;;;;;;;AChIA,gB;;AAEA,mC;;AAEA,6C;AACA,+B;AACA,yE;;AAEA,iE;AACA,uE;;AAEA,kC;AACA,oC;AACA,yB;AACA,O;;AAEA,4C;AACA,uG;AACA,4D;AACA,I;AACA,oG;AACA,oC;AACA,yD;AACA,oH;;AAEA,6C;AACA,uC;AACA,qE;AACA,Y;AACA,iC;AACA,0E;AACA,O;;AAEA,kE;AACA,6E;;AAEA,2B;AACA,iF;AACA,O;;AAEA,yB;AACA,8E;AACA,sB;AACA,wC;AACA,oC;AACA,6C;AACA,S;;AAEA,8B;AACA,qH;;AAEA,e;AACA,8B;AACA,uC;AACA,iB;AACA,wC;AACA,mD;AACA,wE;AACA,W;AACA,W;AACA,O;;AAEA,4D;AACA,iE;AACA,6B;AACA,kD;AACA,0C;AACA,gG;AACA,0D;AACA,yD;AACA,Y;;AAEA,qC;AACA,8F;AACA,Y;;AAEA,K;;AAEA,Y;AACA,2C;AACA,M;AACA,I;AACA,mC;AACA,wE;AACA,G;AACA,G;;;;;;;;;;;;;;;;;;;ACrFA,6C;AACA,uD;AACA,oF;AACA,G;;;;;;;;;;;;;;;;;;;ACHA,6B;AACA,uC;AACA,oC;;AAEA,gC;AACA,yD;AACA,C;AACA,+C;AACA,kC;AACA,C;;AAEA,0D;AACA,6C;AACA,C;;AAEA,0F;;;;;;;;;;;;;;;;;;;ACfA,6B;AACA,uC;AACA,oC;;AAEA,gC;AACA,yD;AACA,C;AACA,gD;AACA,kB;AACA,mE;AACA,gD;;;;;;;;;;;;;;;;;;;ACVA,6B;AACA,uC;AACA,oC;;AAEA,gC;AACA,yD;AACA,C;AACA,+C;AACA,kC;AACA,C;;AAEA,0D;AACA,6C;AACA,C;;AAEA,0F;;;;;;;;;;;;;;;;;;;ACfA,6B;AACA,uC;AACA,oC;;AAEA,gC;AACA,yD;AACA,C;AACA,+C;AACA,kC;AACA,C;;AAEA,0D;AACA,6C;AACA,C;;AAEA,0F;;;;;;;;;;;;;;;;;;;ACfA,6B;AACA,uC;AACA,oC;;AAEA,gC;AACA,yD;AACA,C;AACA,+C;AACA,kC;AACA,C;;AAEA,0D;AACA,6C;AACA,C;;AAEA,0F;;;;;;;;;;;;;;;;;;;ACfA,6B;AACA,uC;AACA,oC;;AAEA,gC;AACA,yD;AACA,C;AACA,kD;AACA,qC;AACA,C;;AAEA,6D;AACA,gD;AACA,C;;AAEA,6F","file":"/packages/telescope_invites.js","sourcesContent":["TAPi18n.packages[\"telescope:invites\"] = {\"translation_function_name\":\"__\",\"helper_name\":\"_\",\"namespace\":\"project\"};\n\n// define package's translation function (proxy to the i18next)\n__ = TAPi18n._getPackageI18nextProxy(\"project\");\n","var InviteSchema = new SimpleSchema({\n  _id: {\n    type: String,\n    optional: true\n  },\n  invitingUserId: {\n    type: String,\n    optional: true\n  },\n  invitedUserEmail: {\n    type: String,\n    regEx: SimpleSchema.RegEx.Email\n  },\n  accepted: {\n    type: Boolean,\n    optional: true\n  }\n});\n\nInvites = new Meteor.Collection(\"invites\");\nInvites.attachSchema(InviteSchema);\n\nUsers.addField([\n  /**\n    A count of the user's remaining invites\n  */\n  {\n    fieldName: \"telescope.inviteCount\",\n    fieldSchema: {\n      type: Number,\n      optional: true\n    }\n  },\n  /**\n    A count of how many users have been invited by the user\n  */\n  {\n    fieldName: \"telescope.invitedCount\",\n    fieldSchema: {\n      type: Number,\n      optional: true\n    }\n  },\n  /**\n    Whether the user is invited or not\n  */\n  {\n    fieldName: \"telescope.isInvited\",\n    fieldSchema: {\n      type: Boolean,\n      public: true,\n      optional: true,\n      editableBy: [\"admin\"],\n      autoform: {\n        omit: true\n      }\n    }\n  },\n  /**\n    The _id of the user who invited the current user\n  */\n  {\n    fieldName: \"telescope.invitedBy\",\n    fieldSchema: {\n      type: String,\n      optional: true,\n      autoform: {\n        omit: true\n      }\n    }\n  },\n  /**\n    The name of the user who invited the current user\n  */\n  {\n    fieldName: \"telescope.invitedByName\",\n    fieldSchema: {\n      type: String,\n      optional: true,\n      autoform: {\n        omit: true\n      }\n    }\n  }\n]);\n\n// invites are managed through Meteor method\n\nInvites.deny({\n  insert: function(){ return true; },\n  update: function(){ return true; },\n  remove: function(){ return true; }\n});\n\nTelescope.modules.add(\"profileEdit\", {\n  template: 'user_invites',\n  order: 2\n});\n\n function setStartingInvites (user) {\n  // give new users a few invites (default to 3)\n  user.telescope.inviteCount = Settings.get('startInvitesCount', 3);\n  return user;\n}\nTelescope.callbacks.add(\"onCreateUser\", setStartingInvites);\n\n// on profile completion, check if the new user has been invited\n// if so set her status accordingly and update invitation info\nfunction checkIfInvited (user) {\n\n  var invite = Invites.findOne({ invitedUserEmail : Users.getEmail(user) });\n\n  if(invite){\n\n    var invitedBy = Meteor.users.findOne({ _id : invite.invitingUserId });\n\n    Users.update(user._id, { $set: {\n      \"telescope.isInvited\": true,\n      \"telescope.invitedBy\": invitedBy._id,\n      \"telescope.invitedByName\": Users.getDisplayName(invitedBy)\n    }});\n\n    Invites.update(invite._id, {$set : {\n      accepted : true\n    }});\n\n  }\n}\nTelescope.callbacks.add(\"profileCompletedAsync\", checkIfInvited);\n","Meteor.methods({\n\n  inviteUser: function(invitation){\n\n    // invite user returns the following hash\n    // { newUser : true|false }\n    // newUser is true if the person being invited is not on the site yet\n\n    // invitation can either contain userId or an email address :\n    // { invitedUserEmail : 'bob@gmail.com' } or { userId : 'user-id' }\n\n    check(invitation, Match.OneOf(\n      { invitedUserEmail : String },\n      { userId : String }\n    ));\n\n    var user = invitation.invitedUserEmail ?\n          Meteor.users.findOne({ emails : { $elemMatch: { address: invitation.invitedUserEmail } } }) :\n          Meteor.users.findOne({ _id : invitation.userId });\n    \n    var userEmail = invitation.invitedUserEmail ? invitation.invitedUserEmail :Users.getEmail(user);\n    var currentUser = Meteor.user();\n    var currentUserIsAdmin = Users.is.admin(currentUser);\n    var currentUserCanInvite = currentUserIsAdmin || (currentUser.inviteCount > 0 && Users.can.invite(currentUser));\n\n    // check if the person is already invited\n    if(user && Users.is.invited(user)){\n      throw new Meteor.Error(403, \"This person is already invited.\");\n    } else {\n      if (!currentUserCanInvite){\n        throw new Meteor.Error(701, \"You can't invite this user, sorry.\");\n      }\n\n      // don't allow duplicate multiple invite for the same person\n      var existingInvite = Invites.findOne({ invitedUserEmail : userEmail });\n\n      if (existingInvite) {\n        throw new Meteor.Error(403, \"Somebody has already invited this person.\");\n      }\n\n      // create an invite\n      // consider invite accepted if the invited person has an account already\n      Invites.insert({\n        invitingUserId: Meteor.userId(),\n        invitedUserEmail: userEmail,\n        accepted: typeof user !== \"undefined\"\n      });\n\n      // update invinting user\n      Meteor.users.update(Meteor.userId(), {$inc:{\"telescope.inviteCount\": -1}, $inc:{\"telescope.invitedCount\": 1}});\n\n      if(user){\n        // update invited user\n        Meteor.users.update(user._id, {\n          $set: {\n            \"telescope.isInvited\": true,\n            \"telescope.invitedBy\": Meteor.userId(),\n            \"telescope.invitedByName\": Users.getDisplayName(currentUser)\n          }\n        });\n      }\n\n      var communityName = Settings.get('title','Telescope'),\n          emailSubject = 'You are invited to try '+communityName,\n          emailProperties = {\n            newUser : typeof user === 'undefined',\n            communityName : communityName,\n            actionLink : user ? Telescope.utils.getSigninUrl() : Telescope.utils.getSignupUrl(),\n            invitedBy : Users.getDisplayName(currentUser),\n            profileUrl : Users.getProfileUrl(currentUser)\n          };\n\n      Meteor.setTimeout(function () {\n        Telescope.email.buildAndSend(userEmail, emailSubject, 'emailInvite', emailProperties);\n      }, 1);\n\n    }\n\n    return {\n      newUser : typeof user === 'undefined'\n    };\n  },\n  unInviteUser: function (userId) {\n    Meteor.users.update(userId, {$set: {\"telescope.isInvited\": false}});\n  }\n});\n","Meteor.publish('invites', function (userId) {\n  var invites = Invites.find({invitingUserId: userId});\n  return (this.userId === userId || Users.is.adminById(this.userId)) ? invites : [];\n});\n","var _ = Package.underscore._,\n    package_name = \"telescope:invites\",\n    namespace = \"telescope:invites\";\n\nif (package_name != \"project\") {\n    namespace = TAPi18n.packages[package_name].namespace;\n}\nif(_.isUndefined(TAPi18n.translations[\"de\"])) {\n  TAPi18n.translations[\"de\"] = {};\n}\n\nif(_.isUndefined(TAPi18n.translations[\"de\"][namespace])) {\n  TAPi18n.translations[\"de\"][namespace] = {};\n}\n\n_.extend(TAPi18n.translations[\"de\"][namespace], {\"translation_key\":\"translation string\"});\n","var _ = Package.underscore._,\n    package_name = \"telescope:invites\",\n    namespace = \"telescope:invites\";\n\nif (package_name != \"project\") {\n    namespace = TAPi18n.packages[package_name].namespace;\n}\n// integrate the fallback language translations \ntranslations = {};\ntranslations[namespace] = {\"translation_key\":\"translation string\"};\nTAPi18n._loadLangFileObject(\"en\", translations);\n","var _ = Package.underscore._,\n    package_name = \"telescope:invites\",\n    namespace = \"telescope:invites\";\n\nif (package_name != \"project\") {\n    namespace = TAPi18n.packages[package_name].namespace;\n}\nif(_.isUndefined(TAPi18n.translations[\"es\"])) {\n  TAPi18n.translations[\"es\"] = {};\n}\n\nif(_.isUndefined(TAPi18n.translations[\"es\"][namespace])) {\n  TAPi18n.translations[\"es\"][namespace] = {};\n}\n\n_.extend(TAPi18n.translations[\"es\"][namespace], {\"translation_key\":\"translation string\"});\n","var _ = Package.underscore._,\n    package_name = \"telescope:invites\",\n    namespace = \"telescope:invites\";\n\nif (package_name != \"project\") {\n    namespace = TAPi18n.packages[package_name].namespace;\n}\nif(_.isUndefined(TAPi18n.translations[\"fr\"])) {\n  TAPi18n.translations[\"fr\"] = {};\n}\n\nif(_.isUndefined(TAPi18n.translations[\"fr\"][namespace])) {\n  TAPi18n.translations[\"fr\"][namespace] = {};\n}\n\n_.extend(TAPi18n.translations[\"fr\"][namespace], {\"translation_key\":\"translation string\"});\n","var _ = Package.underscore._,\n    package_name = \"telescope:invites\",\n    namespace = \"telescope:invites\";\n\nif (package_name != \"project\") {\n    namespace = TAPi18n.packages[package_name].namespace;\n}\nif(_.isUndefined(TAPi18n.translations[\"it\"])) {\n  TAPi18n.translations[\"it\"] = {};\n}\n\nif(_.isUndefined(TAPi18n.translations[\"it\"][namespace])) {\n  TAPi18n.translations[\"it\"][namespace] = {};\n}\n\n_.extend(TAPi18n.translations[\"it\"][namespace], {\"translation_key\":\"translation string\"});\n","var _ = Package.underscore._,\n    package_name = \"telescope:invites\",\n    namespace = \"telescope:invites\";\n\nif (package_name != \"project\") {\n    namespace = TAPi18n.packages[package_name].namespace;\n}\nif(_.isUndefined(TAPi18n.translations[\"zh-CN\"])) {\n  TAPi18n.translations[\"zh-CN\"] = {};\n}\n\nif(_.isUndefined(TAPi18n.translations[\"zh-CN\"][namespace])) {\n  TAPi18n.translations[\"zh-CN\"][namespace] = {};\n}\n\n_.extend(TAPi18n.translations[\"zh-CN\"][namespace], {\"translation_key\":\"translation string\"});\n"]}