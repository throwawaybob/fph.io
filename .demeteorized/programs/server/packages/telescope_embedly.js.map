{"version":3,"sources":["telescope:embedly//Users/sacha/Dev/Telescope/packages/telescope-embedly/package-tap.i18n","telescope:embedly/lib/embedly.js","telescope:embedly/lib/server/get_embedly_data.js","telescope:embedly//Users/sacha/Dev/Telescope/packages/telescope-embedly/i18n/en.i18n.json","telescope:embedly//Users/sacha/Dev/Telescope/packages/telescope-embedly/i18n/fr.i18n.json"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,mH;;AAEA,+D;AACA,gD;;;;;;;;;;;;;;;;;;;ACHA,yB;AACA,4B;AACA,gB;AACA,iB;AACA,mB;AACA,oC;AACA,e;AACA,qC;AACA,K;AACA,G;AACA,E;AACA,kC;;AAEA,qB;AACA,qB;AACA,gB;AACA,iB;AACA,mB;AACA,kB;AACA,G;AACA,E;AACA,8B;;AAEA,wC;AACA,6B;AACA,W;AACA,G;;AAEA,0B;AACA,0B;AACA,gB;AACA,iB;AACA,mB;AACA,kB;AACA,e;AACA,uB;AACA,4B;AACA,K;AACA,G;AACA,E;AACA,sC;;AAEA,8B;AACA,8B;AACA,gB;AACA,iB;AACA,mB;AACA,e;AACA,sB;AACA,K;AACA,G;AACA,E;AACA,0C;;AAEA,+B;AACA,+B;AACA,gB;AACA,iB;AACA,mB;AACA,e;AACA,sB;AACA,K;AACA,G;AACA,E;AACA,2C;;AAEA,8C;AACA,8E;AACA,0C;AACA,C;AACA,uE;AACA,wD;;;;;;;;;;;;;;;;;;;ACvEA,iC;AACA,gB;AACA,oD;AACA,8C;AACA,2D;AACA,6D;;AAEA,mB;AACA,gE;AACA,4H;AACA,gB;AACA,G;;AAEA,O;;AAEA,+C;AACA,e;AACA,wB;AACA,iB;AACA,oC;AACA,sC;AACA,4B;AACA,O;AACA,O;;AAEA,0B;;AAEA,gG;AACA,0I;;AAEA,gF;;AAEA,mB;AACA,sB;AACA,2G;AACA,8D;AACA,8E;AACA,gB;AACA,G;AACA,C;;AAEA,uF;AACA,yD;;AAEA,qE;AACA,qC;AACA,e;AACA,e;AACA,wC;AACA,iB;AACA,2D;AACA,sD;AACA,8C;AACA,6C;AACA,O;AACA,+B;AACA,8B;AACA,gC;AACA,+B;AACA,O;AACA,K;AACA,yE;AACA,yB;AACA,0C;AACA,K;AACA,G;AACA,c;AACA,E;AACA,gE;;AAEA,6C;AACA,iC;AACA,oC;AACA,sC;AACA,qC;AACA,uC;AACA,K;AACA,G;AACA,kB;AACA,C;AACA,uD;;;AAGA,gB;AACA,sC;AACA,qC;AACA,I;AACA,kC;AACA,+B;AACA,I;AACA,iC;AACA,wC;AACA,I;AACA,0C;AACA,8C;AACA,gC;AACA,K;AACA,G;AACA,G;;;;;;;;;;;;;;;;;;;AClGA,6B;AACA,uC;AACA,oC;;AAEA,gC;AACA,yD;AACA,C;AACA,gD;AACA,kB;AACA,ie;AACA,gD;;;;;;;;;;;;;;;;;;;ACVA,6B;AACA,uC;AACA,oC;;AAEA,gC;AACA,yD;AACA,C;AACA,+C;AACA,kC;AACA,C;;AAEA,0D;AACA,6C;AACA,C;;AAEA,+Q","file":"/packages/telescope_embedly.js","sourcesContent":["TAPi18n.packages[\"telescope:embedly\"] = {\"translation_function_name\":\"__\",\"helper_name\":\"_\",\"namespace\":\"project\"};\n\n// define package's translation function (proxy to the i18next)\n__ = TAPi18n._getPackageI18nextProxy(\"project\");\n","var thumbnailProperty = {\n  fieldName: 'thumbnailUrl',\n  fieldSchema: {\n    type: String,\n    optional: true,\n    editableBy: [\"member\", \"admin\"],\n    autoform: {\n      type: 'bootstrap-postthumbnail'\n    }\n  }\n};\nPosts.addField(thumbnailProperty);\n\nvar mediaProperty = {\n  fieldName: 'media',\n  fieldSchema: {\n    type: Object,\n    optional: true,\n    blackbox: true\n  }\n};\nPosts.addField(mediaProperty);\n\nTelescope.modules.add(\"postThumbnail\", {\n  template: 'post_thumbnail',\n  order: 15\n});\n\nvar embedlyKeyProperty = {\n  fieldName: 'embedlyKey',\n  fieldSchema: {\n    type: String,\n    optional: true,\n    private: true,\n    autoform: {\n      group: 'embedly',\n      class: 'private-field'\n    }\n  }\n};\nSettings.addField(embedlyKeyProperty);\n\nvar thumbnailWidthProperty = {\n  fieldName: 'thumbnailWidth',\n  fieldSchema: {\n    type: Number,\n    optional: true,\n    autoform: {\n      group: 'embedly'\n    }\n  }\n};\nSettings.addField(thumbnailWidthProperty);\n\nvar thumbnailHeightProperty = {\n  fieldName: 'thumbnailHeight',\n  fieldSchema: {\n    type: Number,\n    optional: true,\n    autoform: {\n      group: 'embedly'\n    }\n  }\n};\nSettings.addField(thumbnailHeightProperty);\n\nfunction addThumbnailClass (post, postClass) {\n  var thumbnailClass = !!post.thumbnailUrl ? \"has-thumbnail\" : \"no-thumbnail\";\n  return postClass + \" \" + thumbnailClass;\n}\n// add callback that adds \"has-thumbnail\" or \"no-thumbnail\" CSS classes\nTelescope.callbacks.add(\"postClass\", addThumbnailClass);\n","getEmbedlyData = function (url) {\n  var data = {};\n  var extractBase = 'http://api.embed.ly/1/extract';\n  var embedlyKey = Settings.get('embedlyKey');\n  var thumbnailWidth = Settings.get('thumbnailWidth', 200);\n  var thumbnailHeight = Settings.get('thumbnailHeight', 125);\n\n  if(!embedlyKey) {\n    // fail silently to still let the post be submitted as usual\n    console.log(\"Couldn't find an Embedly API key! Please add it to your Telescope settings or remove the Embedly module.\");\n    return null;\n  }\n\n  try {\n\n    var result = Meteor.http.get(extractBase, {\n      params: {\n        key: embedlyKey,\n        url: url,\n        image_width: thumbnailWidth,\n        image_height: thumbnailHeight,\n        image_method: 'crop'\n      }\n    });\n\n    // console.log(result)\n\n    if (!!result.data.images && !!result.data.images.length) // there may not always be an image\n      result.data.thumbnailUrl = result.data.images[0].url.replace(\"http:\", \"\"); // add thumbnailUrl as its own property and remove \"http\"\n\n    return _.pick(result.data, 'title', 'media', 'description', 'thumbnailUrl');\n\n  } catch (error) {\n    console.log(error)\n    // the first 13 characters of the Embedly errors are \"failed [400] \", so remove them and parse the rest\n    var errorObject = JSON.parse(error.message.substring(13));\n    throw new Meteor.Error(errorObject.error_code, errorObject.error_message);\n    return null;\n  }\n}\n\n// For security reason, we use a separate server-side API call to set the media object,\n// and the thumbnail object if it hasn't already been set\n\n// Async variant that directly modifies the post object with update()\nfunction addMediaAfterSubmit (post) {\n  var set = {};\n  if(post.url){\n    var data = getEmbedlyData(post.url);\n    if (!!data) {\n      // only add a thumbnailUrl if there isn't one already\n      if (!post.thumbnailUrl && !!data.thumbnailUrl) {\n        post.thumbnailUrl = data.thumbnailUrl;\n        set.thumbnailUrl = data.thumbnailUrl;\n      }\n      // add media if necessary\n      if (!!data.media.html) {\n        post.media = data.media;\n        set.media = data.media;\n      }\n    }\n    // make sure set object is not empty (Embedly call could have failed)\n    if(!_.isEmpty(set)) {\n      Posts.update(post._id, {$set: set});\n    }\n  }\n  return post;\n};\nTelescope.callbacks.add(\"postSubmitAsync\", addMediaAfterSubmit);\n\nfunction updateMediaOnEdit (modifier, post) {\n  var newUrl = modifier.$set.url;\n  if(newUrl && newUrl !== post.url){\n    var data = getEmbedlyData(newUrl);\n    if(!!data && !!data.media.html) {\n      modifier.$set.media = data.media;\n    }\n  }\n  return modifier;\n}\nTelescope.callbacks.add(\"postEdit\", updateMediaOnEdit);\n\n\nMeteor.methods({\n  testGetEmbedlyData: function (url) {\n    console.log(getEmbedlyData(url));\n  },\n  getEmbedlyData: function (url) {\n    return getEmbedlyData(url);\n  },\n  embedlyKeyExists: function () {\n    return !!Settings.get('embedlyKey');\n  },\n  regenerateEmbedlyData: function (post) {\n    if (Users.can.edit(Meteor.user(), post)) {\n      addMediaAfterSubmit(post);\n    }\n  }\n});\n","var _ = Package.underscore._,\n    package_name = \"telescope:embedly\",\n    namespace = \"telescope:embedly\";\n\nif (package_name != \"project\") {\n    namespace = TAPi18n.packages[package_name].namespace;\n}\n// integrate the fallback language translations \ntranslations = {};\ntranslations[namespace] = {\"thumbnail\":\"Thumbnail\",\"thumbnailUrl\":\"Thumbnail\",\"regenerate_thumbnail\":\"Regenerate Thumbnail\",\"clear_thumbnail\":\"Clear Thumbnail\",\"please_fill_in_embedly_key\":\"Please fill in your Embedly API key to enable thumbnails.\",\"please_ask_your_admin_to_fill_in_embedly_key\":\"Please ask your site admin to fill in an Embedly API key to enable thumbnails.\",\"embedlyKey\":\"Embedly API Key\",\"thumbnailWidth\":\"Thumbnail Width\",\"thumbnailHeight\":\"Thumbnail Height\"};\nTAPi18n._loadLangFileObject(\"en\", translations);\n","var _ = Package.underscore._,\n    package_name = \"telescope:embedly\",\n    namespace = \"telescope:embedly\";\n\nif (package_name != \"project\") {\n    namespace = TAPi18n.packages[package_name].namespace;\n}\nif(_.isUndefined(TAPi18n.translations[\"fr\"])) {\n  TAPi18n.translations[\"fr\"] = {};\n}\n\nif(_.isUndefined(TAPi18n.translations[\"fr\"][namespace])) {\n  TAPi18n.translations[\"fr\"][namespace] = {};\n}\n\n_.extend(TAPi18n.translations[\"fr\"][namespace], {\"thumbnail\":\"Aperçu\",\"thumbnailUrl\":\"Aperçu\",\"regenerate_thumbnail\":\"Regenerer l'aperçu\",\"clear_thumbnail\":\"Effacer l'aperçu\",\"please_fill_in_embedly_key\":\"Veuillez fournir une clé API Embedly pour activer les aperçus.\"});\n"]}