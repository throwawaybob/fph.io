{"version":3,"sources":["telescope:posts/lib/namespace.js","telescope:posts/lib/config.js","telescope:posts/lib/posts.js","telescope:posts/lib/parameters.js","telescope:posts/lib/views.js","telescope:posts/lib/helpers.js","telescope:posts/lib/modules.js","telescope:posts/lib/callbacks.js","telescope:posts/lib/methods.js","telescope:posts/lib/menus.js","telescope:posts/lib/routes.js","telescope:posts/lib/server/publications.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,G;AACA,6C;AACA,mB;AACA,G;AACA,sC;;;;;;;;;;;;;;;;;;;ACJA,G;AACA,yB;AACA,iB;AACA,G;AACA,kB;;;AAGA,G;AACA,gB;AACA,G;AACA,6B;AACA,G;AACA,a;AACA,gD;AACA,I;AACA,G;AACA,a;AACA,iD;AACA,I;AACA,G;AACA,a;AACA,iD;AACA,G;AACA,E;;AAEA,gC;AACA,iC;AACA,iC;;;;;;;;;;;;;;;;;;AC3BA,G;AACA,e;AACA,uB;AACA,G;AACA,iC;AACA,K;AACA,M;AACA,I;AACA,Q;AACA,iB;AACA,kB;AACA,I;AACA,K;AACA,+B;AACA,I;AACA,c;AACA,e;AACA,kB;AACA,I;AACA,K;AACA,uE;AACA,I;AACA,a;AACA,e;AACA,mB;AACA,0B;AACA,e;AACA,qB;AACA,sC;AACA,K;AACA,I;AACA,K;AACA,O;AACA,I;AACA,Q;AACA,iB;AACA,mB;AACA,oC;AACA,e;AACA,2B;AACA,K;AACA,I;AACA,K;AACA,S;AACA,I;AACA,U;AACA,iB;AACA,oB;AACA,mC;AACA,I;AACA,K;AACA,wB;AACA,I;AACA,S;AACA,iB;AACA,mB;AACA,oC;AACA,e;AACA,a;AACA,K;AACA,I;AACA,K;AACA,iC;AACA,I;AACA,a;AACA,iB;AACA,kB;AACA,I;AACA,K;AACA,sD;AACA,I;AACA,c;AACA,iB;AACA,kB;AACA,I;AACA,K;AACA,gC;AACA,I;AACA,iB;AACA,iB;AACA,kB;AACA,I;AACA,K;AACA,gD;AACA,I;AACA,e;AACA,mB;AACA,kB;AACA,I;AACA,K;AACA,iC;AACA,I;AACA,oB;AACA,e;AACA,kB;AACA,I;AACA,K;AACA,uD;AACA,I;AACA,e;AACA,iB;AACA,kB;AACA,I;AACA,K;AACA,2D;AACA,I;AACA,c;AACA,iB;AACA,kB;AACA,kB;AACA,I;AACA,K;AACA,0C;AACA,I;AACA,Y;AACA,iB;AACA,kB;AACA,I;AACA,K;AACA,yD;AACA,I;AACA,a;AACA,mB;AACA,kB;AACA,I;AACA,K;AACA,4C;AACA,I;AACA,c;AACA,iB;AACA,kB;AACA,I;AACA,K;AACA,2D;AACA,I;AACA,e;AACA,mB;AACA,kB;AACA,I;AACA,K;AACA,+C;AACA,I;AACA,U;AACA,iB;AACA,kB;AACA,kB;AACA,I;AACA,K;AACA,6E;AACA,I;AACA,W;AACA,iB;AACA,mB;AACA,0B;AACA,4B;AACA,qC;AACA,uC;AACA,kE;AACA,mD;AACA,uC;AACA,4C;AACA,M;AACA,e;AACA,qB;AACA,yC;AACA,oB;AACA,K;AACA,I;AACA,K;AACA,iE;AACA,I;AACA,W;AACA,kB;AACA,mB;AACA,wB;AACA,0B;AACA,e;AACA,qB;AACA,yB;AACA,K;AACA,I;AACA,K;AACA,wF;AACA,I;AACA,a;AACA,kB;AACA,kB;AACA,I;AACA,K;AACA,0B;AACA,I;AACA,W;AACA,iB;AACA,kB;AACA,I;AACA,K;AACA,6B;AACA,I;AACA,W;AACA,iB;AACA,mB;AACA,0B;AACA,e;AACA,qB;AACA,4B;AACA,wD;AACA,kB;AACA,4B;AACA,6C;AACA,Y;AACA,W;AACA,O;AACA,K;AACA,G;AACA,G;;AAEA,oB;AACA,gC;;AAEA,G;AACA,oC;AACA,G;AACA,iC;;AAEA,a;AACA,iD;AACA,gD;AACA,G;;AAEA,sD;AACA,sD;AACA,sD;AACA,sD;;AAEA,G;AACA,kD;AACA,G;AACA,4C;AACA,gB;AACA,8D;AACA,G;;AAEA,G;AACA,6D;AACA,G;AACA,kE;AACA,mD;AACA,+D;AACA,kF;AACA,G;AACA,G;;;;;;;;;;;;;;;;;;;AC1PA,G;AACA,kD;AACA,6D;AACA,wB;AACA,G;AACA,uC;;AAEA,qB;;AAEA,uB;;AAEA,kG;AACA,8C;;AAEA,+F;AACA,oF;;AAEA,6C;AACA,4E;;AAEA,mD;AACA,+C;AACA,wF;;AAEA,mD;AACA,6E;;AAEA,wF;AACA,yC;AACA,iE;;AAEA,mG;AACA,yG;AACA,wC;AACA,G;;AAEA,kG;AACA,0D;AACA,kD;;AAEA,mD;AACA,6E;AACA,yB;AACA,oE;AACA,qD;AACA,G;AACA,E;AACA,6B;;AAEA,oB;AACA,E;;;;;;;;;;;;;;;;;;;AClDA,G;AACA,mE;AACA,yB;AACA,G;AACA,iB;;AAEA,G;AACA,kB;AACA,kD;AACA,0H;AACA,G;AACA,qD;AACA,uC;AACA,E;;AAEA,G;AACA,mG;AACA,G;AACA,8B;AACA,S;AACA,wC;AACA,I;AACA,Y;AACA,a;AACA,G;AACA,E;;AAEA,G;AACA,W;AACA,G;AACA,yC;AACA,U;AACA,4C;AACA,I;AACA,G;;AAEA,G;AACA,W;AACA,G;AACA,yC;AACA,U;AACA,+C;AACA,I;AACA,G;;AAEA,G;AACA,Y;AACA,G;AACA,0C;AACA,U;AACA,gD;AACA,I;AACA,G;;AAEA,G;AACA,e;AACA,G;AACA,6C;AACA,U;AACA,W;AACA,e;AACA,M;AACA,qC;AACA,oB;AACA,I;AACA,G;;AAEA,G;AACA,iB;AACA,G;AACA,+C;AACA,U;AACA,yC;AACA,mC;AACA,I;AACA,G;;AAEA,G;AACA,kB;AACA,G;AACA,+C;AACA,U;AACA,iC;AACA,6C;AACA,I;AACA,G;;AAEA,G;AACA,0B;AACA,G;AACA,sD;AACA,gD;AACA,gE;AACA,U;AACA,mF;AACA,6C;AACA,I;AACA,G;;AAEA,G;AACA,4B;AACA,G;AACA,wD;AACA,gD;AACA,kE;AACA,wE;AACA,U;AACA,iC;AACA,6C;AACA,I;AACA,G;;;;;;;;;;;;;;;;;;AC9GA,kB;AACA,kB;AACA,kB;;AAEA,G;AACA,+B;AACA,uB;AACA,G;AACA,uC;AACA,qD;AACA,W;AACA,sD;AACA,oD;AACA,2D;AACA,oC;AACA,oC;AACA,qF;AACA,I;;AAEA,c;AACA,qB;;AAEA,mB;AACA,+B;;AAEA,W;AACA,E;;AAEA,G;AACA,oC;AACA,uB;AACA,G;AACA,0C;AACA,kF;AACA,uE;AACA,8D;AACA,uC;AACA,U;AACA,W;AACA,sC;AACA,G;AACA,E;;AAEA,G;AACA,0B;AACA,uB;AACA,G;AACA,kC;AACA,wD;AACA,E;;AAEA,G;AACA,0B;AACA,qB;AACA,G;AACA,gC;AACA,0D;AACA,E;;AAEA,G;AACA,oE;AACA,uB;AACA,G;AACA,iC;AACA,6E;AACA,E;;AAEA,G;AACA,sC;AACA,0E;AACA,sB;AACA,8B;AACA,G;AACA,qD;;AAEA,mF;AACA,6D;AACA,mF;;AAEA,8C;AACA,+D;;AAEA,oF;AACA,kI;AACA,G;AACA,E;;AAEA,G;AACA,+C;AACA,G;AACA,6B;AACA,oD;AACA,E;;AAEA,sC;AACA,qE;AACA,E;;;;;;;;;;;;;;;;;;;;AC/FA,uC;AACA,8B;AACA,W;AACA,G;;AAEA,yC;AACA,G;AACA,0B;AACA,Y;AACA,I;AACA,G;AACA,4B;AACA,a;AACA,I;AACA,G;AACA,6B;AACA,a;AACA,I;AACA,G;AACA,6B;AACA,a;AACA,I;AACA,G;AACA,6B;AACA,a;AACA,I;AACA,G;AACA,6B;AACA,a;AACA,G;AACA,G;;AAEA,sC;AACA,G;AACA,2B;AACA,a;AACA,I;AACA,G;AACA,4B;AACA,a;AACA,G;AACA,G;;AAEA,mC;AACA,G;AACA,4B;AACA,a;AACA,I;AACA,G;AACA,0B;AACA,a;AACA,I;AACA,G;AACA,mC;AACA,a;AACA,I;AACA,G;AACA,2B;AACA,a;AACA,G;AACA,G;;;;;;;;;;;;;;;;;;;AC7DA,G;AACA,sD;AACA,G;AACA,2C;AACA,2B;AACA,gD;;AAEA,yE;AACA,gD;AACA,c;AACA,C;AACA,sE;;;;;;;;;;;;;;;;;;;ACXA,G;AACA,E;AACA,e;AACA,E;AACA,G;;AAEA,G;AACA,iF;AACA,iD;AACA,uE;AACA,gD;AACA,G;AACA,gC;;AAEA,kE;AACA,mC;;AAEA,4E;;AAEA,oC;AACA,iB;AACA,kE;;AAEA,oD;AACA,gB;AACA,0C;;AAEA,gF;;AAEA,2B;AACA,0B;AACA,6C;AACA,e;AACA,iB;AACA,oB;AACA,kB;AACA,iB;AACA,iB;AACA,a;AACA,oB;AACA,kB;AACA,oC;AACA,I;;AAEA,2C;;AAEA,iF;AACA,0E;AACA,qE;AACA,+B;;AAEA,wB;AACA,mD;;AAEA,+E;;AAEA,qE;AACA,qD;;AAEA,+E;;AAEA,gC;;AAEA,+E;;AAEA,wD;;AAEA,c;AACA,E;;AAEA,G;AACA,8B;AACA,2D;AACA,iD;AACA,iD;AACA,G;AACA,gD;;AAEA,oC;AACA,iC;AACA,G;;;AAGA,+E;;AAEA,gE;AACA,iE;;AAEA,4E;;AAEA,iC;;AAEA,+E;;AAEA,uE;;AAEA,kF;AACA,+B;AACA,E;;AAEA,iG;AACA,iG;AACA,iG;;AAEA,mB;;AAEA,gB;;AAEA,K;AACA,wD;AACA,oB;AACA,mD;AACA,K;AACA,6B;;AAEA,2B;AACA,Y;;AAEA,0B;AACA,U;AACA,W;AACA,iB;AACA,mB;;AAEA,oF;AACA,6B;AACA,8C;AACA,8C;;AAEA,8E;;AAEA,+B;AACA,uC;AACA,iG;;AAEA,8E;;AAEA,wB;;AAEA,+D;AACA,mF;AACA,4E;AACA,oF;;AAEA,gE;AACA,0C;AACA,mI;;AAEA,mE;AACA,yD;AACA,4H;;AAEA,K;;AAEA,kF;;AAEA,4B;AACA,a;AACA,e;AACA,a;AACA,gC;;AAEA,wE;AACA,+C;;AAEA,oC;AACA,gD;AACA,iH;AACA,O;;AAEA,O;;AAEA,iD;AACA,uB;AACA,iD;AACA,K;;AAEA,4D;AACA,uB;AACA,6B;AACA,K;;AAEA,8B;AACA,I;;AAEA,K;AACA,qD;AACA,oB;AACA,mD;AACA,8D;AACA,K;AACA,yC;;AAEA,6B;AACA,qC;AACA,8C;;AAEA,8E;;AAEA,wC;AACA,+C;AACA,6E;AACA,K;;AAEA,iE;AACA,oD;AACA,2C;AACA,kD;AACA,sD;;AAEA,sC;AACA,sD;AACA,mH;AACA,S;;AAEA,S;AACA,O;;AAEA,8C;;AAEA,I;;AAEA,8C;;AAEA,kE;;AAEA,qI;AACA,gC;;AAEA,yD;AACA,I;;AAEA,8B;AACA,sC;AACA,4B;;AAEA,+F;AACA,yB;AACA,kC;;AAEA,6D;;AAEA,8D;;AAEA,U;AACA,qE;AACA,K;AACA,I;;AAEA,gC;AACA,sC;AACA,kD;AACA,U;AACA,qE;AACA,K;AACA,I;;AAEA,iD;AACA,mB;;AAEA,sE;AACA,wE;;AAEA,8C;AACA,2B;AACA,sD;AACA,K;AACA,I;;AAEA,oC;AACA,2B;AACA,+B;AACA,yC;AACA,Q;AACA,8C;;AAEA,4C;;AAEA,mJ;;AAEA,2B;AACA,0E;;AAEA,kB;AACA,yB;AACA,G;;AAEA,G;;;;;;;;;;;;;;;;;;;AC/RA,2C;AACA,sC;AACA,G;AACA,uB;AACA,iB;AACA,qC;AACA,I;AACA,G;AACA,uB;AACA,iB;AACA,+B;AACA,I;AACA,G;AACA,wB;AACA,kB;AACA,4C;AACA,I;AACA,G;AACA,2B;AACA,qB;AACA,6C;AACA,mB;AACA,I;AACA,G;AACA,6B;AACA,uB;AACA,0C;AACA,mB;AACA,I;AACA,G;;;;;;;;;;;;;;;;;;AC7BA,G;AACA,kC;AACA,+B;AACA,G;AACA,uB;;AAEA,G;AACA,iC;AACA,G;AACA,iD;;AAEA,oC;;AAEA,+B;AACA,6F;;AAEA,uB;AACA,0D;AACA,K;AACA,gB;AACA,I;;AAEA,qB;;AAEA,iB;AACA,sB;AACA,kE;AACA,M;;AAEA,uD;;AAEA,kH;AACA,Y;AACA,kB;AACA,M;AACA,I;;AAEA,yB;AACA,6B;AACA,I;;AAEA,+B;AACA,uG;AACA,yC;AACA,Y;AACA,uG;AACA,K;AACA,I;;AAEA,kB;AACA,G;;AAEA,4C;AACA,uD;AACA,4E;AACA,yC;AACA,0C;AACA,U;AACA,iC;AACA,G;AACA,E;;AAEA,oE;AACA,4B;AACA,iE;AACA,2B;AACA,qD;AACA,4C;AACA,mE;AACA,uB;AACA,K;AACA,K;;AAEA,G;;AAEA,G;AACA,0B;AACA,G;AACA,uD;AACA,a;AACA,G;;AAEA,G;AACA,0B;AACA,G;AACA,uD;AACA,a;AACA,G;;AAEA,G;AACA,2B;AACA,G;AACA,wD;AACA,c;AACA,G;;AAEA,G;AACA,8B;AACA,G;AACA,2D;AACA,iB;AACA,G;;AAEA,G;AACA,gC;AACA,G;AACA,6D;AACA,mB;AACA,G;;AAEA,G;AACA,kC;AACA,G;AACA,iD;;AAEA,wB;;AAEA,sB;AACA,uF;AACA,2F;AACA,4H;AACA,I;;AAEA,oB;AACA,0C;AACA,I;;AAEA,yB;AACA,sB;AACA,+B;AACA,I;;AAEA,8B;AACA,wB;AACA,0C;AACA,iC;AACA,c;AACA,+B;AACA,O;AACA,Y;AACA,kB;AACA,K;AACA,I;;AAEA,qB;AACA,4I;AACA,iE;AACA,gB;AACA,I;;AAEA,oB;AACA,uB;AACA,I;AACA,kB;AACA,G;;AAEA,4B;;AAEA,qB;AACA,0B;AACA,yC;AACA,K;;AAEA,gC;AACA,sB;AACA,qC;AACA,K;;AAEA,Q;;AAEA,gC;AACA,sB;AACA,qC;AACA,K;;AAEA,S;;AAEA,iC;AACA,uB;AACA,sC;AACA,K;;AAEA,Y;;AAEA,oC;AACA,0B;AACA,yC;AACA,K;;AAEA,c;;AAEA,sC;AACA,4B;AACA,2C;AACA,K;;AAEA,c;;AAEA,+B;AACA,sB;AACA,sC;AACA,K;;AAEA,kD;AACA,8B;AACA,uC;AACA,gC;AACA,yC;AACA,K;AACA,K;;AAEA,c;;AAEA,oC;AACA,sB;AACA,0B;AACA,yB;AACA,c;AACA,mE;AACA,oD;AACA,Q;AACA,M;AACA,sB;AACA,c;AACA,gC;AACA,4C;AACA,Q;AACA,M;AACA,oB;AACA,K;;AAEA,gB;;AAEA,2B;AACA,wB;AACA,4B;AACA,yB;AACA,0D;AACA,K;AACA,K;;AAEA,G;;;;;;;;;;;;;;;;;;;ACjPA,iD;;AAEA,0B;;AAEA,6C;AACA,sC;AACA,+C;AACA,gE;;AAEA,iB;AACA,G;AACA,Y;AACA,G;;AAEA,+E;AACA,oC;;AAEA,kD;AACA,sC;AACA,+C;AACA,gE;AACA,mD;;AAEA,yE;AACA,mC;AACA,2D;AACA,O;;AAEA,gC;;AAEA,0G;AACA,G;AACA,Y;AACA,G;;AAEA,wB;;AAEA,2C;AACA,uC;AACA,0B;AACA,G;AACA,Y;AACA,G;;AAEA,wF;;AAEA,8C;AACA,uC;AACA,8C;AACA,qC;AACA,mB;;AAEA,e;;AAEA,0D;;AAEA,gD;AACA,+D;AACA,4B;AACA,0D;AACA,O;;AAEA,yB;AACA,kD;AACA,4C;AACA,O;;AAEA,2B;AACA,sD;AACA,8C;AACA,O;;AAEA,K;;AAEA,+B;AACA,4B;;AAEA,2F;AACA,G;AACA,Y;AACA,G","file":"/packages/telescope_posts.js","sourcesContent":["/**\n * The global namespace/collection for Posts.\n * @namespace Posts\n */\nPosts = new Mongo.Collection(\"posts\");\n","/**\n * Posts config namespace\n * @type {Object}\n */\nPosts.config = {};\n\n\n/**\n * Post Statuses\n */\nPosts.config.postStatuses = [\n  {\n    value: 1,\n    label: function(){return i18n.t('pending');}\n  },\n  {\n    value: 2,\n    label: function(){return i18n.t('approved');}\n  },\n  {\n    value: 3,\n    label: function(){return i18n.t('rejected');}\n  }\n];\n\nPosts.config.STATUS_PENDING = 1;\nPosts.config.STATUS_APPROVED = 2;\nPosts.config.STATUS_REJECTED = 3;","/**\n * Posts schema\n * @type {SimpleSchema}\n */\nPosts.schema = new SimpleSchema({\n  /**\n    ID\n  */\n  _id: {\n    type: String,\n    optional: true\n  },\n  /**\n    Timetstamp of post creation\n  */\n  createdAt: {\n    type: Date,\n    optional: true\n  },\n  /**\n    Timestamp of post first appearing on the site (i.e. being approved)\n  */\n  postedAt: {\n    type: Date,\n    optional: true,\n    editableBy: [\"admin\"],\n    autoform: {\n      group: 'admin',\n      type: \"bootstrap-datetimepicker\"\n    }\n  },\n  /**\n    URL\n  */\n  url: {\n    type: String,\n    optional: true,\n    editableBy: [\"member\", \"admin\"],\n    autoform: {\n      type: \"bootstrap-url\"\n    }\n  },\n  /**\n    Title\n  */\n  title: {\n    type: String,\n    optional: false,\n    editableBy: [\"member\", \"admin\"]\n  },\n  /**\n    Post body (markdown)\n  */\n  body: {\n    type: String,\n    optional: true,\n    editableBy: [\"member\", \"admin\"],\n    autoform: {\n      rows: 5\n    }\n  },\n  /**\n    HTML version of the post body\n  */\n  htmlBody: {\n    type: String,\n    optional: true\n  },\n  /**\n    Count of how many times the post's page was viewed\n  */\n  viewCount: {\n    type: Number,\n    optional: true\n  },\n  /**\n    Count of the post's comments\n  */\n  commentCount: {\n    type: Number,\n    optional: true\n  },\n  /**\n    An array containing the `_id`s of commenters\n  */\n  commenters: {\n    type: [String],\n    optional: true\n  },\n  /**\n    Timestamp of the last comment\n  */\n  lastCommentedAt: {\n    type: Date,\n    optional: true\n  },\n  /**\n    Count of how many times the post's link was clicked\n  */\n  clickCount: {\n    type: Number,\n    optional: true\n  },\n  /**\n    The post's base score (not factoring in the post's age)\n  */\n  baseScore: {\n    type: Number,\n    decimal: true,\n    optional: true\n  },\n  /**\n    How many upvotes the post has received\n  */\n  upvotes: {\n    type: Number,\n    optional: true\n  },\n  /**\n    An array containing the `_id`s of the post's upvoters\n  */\n  upvoters: {\n    type: [String],\n    optional: true\n  },\n  /**\n    How many downvotes the post has received\n  */\n  downvotes: {\n    type: Number,\n    optional: true\n  },\n  /**\n    An array containing the `_id`s of the post's downvoters\n  */\n  downvoters: {\n    type: [String],\n    optional: true\n  },\n  /**\n    The post's current score (factoring in age)\n  */\n  score: {\n    type: Number,\n    decimal: true,\n    optional: true\n  },\n  /**\n    The post's status. One of pending (`1`), approved (`2`), or deleted (`3`)\n  */\n  status: {\n    type: Number,\n    optional: true,\n    editableBy: [\"admin\"],\n    autoValue: function () {\n      // only provide a default value\n      // 1) this is an insert operation\n      // 2) status field is not set in the document being inserted\n      var user = Meteor.users.findOne(this.userId);\n      if (this.isInsert && !this.isSet)\n        return Posts.getDefaultStatus(user);\n    },\n    autoform: {\n      noselect: true,\n      options: Posts.config.postStatuses,\n      group: 'admin'\n    }\n  },\n  /**\n    Whether the post is sticky (pinned to the top of posts lists)\n  */\n  sticky: {\n    type: Boolean,\n    optional: true,\n    defaultValue: false,\n    editableBy: [\"admin\"],\n    autoform: {\n      group: 'admin',\n      leftLabel: \"Sticky\"\n    }\n  },\n  /**\n    Whether the post is inactive. Inactive posts see their score recalculated less often\n  */\n  inactive: {\n    type: Boolean,\n    optional: true\n  },\n  /**\n    The post author's name\n  */\n  author: {\n    type: String,\n    optional: true\n  },\n  /**\n    The post author's `_id`. \n  */\n  userId: {\n    type: String,\n    optional: true,\n    editableBy: [\"admin\"],\n    autoform: {\n      group: 'admin',\n      options: function () {\n        return Meteor.users.find().map(function (user) {\n          return {\n            value: user._id,\n            label: Users.getDisplayName(user)\n          };\n        });\n      }\n    }\n  }\n});\n\n// schema transforms\nPosts.schema.internationalize();\n\n/**\n * Attach schema to Posts collection\n */\nPosts.attachSchema(Posts.schema);\n\nPosts.allow({\n  update: _.partial(Telescope.allowCheck, Posts),\n  remove: _.partial(Telescope.allowCheck, Posts)\n});\n\n//////////////////////////////////////////////////////\n// Collection Hooks                                 //\n// https://atmospherejs.com/matb33/collection-hooks //\n//////////////////////////////////////////////////////\n\n/**\n * Generate HTML body from Markdown on post insert\n */\nPosts.before.insert(function (userId, doc) {\n  if(!!doc.body)\n    doc.htmlBody = Telescope.utils.sanitize(marked(doc.body));\n});\n\n/**\n * Generate HTML body from Markdown when post body is updated\n */\nPosts.before.update(function (userId, doc, fieldNames, modifier) {\n  // if body is being modified, update htmlBody too\n  if (Meteor.isServer && modifier.$set && modifier.$set.body) {\n    modifier.$set.htmlBody = Telescope.utils.sanitize(marked(modifier.$set.body));\n  }\n});\n","/**\n * Gives an object containing the appropriate find\n * and options arguments for the subscriptions's Posts.find()\n * @param {Object} terms\n */\nPosts.getSubParams = function (terms) {\n\n  var maxLimit = 200;\n\n  // console.log(terms)\n\n  // note: using jquery's extend() with \"deep\" parameter set to true instead of shallow _.extend()\n  // see: http://api.jquery.com/jQuery.extend/\n\n  // initialize parameters by extending baseParameters object, to avoid passing it by reference\n  var parameters = Telescope.utils.deepExtend(true, {}, Posts.views.baseParameters);\n\n  // if view is not defined, default to \"top\"\n  var view = !!terms.view ? Telescope.utils.dashToCamel(terms.view) : 'top';\n\n  // get query parameters according to current view\n  if (typeof Posts.views[view] !== 'undefined')\n    parameters = Telescope.utils.deepExtend(true, parameters, Posts.views[view](terms));\n\n  // extend sort to sort posts by _id to break ties\n  Telescope.utils.deepExtend(true, parameters, {options: {sort: {_id: -1}}});\n\n  // if a limit was provided with the terms, add it too (note: limit=0 means \"no limit\")\n  if (typeof terms.limit !== 'undefined')\n    _.extend(parameters.options, {limit: parseInt(terms.limit)});\n\n  // limit to \"maxLimit\" posts at most when limit is undefined, equal to 0, or superior to maxLimit\n  if(!parameters.options.limit || parameters.options.limit == 0 || parameters.options.limit > maxLimit) {\n    parameters.options.limit = maxLimit;\n  }\n\n  // hide future scheduled posts unless \"showFuture\" is set to true or postedAt is already defined\n  if (!parameters.showFuture && !parameters.find.postedAt)\n    parameters.find.postedAt = {$lte: new Date()};\n\n  // filter by category if category _id is provided\n  // NOTE: this is a temporary fix because views cannot currently be combined\n  if (!!terms.category) {\n    var categoryId = Categories.findOne({slug: terms.category})._id;\n    parameters.find.categories = {$in: [categoryId]};\n  }\n  \n  // console.log(parameters);\n\n  return parameters;\n};\n","/**\n * Post views are filters used for subscribing to and viewing posts\n * @namespace Posts.views\n */\nPosts.views = {};\n\n/**\n * Add a post view\n * @param {string} viewName - The name of the view\n * @param {function} [viewFunction] - The function used to calculate query terms. Takes terms and baseParameters arguments\n */\nPosts.views.add = function (viewName, viewFunction) {\n  Posts.views[viewName] = viewFunction;\n};\n\n/**\n * Base parameters that will be common to all other view unless specific properties are overwritten\n */\nPosts.views.baseParameters = {\n  find: {\n    status: Posts.config.STATUS_APPROVED\n  },\n  options: {\n    limit: 10\n  }\n};\n\n/**\n * Top view\n */\nPosts.views.add(\"top\", function (terms) {\n  return {\n    options: {sort: {sticky: -1, score: -1}}\n  };\n});\n\n/**\n * New view\n */\nPosts.views.add(\"new\", function (terms) {\n  return {\n    options: {sort: {sticky: -1, postedAt: -1}}\n  };\n});\n\n/**\n * Best view\n */\nPosts.views.add(\"best\", function (terms) {\n  return {\n    options: {sort: {sticky: -1, baseScore: -1}}\n  };\n});\n\n/**\n * Pending view\n */\nPosts.views.add(\"pending\", function (terms) {\n  return {\n    find: {\n      status: 1\n    },\n    options: {sort: {createdAt: -1}},\n    showFuture: true\n  };\n});\n\n/**\n * Scheduled view\n */\nPosts.views.add(\"scheduled\", function (terms) {\n  return {\n    find: {postedAt: {$gte: new Date()}},\n    options: {sort: {postedAt: -1}}\n  };\n});\n\n/**\n * User posts view\n */\nPosts.views.add(\"userPosts\", function (terms) {\n  return {\n    find: {userId: terms.userId},\n    options: {limit: 5, sort: {postedAt: -1}}\n  };\n});\n\n/**\n * User upvoted posts view\n */\nPosts.views.add(\"userUpvotedPosts\", function (terms) {\n  var user = Meteor.users.findOne(terms.userId);\n  var postsIds = _.pluck(user.telescope.upvotedPosts, \"itemId\");\n  return {\n    find: {_id: {$in: postsIds}, userId: {$ne: terms.userId}}, // exclude own posts\n    options: {limit: 5, sort: {postedAt: -1}}\n  };\n});\n\n/**\n * User downvoted posts view\n */\nPosts.views.add(\"userDownvotedPosts\", function (terms) {\n  var user = Meteor.users.findOne(terms.userId);\n  var postsIds = _.pluck(user.telescope.downvotedPosts, \"itemId\");\n  // TODO: sort based on votedAt timestamp and not postedAt, if possible\n  return {\n    find: {_id: {$in: postsIds}},\n    options: {limit: 5, sort: {postedAt: -1}}\n  };\n});","//////////////////\n// Post Helpers //\n//////////////////\n\n/**\n * Grab common post properties.\n * @param {Object} post\n */\nPosts.getProperties = function (post) {\n  var postAuthor = Meteor.users.findOne(post.userId);\n  var p = {\n    postAuthorName : Users.getDisplayName(postAuthor),\n    postTitle : Telescope.utils.cleanUp(post.title),\n    profileUrl: Users.getProfileUrlBySlugOrId(post.userId),\n    postUrl: Posts.getPageUrl(post),\n    thumbnailUrl: post.thumbnailUrl,\n    linkUrl: !!post.url ? Posts.getOutgoingUrl(post.url) : Posts.getPageUrl(post._id)\n  };\n\n  if(post.url)\n    p.url = post.url;\n\n  if(post.htmlBody)\n    p.htmlBody = post.htmlBody;\n\n  return p;\n};\n\n/**\n * Get default status for new posts.\n * @param {Object} user\n */\nPosts.getDefaultStatus = function (user) {\n  var hasAdminRights = typeof user === 'undefined' ? false : Users.is.admin(user);\n  if (hasAdminRights || !Settings.get('requirePostsApproval', false)) {\n    // if user is admin, or else post approval is not required\n    return Posts.config.STATUS_APPROVED\n  } else {\n    // else\n    return Posts.config.STATUS_PENDING\n  }\n};\n\n/**\n * Get URL of a post page.\n * @param {Object} post\n */\nPosts.getPageUrl = function(post){\n  return Telescope.utils.getSiteUrl()+'posts/'+post._id;\n};\n\n/**\n * Get post edit page URL.\n * @param {String} id\n */\nPosts.getEditUrl = function(id){\n  return Telescope.utils.getSiteUrl()+'posts/'+id+'/edit';\n};\n\n/**\n * Return a post's link if it has one, else return its post page URL\n * @param {Object} post\n */\nPosts.getLink = function (post) {\n  return !!post.url ? Posts.getOutgoingUrl(post.url) : this.getPageUrl(post);\n};\n\n/**\n * Check to see if post URL is unique.\n * We need the current user so we know who to upvote the existing post as.\n * @param {String} url\n * @param {Object} currentUser\n */\nPosts.checkForSameUrl = function (url, currentUser) {\n\n  // check that there are no previous posts with the same link in the past 6 months\n  var sixMonthsAgo = moment().subtract(6, 'months').toDate();\n  var postWithSameLink = Posts.findOne({url: url, postedAt: {$gte: sixMonthsAgo}});\n\n  if(typeof postWithSameLink !== 'undefined'){\n    Telescope.upvoteItem(Posts, postWithSameLink, currentUser);\n\n    // note: error.details returns undefined on the client, so add post ID to reason\n    throw new Meteor.Error('603', i18n.t('this_link_has_already_been_posted') + '|' + postWithSameLink._id, postWithSameLink._id);\n  }\n};\n\n/**\n * When on a post page, return the current post\n */\nPosts.current = function () {\n  return Posts.findOne(Router.current().data()._id);\n};\n\nPosts.getOutgoingUrl = function(url) {\n  return Telescope.utils.getRouteUrl('out', {}, {query: {url: url}});\n};\n","\nTelescope.modules.add(\"postsListTop\", {\n  template: 'posts_views_nav',\n  order: 99\n});\n\nTelescope.modules.add(\"postComponents\", [\n  {\n    template: 'post_rank',\n    order: 1\n  },\n  {\n    template: 'post_upvote',\n    order: 10\n  },\n  {\n    template: 'post_content',\n    order: 20\n  },\n  {\n    template: 'post_avatars',\n    order: 30\n  },\n  {\n    template: 'post_discuss',\n    order: 40\n  },\n  {\n    template: 'post_actions',\n    order: 50\n  }\n]);\n\nTelescope.modules.add(\"postHeading\", [\n  {\n    template: 'post_title',\n    order: 10\n  },\n  {\n    template: 'post_domain',\n    order: 20\n  }\n]);\n\nTelescope.modules.add(\"postMeta\", [\n  {\n    template: 'post_author',\n    order: 10\n  },\n  {\n    template: 'post_info',\n    order: 20\n  },\n  {\n    template: 'post_comments_link',\n    order: 30\n  },\n  {\n    template: 'post_admin',\n    order: 50\n  }\n]);\n","/**\n * Increment the user's post count and upvote the post\n */\nfunction afterPostSubmitOperations (post) {\n  var userId = post.userId,\n      postAuthor = Meteor.users.findOne(userId);\n\n  Meteor.users.update({_id: userId}, {$inc: {\"telescope.postCount\": 1}});\n  Telescope.upvoteItem(Posts, post, postAuthor);\n  return post;\n}\nTelescope.callbacks.add(\"postSubmitAsync\", afterPostSubmitOperations);\n","/**\n *\n * Post Methods\n *\n */\n\n/**\n * Insert a post in the database (note: optional post properties not listed here)\n * @param {Object} post - the post being inserted\n * @param {string} post.userId - the id of the user the post belongs to\n * @param {string} post.title - the post's title\n */\nPosts.submit = function (post) {\n\n  var userId = post.userId, // at this stage, a userId is expected\n      user = Users.findOne(userId);\n\n  // ------------------------------ Checks ------------------------------ //\n\n  // check that a title was provided\n  if(!post.title)\n    throw new Meteor.Error(602, i18n.t('please_fill_in_a_title'));\n\n  // check that there are no posts with the same URL\n  if(!!post.url)\n    Posts.checkForSameUrl(post.url, user);\n\n  // ------------------------------ Properties ------------------------------ //\n\n  var defaultProperties = {\n    createdAt: new Date(),\n    author: Users.getDisplayNameById(userId),\n    upvotes: 0,\n    downvotes: 0,\n    commentCount: 0,\n    clickCount: 0,\n    viewCount: 0,\n    baseScore: 0,\n    score: 0,\n    inactive: false,\n    sticky: false,\n    status: Posts.getDefaultStatus()\n  };\n\n  post = _.extend(defaultProperties, post);\n\n  // if post is approved but doesn't have a postedAt date, give it a default date\n  // note: pending posts get their postedAt date only once theyre approved\n  if (post.status === Posts.config.STATUS_APPROVED && !post.postedAt)\n    post.postedAt = new Date();\n\n  // clean up post title\n  post.title = Telescope.utils.cleanUp(post.title);\n\n  // ------------------------------ Callbacks ------------------------------ //\n\n  // run all post submit server callbacks on post object successively\n  post = Telescope.callbacks.run(\"postSubmit\", post);\n\n  // -------------------------------- Insert ------------------------------- //\n\n  post._id = Posts.insert(post);\n\n  // --------------------- Server-Side Async Callbacks --------------------- //\n\n  Telescope.callbacks.runAsync(\"postSubmitAsync\", post);\n\n  return post;\n};\n\n/**\n * Edit a post in the database\n * @param {string} postId – the ID of the post being edited\n * @param {Object} modifier – the modifier object\n * @param {Object} post - the current post object\n */\nPosts.edit = function (postId, modifier, post) {\n\n  if (typeof post === \"undefined\") {\n    post = Posts.findOne(postId);\n  }\n\n\n  // ------------------------------ Callbacks ------------------------------ //\n\n  // run all post edit server callbacks on modifier successively\n  modifier = Telescope.callbacks.run(\"postEdit\", modifier, post);\n\n  // ------------------------------ Update ------------------------------ //\n\n  Posts.update(postId, modifier);\n\n  // ------------------------------ Callbacks ------------------------------ //\n\n  Telescope.callbacks.runAsync(\"postEditAsync\", Posts.findOne(postId));\n\n  // ------------------------------ After Update ------------------------------ //\n  return Posts.findOne(postId);\n};\n\n// ------------------------------------------------------------------------------------------- //\n// ----------------------------------------- Methods ----------------------------------------- //\n// ------------------------------------------------------------------------------------------- //\n\nvar postViews = [];\n\nMeteor.methods({\n\n  /**\n   * Meteor method for submitting a post from the client\n   * @memberof Posts\n   * @param {Object} post - the post being inserted\n   */\n  submitPost: function(post){\n\n    // required properties:\n    // title\n\n    // optional properties\n    // URL\n    // body\n    // categories\n    // thumbnailUrl\n\n    // NOTE: the current user and the post author user might be two different users!\n    var user = Meteor.user(),\n        hasAdminRights = Users.is.admin(user),\n        schema = Posts.simpleSchema()._schema;\n\n    // ------------------------------ Checks ------------------------------ //\n\n    // check that user can post\n    if (!user || !Users.can.post(user))\n      throw new Meteor.Error(601, i18n.t('you_need_to_login_or_be_invited_to_post_new_stories'));\n\n    // --------------------------- Rate Limiting -------------------------- //\n\n    if(!hasAdminRights){\n\n      var timeSinceLastPost = Users.timeSinceLast(user, Posts),\n        numberOfPostsInPast24Hours = Users.numberOfItemsInPast24Hours(user, Posts),\n        postInterval = Math.abs(parseInt(Settings.get('postInterval', 30))),\n        maxPostsPer24Hours = Math.abs(parseInt(Settings.get('maxPostsPerDay', 30)));\n\n      // check that user waits more than X seconds between posts\n      if(timeSinceLastPost < postInterval)\n        throw new Meteor.Error(604, i18n.t('please_wait')+(postInterval-timeSinceLastPost)+i18n.t('seconds_before_posting_again'));\n\n      // check that the user doesn't post more than Y posts per day\n      if(numberOfPostsInPast24Hours > maxPostsPer24Hours)\n        throw new Meteor.Error(605, i18n.t('sorry_you_cannot_submit_more_than')+maxPostsPer24Hours+i18n.t('posts_per_day'));\n\n    }\n\n    // ------------------------------ Properties ------------------------------ //\n\n    // admin-only properties\n    // status\n    // postedAt\n    // userId\n    // sticky (default to false)\n\n    // go over each schema field and throw an error if it's not editable\n    _.keys(post).forEach(function (fieldName) {\n\n      var field = schema[fieldName];\n      if (!Users.can.submitField(user, field)) {\n        throw new Meteor.Error(\"disallowed_property\", i18n.t('disallowed_property_detected') + \": \" + fieldName);\n      }\n\n    });\n\n    // if no post status has been set, set it now\n    if (!post.status) {\n      post.status = Posts.getDefaultStatus(user);\n    }\n\n    // if no userId has been set, default to current user id\n    if (!post.userId) {\n      post.userId = user._id;\n    }\n\n    return Posts.submit(post);\n  },\n\n  /**\n   * Meteor method for editing a post from the client\n   * @memberof Posts\n   * @param {Object} modifier - the update modifier\n   * @param {Object} postId - the id of the post being updated\n   */\n  editPost: function (modifier, postId) {\n\n    var user = Meteor.user(),\n        post = Posts.findOne(postId),\n        schema = Posts.simpleSchema()._schema;\n\n    // ------------------------------ Checks ------------------------------ //\n\n    // check that user can edit document\n    if (!user || !Users.can.edit(user, post)) {\n      throw new Meteor.Error(601, i18n.t('sorry_you_cannot_edit_this_post'));\n    }\n\n    // go over each field and throw an error if it's not editable\n    // loop over each operation ($set, $unset, etc.)\n    _.each(modifier, function (operation) {\n      // loop over each property being operated on\n      _.keys(operation).forEach(function (fieldName) {\n\n        var field = schema[fieldName];\n        if (!Users.can.editField(user, field, post)) {\n          throw new Meteor.Error(\"disallowed_property\", i18n.t('disallowed_property_detected') + \": \" + fieldName);\n        }\n\n      });\n    });\n\n    return Posts.edit(postId, modifier, post);\n\n  },\n\n  setPostedAt: function(post, customPostedAt){\n\n    var postedAt = new Date(); // default to current date and time\n\n    if(Users.is.admin(Meteor.user()) && typeof customPostedAt !== 'undefined') // if user is admin and a custom datetime has been set\n      postedAt = customPostedAt;\n\n    Posts.update(post._id, {$set: {postedAt: postedAt}});\n  },\n\n  approvePost: function(post){\n    if(Users.is.admin(Meteor.user())){\n      var set = {status: 2};\n\n      // unless post is already scheduled and has a postedAt date, set its postedAt date to now\n      if (!post.postedAt)\n        set.postedAt = new Date();\n\n      Posts.update(post._id, {$set: set}, {validate: false});\n\n      Telescope.callbacks.runAsync(\"postApprovedAsync\", post);\n\n    }else{\n      Messages.flash('You need to be an admin to do that.', \"error\");\n    }\n  },\n\n  unapprovePost: function(post){\n    if(Users.is.admin(Meteor.user())){\n      Posts.update(post._id, {$set: {status: 1}});\n    }else{\n      Messages.flash('You need to be an admin to do that.', \"error\");\n    }\n  },\n\n  increasePostViews: function(postId, sessionId){\n    this.unblock();\n\n    // only let users increment a post's view counter once per session\n    var view = {_id: postId, userId: this.userId, sessionId: sessionId};\n\n    if(_.where(postViews, view).length === 0){\n      postViews.push(view);\n      Posts.update(postId, { $inc: { viewCount: 1 }});\n    }\n  },\n\n  deletePostById: function(postId) {\n    // remove post comments\n    // if(!this.isSimulation) {\n    //   Comments.remove({post: postId});\n    // }\n    // NOTE: actually, keep comments after all\n\n    var post = Posts.findOne({_id: postId});\n\n    if(!Meteor.userId() || !Users.can.editById(Meteor.userId(), post)) throw new Meteor.Error(606, 'You need permission to edit or delete a post');\n\n    // decrement post count\n    Users.update({_id: post.userId}, {$inc: {\"telescope.postCount\": -1}});\n\n    // delete post\n    Posts.remove(postId);\n  }\n\n});\n","// array containing items in the views menu\nTelescope.menuItems.add(\"viewsMenu\", [\n  {\n    route: 'posts_top',\n    label: 'top',\n    description: 'most_popular_posts'\n  },\n  {\n    route: 'posts_new',\n    label: 'new',\n    description: 'newest_posts'\n  },\n  {\n    route: 'posts_best',\n    label: 'best',\n    description: 'highest_ranked_posts_ever'\n  },\n  {\n    route: 'posts_pending',\n    label: 'pending',\n    description: 'posts_awaiting_moderation',\n    adminOnly: true\n  },\n  {\n    route: 'posts_scheduled',\n    label: 'scheduled',\n    description: 'future_scheduled_posts',\n    adminOnly: true\n  },\n]);","/**\n * The Posts.controllers namespace\n * @namespace Posts.controllers\n */\nPosts.controllers = {};\n\n/**\n * Controller for all posts lists\n */\nPosts.controllers.list = RouteController.extend({\n\n  template: \"posts_list_controller\",\n\n  onBeforeAction: function () {\n    var showViewsNav = (typeof this.showViewsNav === 'undefined') ? true : this.showViewsNav;\n\n    if (showViewsNav) {\n      this.render('posts_list_top', {to: 'postsListTop'});\n    }\n    this.next();\n  },\n\n  data: function () {\n\n    var terms = {\n      view: this.view,\n      limit: this.params.limit || Settings.get('postsPerPage', 10)\n    };\n\n    // console.log('----------------- router running');\n\n    // note: the post list controller template will handle all subscriptions, so we just need to pass in the terms\n    return {\n      terms: terms\n    };\n  },\n\n  getTitle: function () {\n    return i18n.t(this.view);\n  },\n\n  getDescription: function () {\n    if (Router.current().route.getName() === 'posts_default') { // return site description on root path\n      return Settings.get('description');\n    } else {\n      return i18n.t(_.findWhere(Telescope.menuItems.get(\"viewsMenu\"), {label: this.view}).description);\n    }\n  },\n\n  fastRender: true\n});\n\nvar getDefaultViewController = function () {\n  var defaultView = Settings.get('defaultView', 'top');\n  // if view we got from settings is available in Posts.views object, use it\n  if (!!Posts.controllers[defaultView]) {\n    return Posts.controllers[defaultView];\n  } else {\n    return Posts.controllers.top;\n  }\n};\n\n// wrap in startup block to make sure Settings collection is defined\nMeteor.startup(function () {\n  Posts.controllers.default = getDefaultViewController().extend({\n    getTitle: function () {\n      var title = Settings.get('title', 'Telescope');\n      var tagline = Settings.get('tagline');\n      var fullTitle = !!tagline ? title + ' – ' + tagline : title ;\n      return fullTitle;\n    }\n  });\n\n});\n\n/**\n * Controller for top view\n */\nPosts.controllers.top = Posts.controllers.list.extend({\n  view: 'top'\n});\n\n/**\n * Controller for new view\n */\nPosts.controllers.new = Posts.controllers.list.extend({\n  view: 'new'\n});\n\n/**\n * Controller for best view\n */\nPosts.controllers.best = Posts.controllers.list.extend({\n  view: 'best'\n});\n\n/**\n * Controller for pending view\n */\nPosts.controllers.pending = Posts.controllers.list.extend({\n  view: 'pending'\n});\n\n/**\n * Controller for scheduled view\n */\nPosts.controllers.scheduled = Posts.controllers.list.extend({\n  view: 'scheduled'\n});\n\n/**\n * Controller for single post page\n */\nPosts.controllers.page = RouteController.extend({\n\n  template: 'post_page',\n\n  waitOn: function() {\n    this.postSubscription = coreSubscriptions.subscribe('singlePost', this.params._id);\n    this.postUsersSubscription = coreSubscriptions.subscribe('postUsers', this.params._id);\n    this.commentSubscription = coreSubscriptions.subscribe('commentsList', {view: 'postComments', postId: this.params._id});\n  },\n\n  post: function() {\n    return Posts.findOne(this.params._id);\n  },\n\n  getTitle: function () {\n    if (!!this.post())\n      return this.post().title;\n  },\n\n  onBeforeAction: function() {\n    if (! this.post()) {\n      if (this.postSubscription.ready()) {\n        this.render('not_found');\n      } else {\n        this.render('loading');\n      }\n    } else {\n      this.next();\n    }\n  },\n\n  onRun: function() {\n    var sessionId = Meteor.default_connection && Meteor.default_connection._lastSessionId ? Meteor.default_connection._lastSessionId : null;\n    Meteor.call('increasePostViews', this.params._id, sessionId);\n    this.next();\n  },\n\n  data: function() {\n    return this.post();\n  },\n  fastRender: true\n});\n\nMeteor.startup(function () {\n\n  Router.route('/', {\n    name: 'posts_default',\n    controller: Posts.controllers.default\n  });\n\n  Router.route('/top/:limit?', {\n    name: 'posts_top',\n    controller: Posts.controllers.top\n  });\n\n  // New\n\n  Router.route('/new/:limit?', {\n    name: 'posts_new',\n    controller: Posts.controllers.new\n  });\n\n  // Best\n\n  Router.route('/best/:limit?', {\n    name: 'posts_best',\n    controller: Posts.controllers.best\n  });\n\n  // Pending\n\n  Router.route('/pending/:limit?', {\n    name: 'posts_pending',\n    controller: Posts.controllers.pending\n  });\n\n  // Scheduled\n\n  Router.route('/scheduled/:limit?', {\n    name: 'posts_scheduled',\n    controller: Posts.controllers.scheduled\n  });\n\n  // Post Page\n\n  Router.route('/posts/:_id', {\n    name: 'post_page',\n    controller: Posts.controllers.page\n  });\n\n  Router.route('/posts/:_id/comment/:commentId', {\n    name: 'post_page_comment',\n    controller: Posts.controllers.page,\n    onAfterAction: function () {\n      // TODO: scroll to comment position\n    }\n  });\n\n  // Post Edit\n\n  Router.route('/posts/:_id/edit', {\n    name: 'post_edit',\n    template: 'post_edit',\n    waitOn: function () {\n      return [\n        coreSubscriptions.subscribe('singlePost', this.params._id),\n        coreSubscriptions.subscribe('allUsersAdmin')\n      ];\n    },\n    data: function() {\n      return {\n        postId: this.params._id,\n        post: Posts.findOne(this.params._id)\n      };\n    },\n    fastRender: true\n  });\n\n  // Post Submit\n\n  Router.route('/submit', {\n    name: 'post_submit',\n    template: 'post_submit',\n    waitOn: function () {\n      return coreSubscriptions.subscribe('allUsersAdmin');\n    }\n  });\n\n});\n","Posts._ensureIndex({\"status\": 1, \"postedAt\": 1});\n\n// Publish a list of posts\n\nMeteor.publish('postsList', function(terms) {\n  if(Users.can.viewById(this.userId)){\n    var parameters = Posts.getSubParams(terms),\n        posts = Posts.find(parameters.find, parameters.options);\n\n    return posts;\n  }\n  return [];\n});\n\n// Publish all the users that have posted the currently displayed list of posts\n// plus the commenters for each post\n\nMeteor.publish('postsListUsers', function(terms) {\n  if(Users.can.viewById(this.userId)){\n    var parameters = Posts.getSubParams(terms),\n        posts = Posts.find(parameters.find, parameters.options),\n        userIds = _.pluck(posts.fetch(), 'userId');\n\n    // for each post, add first four commenter's userIds to userIds array\n    posts.forEach(function (post) {\n      userIds = userIds.concat(_.first(post.commenters,4));\n    });\n\n    userIds = _.unique(userIds);\n\n    return Meteor.users.find({_id: {$in: userIds}}, {fields: Users.pubsub.avatarProperties, multi: true});\n  }\n  return [];\n});\n\n// Publish a single post\n\nMeteor.publish('singlePost', function(id) {\n  if (Users.can.viewById(this.userId)){\n    return Posts.find(id);\n  }\n  return [];\n});\n\n// Publish author of the current post, authors of its comments, and upvoters of the post\n\nMeteor.publish('postUsers', function(postId) {\n  if (Users.can.viewById(this.userId)){\n    // publish post author and post commenters\n    var post = Posts.findOne(postId);\n    var users = [];\n\n    if (post) {\n\n      users.push(post.userId); // publish post author's ID\n\n      // get IDs from all commenters on the post\n      var comments = Comments.find({postId: post._id}).fetch();\n      if (comments.length) {\n        users = users.concat(_.pluck(comments, \"userId\"));\n      }\n\n      // publish upvoters\n      if (post.upvoters && post.upvoters.length) {\n        users = users.concat(post.upvoters);\n      }\n\n      // publish downvoters\n      if (post.downvoters && post.downvoters.length) {\n        users = users.concat(post.downvoters);\n      }\n\n    }\n\n    // remove any duplicate IDs\n    users = _.unique(users);\n\n    return Meteor.users.find({_id: {$in: users}}, {fields: Users.pubsub.publicProperties});\n  }\n  return [];\n});\n"]}